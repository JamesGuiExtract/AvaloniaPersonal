/* 
 * Document API
 *
 * Extract Document API documentation
 *
 * OpenAPI spec version: v1
 * Contact: developers@extractsystems.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;

namespace IO.Swagger.Model
{
    /// <summary>
    /// args DTO for SubmitText
    /// </summary>
    [DataContract]
    public partial class SubmitTextArgs :  IEquatable<SubmitTextArgs>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SubmitTextArgs" /> class.
        /// </summary>
        /// <param name="Text">text argument, required.</param>
        /// <param name="WorkflowName">WorkflowName - optional, if not specified then default workflow for user is used.</param>
        public SubmitTextArgs(string Text = default(string), string WorkflowName = default(string))
        {
            this.Text = Text;
            this.WorkflowName = WorkflowName;
        }
        
        /// <summary>
        /// text argument, required
        /// </summary>
        /// <value>text argument, required</value>
        [DataMember(Name="text", EmitDefaultValue=false)]
        public string Text { get; set; }
        /// <summary>
        /// WorkflowName - optional, if not specified then default workflow for user is used
        /// </summary>
        /// <value>WorkflowName - optional, if not specified then default workflow for user is used</value>
        [DataMember(Name="workflowName", EmitDefaultValue=false)]
        public string WorkflowName { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class SubmitTextArgs {\n");
            sb.Append("  Text: ").Append(Text).Append("\n");
            sb.Append("  WorkflowName: ").Append(WorkflowName).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as SubmitTextArgs);
        }

        /// <summary>
        /// Returns true if SubmitTextArgs instances are equal
        /// </summary>
        /// <param name="other">Instance of SubmitTextArgs to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SubmitTextArgs other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.Text == other.Text ||
                    this.Text != null &&
                    this.Text.Equals(other.Text)
                ) && 
                (
                    this.WorkflowName == other.WorkflowName ||
                    this.WorkflowName != null &&
                    this.WorkflowName.Equals(other.WorkflowName)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.Text != null)
                    hash = hash * 59 + this.Text.GetHashCode();
                if (this.WorkflowName != null)
                    hash = hash * 59 + this.WorkflowName.GetHashCode();
                return hash;
            }
        }

        public IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
        { 
            yield break;
        }
    }

}
