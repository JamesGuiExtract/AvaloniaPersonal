/* 
 * Document API
 *
 * Extract Document API documentation
 *
 * OpenAPI spec version: v1
 * Contact: developers@extractsystems.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;

namespace IO.Swagger.Model
{
    /// <summary>
    /// Workflow data model
    /// </summary>
    [DataContract]
    public partial class Workflow :  IEquatable<Workflow>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Workflow" /> class.
        /// </summary>
        /// <param name="Name">Name of the workflow.</param>
        /// <param name="Description">description of the workflow.</param>
        /// <param name="EntryAction">the entry action for the workflow.</param>
        /// <param name="ExitAction">The exit action for the workflow.</param>
        /// <param name="RunAfterResultsAction">the run-after-results action for the workflow.</param>
        /// <param name="DocumentFolder">The workflow document folder name.</param>
        /// <param name="AttributeSetName">The workflow attribute set name.</param>
        /// <param name="Id">The Id of the Workflow, used to get by Id..</param>
        public Workflow(string Name = default(string), string Description = default(string), string EntryAction = default(string), string ExitAction = default(string), string RunAfterResultsAction = default(string), string DocumentFolder = default(string), string AttributeSetName = default(string), int? Id = default(int?))
        {
            this.Name = Name;
            this.Description = Description;
            this.EntryAction = EntryAction;
            this.ExitAction = ExitAction;
            this.RunAfterResultsAction = RunAfterResultsAction;
            this.DocumentFolder = DocumentFolder;
            this.AttributeSetName = AttributeSetName;
            this.Id = Id;
        }
        
        /// <summary>
        /// Name of the workflow
        /// </summary>
        /// <value>Name of the workflow</value>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }
        /// <summary>
        /// description of the workflow
        /// </summary>
        /// <value>description of the workflow</value>
        [DataMember(Name="description", EmitDefaultValue=false)]
        public string Description { get; set; }
        /// <summary>
        /// the entry action for the workflow
        /// </summary>
        /// <value>the entry action for the workflow</value>
        [DataMember(Name="entryAction", EmitDefaultValue=false)]
        public string EntryAction { get; set; }
        /// <summary>
        /// The exit action for the workflow
        /// </summary>
        /// <value>The exit action for the workflow</value>
        [DataMember(Name="exitAction", EmitDefaultValue=false)]
        public string ExitAction { get; set; }
        /// <summary>
        /// the run-after-results action for the workflow
        /// </summary>
        /// <value>the run-after-results action for the workflow</value>
        [DataMember(Name="runAfterResultsAction", EmitDefaultValue=false)]
        public string RunAfterResultsAction { get; set; }
        /// <summary>
        /// The workflow document folder name
        /// </summary>
        /// <value>The workflow document folder name</value>
        [DataMember(Name="documentFolder", EmitDefaultValue=false)]
        public string DocumentFolder { get; set; }
        /// <summary>
        /// The workflow attribute set name
        /// </summary>
        /// <value>The workflow attribute set name</value>
        [DataMember(Name="attributeSetName", EmitDefaultValue=false)]
        public string AttributeSetName { get; set; }
        /// <summary>
        /// The Id of the Workflow, used to get by Id.
        /// </summary>
        /// <value>The Id of the Workflow, used to get by Id.</value>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public int? Id { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Workflow {\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  EntryAction: ").Append(EntryAction).Append("\n");
            sb.Append("  ExitAction: ").Append(ExitAction).Append("\n");
            sb.Append("  RunAfterResultsAction: ").Append(RunAfterResultsAction).Append("\n");
            sb.Append("  DocumentFolder: ").Append(DocumentFolder).Append("\n");
            sb.Append("  AttributeSetName: ").Append(AttributeSetName).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as Workflow);
        }

        /// <summary>
        /// Returns true if Workflow instances are equal
        /// </summary>
        /// <param name="other">Instance of Workflow to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Workflow other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.Name == other.Name ||
                    this.Name != null &&
                    this.Name.Equals(other.Name)
                ) && 
                (
                    this.Description == other.Description ||
                    this.Description != null &&
                    this.Description.Equals(other.Description)
                ) && 
                (
                    this.EntryAction == other.EntryAction ||
                    this.EntryAction != null &&
                    this.EntryAction.Equals(other.EntryAction)
                ) && 
                (
                    this.ExitAction == other.ExitAction ||
                    this.ExitAction != null &&
                    this.ExitAction.Equals(other.ExitAction)
                ) && 
                (
                    this.RunAfterResultsAction == other.RunAfterResultsAction ||
                    this.RunAfterResultsAction != null &&
                    this.RunAfterResultsAction.Equals(other.RunAfterResultsAction)
                ) && 
                (
                    this.DocumentFolder == other.DocumentFolder ||
                    this.DocumentFolder != null &&
                    this.DocumentFolder.Equals(other.DocumentFolder)
                ) && 
                (
                    this.AttributeSetName == other.AttributeSetName ||
                    this.AttributeSetName != null &&
                    this.AttributeSetName.Equals(other.AttributeSetName)
                ) && 
                (
                    this.Id == other.Id ||
                    this.Id != null &&
                    this.Id.Equals(other.Id)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.Name != null)
                    hash = hash * 59 + this.Name.GetHashCode();
                if (this.Description != null)
                    hash = hash * 59 + this.Description.GetHashCode();
                if (this.EntryAction != null)
                    hash = hash * 59 + this.EntryAction.GetHashCode();
                if (this.ExitAction != null)
                    hash = hash * 59 + this.ExitAction.GetHashCode();
                if (this.RunAfterResultsAction != null)
                    hash = hash * 59 + this.RunAfterResultsAction.GetHashCode();
                if (this.DocumentFolder != null)
                    hash = hash * 59 + this.DocumentFolder.GetHashCode();
                if (this.AttributeSetName != null)
                    hash = hash * 59 + this.AttributeSetName.GetHashCode();
                if (this.Id != null)
                    hash = hash * 59 + this.Id.GetHashCode();
                return hash;
            }
        }

        public IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
        { 
            yield break;
        }
    }

}
