/* 
 * Document API
 *
 * Extract Document API documentation
 *
 * OpenAPI spec version: v1
 * Contact: developers@extractsystems.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;

namespace IO.Swagger.Model
{
    /// <summary>
    /// The position information of the attribute, and the associated page number of the document that the attribute is found on.
    /// </summary>
    [DataContract]
    public partial class Position :  IEquatable<Position>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Position" /> class.
        /// </summary>
        /// <param name="Pages">a list of the pages that the attribute spans (if any).</param>
        /// <param name="LineInfo">The list of lines of spatial information for the attribute - may span pages.</param>
        public Position(List<int?> Pages = default(List<int?>), List<SpatialLine> LineInfo = default(List<SpatialLine>))
        {
            this.Pages = Pages;
            this.LineInfo = LineInfo;
        }
        
        /// <summary>
        /// a list of the pages that the attribute spans (if any)
        /// </summary>
        /// <value>a list of the pages that the attribute spans (if any)</value>
        [DataMember(Name="pages", EmitDefaultValue=false)]
        public List<int?> Pages { get; set; }
        /// <summary>
        /// The list of lines of spatial information for the attribute - may span pages
        /// </summary>
        /// <value>The list of lines of spatial information for the attribute - may span pages</value>
        [DataMember(Name="lineInfo", EmitDefaultValue=false)]
        public List<SpatialLine> LineInfo { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Position {\n");
            sb.Append("  Pages: ").Append(Pages).Append("\n");
            sb.Append("  LineInfo: ").Append(LineInfo).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as Position);
        }

        /// <summary>
        /// Returns true if Position instances are equal
        /// </summary>
        /// <param name="other">Instance of Position to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Position other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.Pages == other.Pages ||
                    this.Pages != null &&
                    this.Pages.SequenceEqual(other.Pages)
                ) && 
                (
                    this.LineInfo == other.LineInfo ||
                    this.LineInfo != null &&
                    this.LineInfo.SequenceEqual(other.LineInfo)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.Pages != null)
                    hash = hash * 59 + this.Pages.GetHashCode();
                if (this.LineInfo != null)
                    hash = hash * 59 + this.LineInfo.GetHashCode();
                return hash;
            }
        }

        public IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
        { 
            yield break;
        }
    }

}
