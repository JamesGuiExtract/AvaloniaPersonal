/* 
 * Document API
 *
 * Extract Document API documentation
 *
 * OpenAPI spec version: v1
 * Contact: developers@extractsystems.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;

namespace IO.Swagger.Model
{
    /// <summary>
    /// A document attribute - a feature that has been identified as significant according to the processing rules
    /// </summary>
    [DataContract]
    public partial class DocumentAttribute :  IEquatable<DocumentAttribute>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="DocumentAttribute" /> class.
        /// </summary>
        /// <param name="Name">Name of the attribute.</param>
        /// <param name="Value">Value of the attribute.</param>
        /// <param name="Type">The assigned type of the attribute.</param>
        /// <param name="AverageCharacterConfidence">The average OCR recognition confidence of each character value in the defined attribute.</param>
        /// <param name="ConfidenceLevel">The confidence level of the redaction,  based on ConfidenceLevel enumeration, expressed as a string name..</param>
        /// <param name="HasPositionInfo">Some attributes do not have position info - in that case this will be false and the LineInfo  members will be empty..</param>
        /// <param name="SpatialPosition">The spatial position information of the attribute, inculding the page number, bounding rect, and zonal information (bounds plus skew).</param>
        /// <param name="ChildAttributes">child attributes, 0..N.</param>
        public DocumentAttribute(string Name = default(string), string Value = default(string), string Type = default(string), int? AverageCharacterConfidence = default(int?), string ConfidenceLevel = default(string), bool? HasPositionInfo = default(bool?), Position SpatialPosition = default(Position), List<DocumentAttribute> ChildAttributes = default(List<DocumentAttribute>))
        {
            this.Name = Name;
            this.Value = Value;
            this.Type = Type;
            this.AverageCharacterConfidence = AverageCharacterConfidence;
            this.ConfidenceLevel = ConfidenceLevel;
            this.HasPositionInfo = HasPositionInfo;
            this.SpatialPosition = SpatialPosition;
            this.ChildAttributes = ChildAttributes;
        }
        
        /// <summary>
        /// Name of the attribute
        /// </summary>
        /// <value>Name of the attribute</value>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }
        /// <summary>
        /// Value of the attribute
        /// </summary>
        /// <value>Value of the attribute</value>
        [DataMember(Name="value", EmitDefaultValue=false)]
        public string Value { get; set; }
        /// <summary>
        /// The assigned type of the attribute
        /// </summary>
        /// <value>The assigned type of the attribute</value>
        [DataMember(Name="type", EmitDefaultValue=false)]
        public string Type { get; set; }
        /// <summary>
        /// The average OCR recognition confidence of each character value in the defined attribute
        /// </summary>
        /// <value>The average OCR recognition confidence of each character value in the defined attribute</value>
        [DataMember(Name="averageCharacterConfidence", EmitDefaultValue=false)]
        public int? AverageCharacterConfidence { get; set; }
        /// <summary>
        /// The confidence level of the redaction,  based on ConfidenceLevel enumeration, expressed as a string name.
        /// </summary>
        /// <value>The confidence level of the redaction,  based on ConfidenceLevel enumeration, expressed as a string name.</value>
        [DataMember(Name="confidenceLevel", EmitDefaultValue=false)]
        public string ConfidenceLevel { get; set; }
        /// <summary>
        /// Some attributes do not have position info - in that case this will be false and the LineInfo  members will be empty.
        /// </summary>
        /// <value>Some attributes do not have position info - in that case this will be false and the LineInfo  members will be empty.</value>
        [DataMember(Name="hasPositionInfo", EmitDefaultValue=false)]
        public bool? HasPositionInfo { get; set; }
        /// <summary>
        /// The spatial position information of the attribute, inculding the page number, bounding rect, and zonal information (bounds plus skew)
        /// </summary>
        /// <value>The spatial position information of the attribute, inculding the page number, bounding rect, and zonal information (bounds plus skew)</value>
        [DataMember(Name="spatialPosition", EmitDefaultValue=false)]
        public Position SpatialPosition { get; set; }
        /// <summary>
        /// child attributes, 0..N
        /// </summary>
        /// <value>child attributes, 0..N</value>
        [DataMember(Name="childAttributes", EmitDefaultValue=false)]
        public List<DocumentAttribute> ChildAttributes { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class DocumentAttribute {\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Value: ").Append(Value).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  AverageCharacterConfidence: ").Append(AverageCharacterConfidence).Append("\n");
            sb.Append("  ConfidenceLevel: ").Append(ConfidenceLevel).Append("\n");
            sb.Append("  HasPositionInfo: ").Append(HasPositionInfo).Append("\n");
            sb.Append("  SpatialPosition: ").Append(SpatialPosition).Append("\n");
            sb.Append("  ChildAttributes: ").Append(ChildAttributes).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as DocumentAttribute);
        }

        /// <summary>
        /// Returns true if DocumentAttribute instances are equal
        /// </summary>
        /// <param name="other">Instance of DocumentAttribute to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DocumentAttribute other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.Name == other.Name ||
                    this.Name != null &&
                    this.Name.Equals(other.Name)
                ) && 
                (
                    this.Value == other.Value ||
                    this.Value != null &&
                    this.Value.Equals(other.Value)
                ) && 
                (
                    this.Type == other.Type ||
                    this.Type != null &&
                    this.Type.Equals(other.Type)
                ) && 
                (
                    this.AverageCharacterConfidence == other.AverageCharacterConfidence ||
                    this.AverageCharacterConfidence != null &&
                    this.AverageCharacterConfidence.Equals(other.AverageCharacterConfidence)
                ) && 
                (
                    this.ConfidenceLevel == other.ConfidenceLevel ||
                    this.ConfidenceLevel != null &&
                    this.ConfidenceLevel.Equals(other.ConfidenceLevel)
                ) && 
                (
                    this.HasPositionInfo == other.HasPositionInfo ||
                    this.HasPositionInfo != null &&
                    this.HasPositionInfo.Equals(other.HasPositionInfo)
                ) && 
                (
                    this.SpatialPosition == other.SpatialPosition ||
                    this.SpatialPosition != null &&
                    this.SpatialPosition.Equals(other.SpatialPosition)
                ) && 
                (
                    this.ChildAttributes == other.ChildAttributes ||
                    this.ChildAttributes != null &&
                    this.ChildAttributes.SequenceEqual(other.ChildAttributes)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.Name != null)
                    hash = hash * 59 + this.Name.GetHashCode();
                if (this.Value != null)
                    hash = hash * 59 + this.Value.GetHashCode();
                if (this.Type != null)
                    hash = hash * 59 + this.Type.GetHashCode();
                if (this.AverageCharacterConfidence != null)
                    hash = hash * 59 + this.AverageCharacterConfidence.GetHashCode();
                if (this.ConfidenceLevel != null)
                    hash = hash * 59 + this.ConfidenceLevel.GetHashCode();
                if (this.HasPositionInfo != null)
                    hash = hash * 59 + this.HasPositionInfo.GetHashCode();
                if (this.SpatialPosition != null)
                    hash = hash * 59 + this.SpatialPosition.GetHashCode();
                if (this.ChildAttributes != null)
                    hash = hash * 59 + this.ChildAttributes.GetHashCode();
                return hash;
            }
        }

        public IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
        { 
            yield break;
        }
    }

}
