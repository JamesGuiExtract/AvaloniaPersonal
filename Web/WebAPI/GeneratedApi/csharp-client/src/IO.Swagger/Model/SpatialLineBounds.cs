/* 
 * Document API
 *
 * Extract Document API documentation
 *
 * OpenAPI spec version: v1
 * Contact: developers@extractsystems.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;

namespace IO.Swagger.Model
{
    /// <summary>
    /// The bounding rectangle that encloses the attribute
    /// </summary>
    [DataContract]
    public partial class SpatialLineBounds :  IEquatable<SpatialLineBounds>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SpatialLineBounds" /> class.
        /// </summary>
        /// <param name="PageNumber">The start page number where the attribute exists, or -1 when the attribute doesn&#39;t have spatial info..</param>
        /// <param name="Text">The text value of the zone.</param>
        /// <param name="Top">the top of the bounding rectangle..</param>
        /// <param name="Left">the left edge of the bounding rectangle..</param>
        /// <param name="Botton">The botton of the bounding rectangle..</param>
        /// <param name="Right">The right edge of the bounding rectangle..</param>
        public SpatialLineBounds(int? PageNumber = default(int?), string Text = default(string), int? Top = default(int?), int? Left = default(int?), int? Botton = default(int?), int? Right = default(int?))
        {
            this.PageNumber = PageNumber;
            this.Text = Text;
            this.Top = Top;
            this.Left = Left;
            this.Botton = Botton;
            this.Right = Right;
        }
        
        /// <summary>
        /// The start page number where the attribute exists, or -1 when the attribute doesn&#39;t have spatial info.
        /// </summary>
        /// <value>The start page number where the attribute exists, or -1 when the attribute doesn&#39;t have spatial info.</value>
        [DataMember(Name="pageNumber", EmitDefaultValue=false)]
        public int? PageNumber { get; set; }
        /// <summary>
        /// The text value of the zone
        /// </summary>
        /// <value>The text value of the zone</value>
        [DataMember(Name="text", EmitDefaultValue=false)]
        public string Text { get; set; }
        /// <summary>
        /// the top of the bounding rectangle.
        /// </summary>
        /// <value>the top of the bounding rectangle.</value>
        [DataMember(Name="top", EmitDefaultValue=false)]
        public int? Top { get; set; }
        /// <summary>
        /// the left edge of the bounding rectangle.
        /// </summary>
        /// <value>the left edge of the bounding rectangle.</value>
        [DataMember(Name="left", EmitDefaultValue=false)]
        public int? Left { get; set; }
        /// <summary>
        /// The botton of the bounding rectangle.
        /// </summary>
        /// <value>The botton of the bounding rectangle.</value>
        [DataMember(Name="botton", EmitDefaultValue=false)]
        public int? Botton { get; set; }
        /// <summary>
        /// The right edge of the bounding rectangle.
        /// </summary>
        /// <value>The right edge of the bounding rectangle.</value>
        [DataMember(Name="right", EmitDefaultValue=false)]
        public int? Right { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class SpatialLineBounds {\n");
            sb.Append("  PageNumber: ").Append(PageNumber).Append("\n");
            sb.Append("  Text: ").Append(Text).Append("\n");
            sb.Append("  Top: ").Append(Top).Append("\n");
            sb.Append("  Left: ").Append(Left).Append("\n");
            sb.Append("  Botton: ").Append(Botton).Append("\n");
            sb.Append("  Right: ").Append(Right).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as SpatialLineBounds);
        }

        /// <summary>
        /// Returns true if SpatialLineBounds instances are equal
        /// </summary>
        /// <param name="other">Instance of SpatialLineBounds to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SpatialLineBounds other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.PageNumber == other.PageNumber ||
                    this.PageNumber != null &&
                    this.PageNumber.Equals(other.PageNumber)
                ) && 
                (
                    this.Text == other.Text ||
                    this.Text != null &&
                    this.Text.Equals(other.Text)
                ) && 
                (
                    this.Top == other.Top ||
                    this.Top != null &&
                    this.Top.Equals(other.Top)
                ) && 
                (
                    this.Left == other.Left ||
                    this.Left != null &&
                    this.Left.Equals(other.Left)
                ) && 
                (
                    this.Botton == other.Botton ||
                    this.Botton != null &&
                    this.Botton.Equals(other.Botton)
                ) && 
                (
                    this.Right == other.Right ||
                    this.Right != null &&
                    this.Right.Equals(other.Right)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.PageNumber != null)
                    hash = hash * 59 + this.PageNumber.GetHashCode();
                if (this.Text != null)
                    hash = hash * 59 + this.Text.GetHashCode();
                if (this.Top != null)
                    hash = hash * 59 + this.Top.GetHashCode();
                if (this.Left != null)
                    hash = hash * 59 + this.Left.GetHashCode();
                if (this.Botton != null)
                    hash = hash * 59 + this.Botton.GetHashCode();
                if (this.Right != null)
                    hash = hash * 59 + this.Right.GetHashCode();
                return hash;
            }
        }

        public IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
        { 
            yield break;
        }
    }

}
