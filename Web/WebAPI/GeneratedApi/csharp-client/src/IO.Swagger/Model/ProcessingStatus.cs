/* 
 * Document API
 *
 * Extract Document API documentation
 *
 * OpenAPI spec version: v1
 * Contact: developers@extractsystems.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;

namespace IO.Swagger.Model
{
    /// <summary>
    /// per document processing status
    /// </summary>
    [DataContract]
    public partial class ProcessingStatus :  IEquatable<ProcessingStatus>, IValidatableObject
    {
        /// <summary>
        /// status of submitted document
        /// </summary>
        /// <value>status of submitted document</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum DocumentStatusEnum
        {
            
            /// <summary>
            /// Enum Processing for "Processing"
            /// </summary>
            [EnumMember(Value = "Processing")]
            Processing,
            
            /// <summary>
            /// Enum Done for "Done"
            /// </summary>
            [EnumMember(Value = "Done")]
            Done,
            
            /// <summary>
            /// Enum Failed for "Failed"
            /// </summary>
            [EnumMember(Value = "Failed")]
            Failed,
            
            /// <summary>
            /// Enum NotApplicable for "NotApplicable"
            /// </summary>
            [EnumMember(Value = "NotApplicable")]
            NotApplicable
        }

        /// <summary>
        /// status of submitted document
        /// </summary>
        /// <value>status of submitted document</value>
        [DataMember(Name="documentStatus", EmitDefaultValue=false)]
        public DocumentStatusEnum? DocumentStatus { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="ProcessingStatus" /> class.
        /// </summary>
        /// <param name="Error">error information, if Error.ErrorOccurred &#x3D; true.</param>
        /// <param name="DocumentStatus">status of submitted document.</param>
        public ProcessingStatus(ErrorInfo Error = default(ErrorInfo), DocumentStatusEnum? DocumentStatus = default(DocumentStatusEnum?))
        {
            this.Error = Error;
            this.DocumentStatus = DocumentStatus;
        }
        
        /// <summary>
        /// error information, if Error.ErrorOccurred &#x3D; true
        /// </summary>
        /// <value>error information, if Error.ErrorOccurred &#x3D; true</value>
        [DataMember(Name="error", EmitDefaultValue=false)]
        public ErrorInfo Error { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ProcessingStatus {\n");
            sb.Append("  Error: ").Append(Error).Append("\n");
            sb.Append("  DocumentStatus: ").Append(DocumentStatus).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as ProcessingStatus);
        }

        /// <summary>
        /// Returns true if ProcessingStatus instances are equal
        /// </summary>
        /// <param name="other">Instance of ProcessingStatus to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ProcessingStatus other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.Error == other.Error ||
                    this.Error != null &&
                    this.Error.Equals(other.Error)
                ) && 
                (
                    this.DocumentStatus == other.DocumentStatus ||
                    this.DocumentStatus != null &&
                    this.DocumentStatus.Equals(other.DocumentStatus)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.Error != null)
                    hash = hash * 59 + this.Error.GetHashCode();
                if (this.DocumentStatus != null)
                    hash = hash * 59 + this.DocumentStatus.GetHashCode();
                return hash;
            }
        }

        public IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
        { 
            yield break;
        }
    }

}
