/* 
 * Document API
 *
 * Extract Document API documentation
 *
 * OpenAPI spec version: v1
 * Contact: developers@extractsystems.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;

namespace IO.Swagger.Model
{
    /// <summary>
    /// standard error information for returned objects
    /// </summary>
    [DataContract]
    public partial class ErrorInfo :  IEquatable<ErrorInfo>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ErrorInfo" /> class.
        /// </summary>
        /// <param name="ErrorOccurred">Boolean flag, true if an error has occurred.</param>
        /// <param name="Message">error message.</param>
        /// <param name="Code">error code - non-zero signals an error.</param>
        public ErrorInfo(bool? ErrorOccurred = default(bool?), string Message = default(string), int? Code = default(int?))
        {
            this.ErrorOccurred = ErrorOccurred;
            this.Message = Message;
            this.Code = Code;
        }
        
        /// <summary>
        /// Boolean flag, true if an error has occurred
        /// </summary>
        /// <value>Boolean flag, true if an error has occurred</value>
        [DataMember(Name="errorOccurred", EmitDefaultValue=false)]
        public bool? ErrorOccurred { get; set; }
        /// <summary>
        /// error message
        /// </summary>
        /// <value>error message</value>
        [DataMember(Name="message", EmitDefaultValue=false)]
        public string Message { get; set; }
        /// <summary>
        /// error code - non-zero signals an error
        /// </summary>
        /// <value>error code - non-zero signals an error</value>
        [DataMember(Name="code", EmitDefaultValue=false)]
        public int? Code { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ErrorInfo {\n");
            sb.Append("  ErrorOccurred: ").Append(ErrorOccurred).Append("\n");
            sb.Append("  Message: ").Append(Message).Append("\n");
            sb.Append("  Code: ").Append(Code).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as ErrorInfo);
        }

        /// <summary>
        /// Returns true if ErrorInfo instances are equal
        /// </summary>
        /// <param name="other">Instance of ErrorInfo to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ErrorInfo other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.ErrorOccurred == other.ErrorOccurred ||
                    this.ErrorOccurred != null &&
                    this.ErrorOccurred.Equals(other.ErrorOccurred)
                ) && 
                (
                    this.Message == other.Message ||
                    this.Message != null &&
                    this.Message.Equals(other.Message)
                ) && 
                (
                    this.Code == other.Code ||
                    this.Code != null &&
                    this.Code.Equals(other.Code)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.ErrorOccurred != null)
                    hash = hash * 59 + this.ErrorOccurred.GetHashCode();
                if (this.Message != null)
                    hash = hash * 59 + this.Message.GetHashCode();
                if (this.Code != null)
                    hash = hash * 59 + this.Code.GetHashCode();
                return hash;
            }
        }

        public IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
        { 
            yield break;
        }
    }

}
