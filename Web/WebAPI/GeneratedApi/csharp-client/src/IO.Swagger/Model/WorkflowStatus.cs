/* 
 * Document API
 *
 * Extract Document API documentation
 *
 * OpenAPI spec version: v1
 * Contact: developers@extractsystems.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;

namespace IO.Swagger.Model
{
    /// <summary>
    /// overall status information of a workflow
    /// </summary>
    [DataContract]
    public partial class WorkflowStatus :  IEquatable<WorkflowStatus>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="WorkflowStatus" /> class.
        /// </summary>
        /// <param name="Error">error information, when Error.ErrorOccurred &#x3D;&#x3D; true.</param>
        /// <param name="NumberProcessing">number of documents processing.</param>
        /// <param name="NumberDone">number of documents done processing.</param>
        /// <param name="NumberFailed">number of documents that have failed.</param>
        /// <param name="NumberIgnored">number of documents that have been ignored.</param>
        /// <param name="State">the state of the specified workflow.</param>
        public WorkflowStatus(ErrorInfo Error = default(ErrorInfo), int? NumberProcessing = default(int?), int? NumberDone = default(int?), int? NumberFailed = default(int?), int? NumberIgnored = default(int?), string State = default(string))
        {
            this.Error = Error;
            this.NumberProcessing = NumberProcessing;
            this.NumberDone = NumberDone;
            this.NumberFailed = NumberFailed;
            this.NumberIgnored = NumberIgnored;
            this.State = State;
        }
        
        /// <summary>
        /// error information, when Error.ErrorOccurred &#x3D;&#x3D; true
        /// </summary>
        /// <value>error information, when Error.ErrorOccurred &#x3D;&#x3D; true</value>
        [DataMember(Name="error", EmitDefaultValue=false)]
        public ErrorInfo Error { get; set; }
        /// <summary>
        /// number of documents processing
        /// </summary>
        /// <value>number of documents processing</value>
        [DataMember(Name="numberProcessing", EmitDefaultValue=false)]
        public int? NumberProcessing { get; set; }
        /// <summary>
        /// number of documents done processing
        /// </summary>
        /// <value>number of documents done processing</value>
        [DataMember(Name="numberDone", EmitDefaultValue=false)]
        public int? NumberDone { get; set; }
        /// <summary>
        /// number of documents that have failed
        /// </summary>
        /// <value>number of documents that have failed</value>
        [DataMember(Name="numberFailed", EmitDefaultValue=false)]
        public int? NumberFailed { get; set; }
        /// <summary>
        /// number of documents that have been ignored
        /// </summary>
        /// <value>number of documents that have been ignored</value>
        [DataMember(Name="numberIgnored", EmitDefaultValue=false)]
        public int? NumberIgnored { get; set; }
        /// <summary>
        /// the state of the specified workflow
        /// </summary>
        /// <value>the state of the specified workflow</value>
        [DataMember(Name="state", EmitDefaultValue=false)]
        public string State { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class WorkflowStatus {\n");
            sb.Append("  Error: ").Append(Error).Append("\n");
            sb.Append("  NumberProcessing: ").Append(NumberProcessing).Append("\n");
            sb.Append("  NumberDone: ").Append(NumberDone).Append("\n");
            sb.Append("  NumberFailed: ").Append(NumberFailed).Append("\n");
            sb.Append("  NumberIgnored: ").Append(NumberIgnored).Append("\n");
            sb.Append("  State: ").Append(State).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as WorkflowStatus);
        }

        /// <summary>
        /// Returns true if WorkflowStatus instances are equal
        /// </summary>
        /// <param name="other">Instance of WorkflowStatus to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(WorkflowStatus other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.Error == other.Error ||
                    this.Error != null &&
                    this.Error.Equals(other.Error)
                ) && 
                (
                    this.NumberProcessing == other.NumberProcessing ||
                    this.NumberProcessing != null &&
                    this.NumberProcessing.Equals(other.NumberProcessing)
                ) && 
                (
                    this.NumberDone == other.NumberDone ||
                    this.NumberDone != null &&
                    this.NumberDone.Equals(other.NumberDone)
                ) && 
                (
                    this.NumberFailed == other.NumberFailed ||
                    this.NumberFailed != null &&
                    this.NumberFailed.Equals(other.NumberFailed)
                ) && 
                (
                    this.NumberIgnored == other.NumberIgnored ||
                    this.NumberIgnored != null &&
                    this.NumberIgnored.Equals(other.NumberIgnored)
                ) && 
                (
                    this.State == other.State ||
                    this.State != null &&
                    this.State.Equals(other.State)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.Error != null)
                    hash = hash * 59 + this.Error.GetHashCode();
                if (this.NumberProcessing != null)
                    hash = hash * 59 + this.NumberProcessing.GetHashCode();
                if (this.NumberDone != null)
                    hash = hash * 59 + this.NumberDone.GetHashCode();
                if (this.NumberFailed != null)
                    hash = hash * 59 + this.NumberFailed.GetHashCode();
                if (this.NumberIgnored != null)
                    hash = hash * 59 + this.NumberIgnored.GetHashCode();
                if (this.State != null)
                    hash = hash * 59 + this.State.GetHashCode();
                return hash;
            }
        }

        public IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
        { 
            yield break;
        }
    }

}
