/* 
 * Document API
 *
 * Extract Document API documentation
 *
 * OpenAPI spec version: v1
 * Contact: developers@extractsystems.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;

namespace IO.Swagger.Model
{
    /// <summary>
    /// Spatial-line \&quot;zone\&quot; - a possibly skewed rectangular area. The skew  is represented by height relative to the starting point. Typically   the end point is vertically displayed by one (when there is no skew),   so that start and end determine a line, which defines a rectangle   when the height is applied.
    /// </summary>
    [DataContract]
    public partial class SpatialLineZone :  IEquatable<SpatialLineZone>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SpatialLineZone" /> class.
        /// </summary>
        /// <param name="PageNumber">The page number where the attribute exists, or -1 when the attribute doesn&#39;t have spatial info..</param>
        /// <param name="Text">The text value of the zone.</param>
        /// <param name="StartX">left side of zone.</param>
        /// <param name="StartY">top of zone.</param>
        /// <param name="EndX">right side of zone.</param>
        /// <param name="EndY">bottom side of zone.</param>
        /// <param name="Height">The height of the bounding rect, relative to the Start point..</param>
        public SpatialLineZone(int? PageNumber = default(int?), string Text = default(string), int? StartX = default(int?), int? StartY = default(int?), int? EndX = default(int?), int? EndY = default(int?), int? Height = default(int?))
        {
            this.PageNumber = PageNumber;
            this.Text = Text;
            this.StartX = StartX;
            this.StartY = StartY;
            this.EndX = EndX;
            this.EndY = EndY;
            this.Height = Height;
        }
        
        /// <summary>
        /// The page number where the attribute exists, or -1 when the attribute doesn&#39;t have spatial info.
        /// </summary>
        /// <value>The page number where the attribute exists, or -1 when the attribute doesn&#39;t have spatial info.</value>
        [DataMember(Name="pageNumber", EmitDefaultValue=false)]
        public int? PageNumber { get; set; }
        /// <summary>
        /// The text value of the zone
        /// </summary>
        /// <value>The text value of the zone</value>
        [DataMember(Name="text", EmitDefaultValue=false)]
        public string Text { get; set; }
        /// <summary>
        /// left side of zone
        /// </summary>
        /// <value>left side of zone</value>
        [DataMember(Name="startX", EmitDefaultValue=false)]
        public int? StartX { get; set; }
        /// <summary>
        /// top of zone
        /// </summary>
        /// <value>top of zone</value>
        [DataMember(Name="startY", EmitDefaultValue=false)]
        public int? StartY { get; set; }
        /// <summary>
        /// right side of zone
        /// </summary>
        /// <value>right side of zone</value>
        [DataMember(Name="endX", EmitDefaultValue=false)]
        public int? EndX { get; set; }
        /// <summary>
        /// bottom side of zone
        /// </summary>
        /// <value>bottom side of zone</value>
        [DataMember(Name="endY", EmitDefaultValue=false)]
        public int? EndY { get; set; }
        /// <summary>
        /// The height of the bounding rect, relative to the Start point.
        /// </summary>
        /// <value>The height of the bounding rect, relative to the Start point.</value>
        [DataMember(Name="height", EmitDefaultValue=false)]
        public int? Height { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class SpatialLineZone {\n");
            sb.Append("  PageNumber: ").Append(PageNumber).Append("\n");
            sb.Append("  Text: ").Append(Text).Append("\n");
            sb.Append("  StartX: ").Append(StartX).Append("\n");
            sb.Append("  StartY: ").Append(StartY).Append("\n");
            sb.Append("  EndX: ").Append(EndX).Append("\n");
            sb.Append("  EndY: ").Append(EndY).Append("\n");
            sb.Append("  Height: ").Append(Height).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as SpatialLineZone);
        }

        /// <summary>
        /// Returns true if SpatialLineZone instances are equal
        /// </summary>
        /// <param name="other">Instance of SpatialLineZone to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SpatialLineZone other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.PageNumber == other.PageNumber ||
                    this.PageNumber != null &&
                    this.PageNumber.Equals(other.PageNumber)
                ) && 
                (
                    this.Text == other.Text ||
                    this.Text != null &&
                    this.Text.Equals(other.Text)
                ) && 
                (
                    this.StartX == other.StartX ||
                    this.StartX != null &&
                    this.StartX.Equals(other.StartX)
                ) && 
                (
                    this.StartY == other.StartY ||
                    this.StartY != null &&
                    this.StartY.Equals(other.StartY)
                ) && 
                (
                    this.EndX == other.EndX ||
                    this.EndX != null &&
                    this.EndX.Equals(other.EndX)
                ) && 
                (
                    this.EndY == other.EndY ||
                    this.EndY != null &&
                    this.EndY.Equals(other.EndY)
                ) && 
                (
                    this.Height == other.Height ||
                    this.Height != null &&
                    this.Height.Equals(other.Height)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.PageNumber != null)
                    hash = hash * 59 + this.PageNumber.GetHashCode();
                if (this.Text != null)
                    hash = hash * 59 + this.Text.GetHashCode();
                if (this.StartX != null)
                    hash = hash * 59 + this.StartX.GetHashCode();
                if (this.StartY != null)
                    hash = hash * 59 + this.StartY.GetHashCode();
                if (this.EndX != null)
                    hash = hash * 59 + this.EndX.GetHashCode();
                if (this.EndY != null)
                    hash = hash * 59 + this.EndY.GetHashCode();
                if (this.Height != null)
                    hash = hash * 59 + this.Height.GetHashCode();
                return hash;
            }
        }

        public IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
        { 
            yield break;
        }
    }

}
