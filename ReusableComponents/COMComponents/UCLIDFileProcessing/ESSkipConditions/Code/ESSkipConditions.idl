// ESSkipConditions.idl : IDL source for ESFAMConditions
//

// This file will be processed by the MIDL tool to
// produce the type library (ESSkipConditions.tlb) and marshalling code.

import "oaidl.idl";
import "ocidl.idl";

[
	uuid(292B3BCA-F371-457C-892A-E4383087C5D4),
	version(1.0),
	helpstring("ESFAMConditions 1.0 Type Library")
]

library EXTRACT_FAMCONDITIONSLib
{
	importlib("stdole32.tlb");
	importlib("stdole2.tlb");

	importlib("..\..\..\UCLIDComponentsLM\COMLM\Code\COMLM.tlb");
	importlib("..\..\..\UCLIDCOMUtils\Core\Code\UCLIDCOMUtils.tlb");
	importlib("..\..\Code\UCLIDFileProcessing.tlb");

	//----------------------------------------------------------------------------------------------
	//-E N U M S -----------------------------------------------------------------------------------
	//----------------------------------------------------------------------------------------------
	typedef
	[
		uuid(AE80EFB7-980D-4efd-8113-A248518E54BC), 
		helpstring("Extract LogicFAMConditionType")
	]
	enum ELogicalOperator
	{
	  kInvalidOperator =0,
	  kANDOperator = 1,
	  kOROperator = 2,
	  kEXACTONEOperator = 3,
	  kNONEOperator = 4
	}ELogicalOperator;

	//----------------------------------------------------------------------------------------------
	//-I N T E R F A C E S -------------------------------------------------------------------------
	//----------------------------------------------------------------------------------------------
	[
		object,
		uuid(237CC163-CFD8-4EA8-B94B-E8D3734840B7),
		dual,
		nonextensible,
		helpstring("IFileExistenceFAMCondition Interface"),
		pointer_default(unique)
	]
	interface IFileExistenceFAMCondition : IDispatch
	{
		// Indicates that file DOES or DOES NOT exist
		[propget, id(1), helpstring("property FileExists")] HRESULT FileExists([out, retval] VARIANT_BOOL* pRetVal);
		[propput, id(1), helpstring("property FileExists")] HRESULT FileExists([in] VARIANT_BOOL newVal);

		// String may include TextFunctionExpansion substrings to be processed to finally provide 
		// a path to the file whose existence is questioned
		[propget, id(2), helpstring("property FileString")] HRESULT FileString([out, retval] BSTR *strFileString);
		[propput, id(2), helpstring("property FileString")] HRESULT FileString([in] BSTR strFileString);
	};

	[
		object,
		uuid(CC3D8DBC-1228-434a-85B9-8516181D05E8),
		dual,
		nonextensible,
		helpstring("IFileNamePatternFAMCondition Interface"),
		pointer_default(unique)
	]
	interface IFileNamePatternFAMCondition : IDispatch
	{
		// Indicates that file DOES or DOES NOT Contain/exactly match
		[propget, id(1), helpstring("property DoesContainOrMatch")] HRESULT DoesContainOrMatch([out, retval] VARIANT_BOOL* pRetVal);
		[propput, id(1), helpstring("property DoesContainOrMatch")] HRESULT DoesContainOrMatch([in] VARIANT_BOOL newVal);

		// String may include TextFunctionExpansion substrings to be processed to finally provide 
		// a path to the file whose existence is questioned
		[propget, id(2), helpstring("property FileString")] HRESULT FileString([out, retval] BSTR *strFileString);
		[propput, id(2), helpstring("property FileString")] HRESULT FileString([in] BSTR strFileString);

		// Indicates that file Contain or exactly match the regular expression
		[propget, id(3), helpstring("property ContainMatch")] HRESULT ContainMatch([out, retval] VARIANT_BOOL* pRetVal);
		[propput, id(3), helpstring("property ContainMatch")] HRESULT ContainMatch([in] VARIANT_BOOL newVal);

		// Indicates that if regular expression is case sensitive
		[propget, id(4), helpstring("property IsCaseSensitive")] HRESULT IsCaseSensitive([out, retval] VARIANT_BOOL* pRetVal);
		[propput, id(4), helpstring("property IsCaseSensitive")] HRESULT IsCaseSensitive([in] VARIANT_BOOL newVal);

		// Indicates that if regular expression is got from file
		[propget, id(5), helpstring("property IsRegFromFile")] HRESULT IsRegFromFile([out, retval] VARIANT_BOOL* pRetVal);
		[propput, id(5), helpstring("property IsRegFromFile")] HRESULT IsRegFromFile([in] VARIANT_BOOL newVal);

		// String may include TextFunctionExpansion substrings to be processed to finally provide 
		// a path to the file whose existence is questioned
		[propget, id(6), helpstring("property RegExpFileName")] HRESULT RegExpFileName([out, retval] BSTR *strFileString);
		[propput, id(6), helpstring("property RegExpFileName")] HRESULT RegExpFileName([in] BSTR strFileString);

		// String may include regular expression pattern
		[propget, id(7), helpstring("property RegPattern")] HRESULT RegPattern([out, retval] BSTR *strFileString);
		[propput, id(7), helpstring("property RegPattern")] HRESULT RegPattern([in] BSTR strFileString);
	};

	[
		object,
		uuid(6255D260-327D-456B-A638-DE18DCAA1105),
		dual,
		helpstring("IMathematicalFAMCondition Interface"),
		pointer_default(unique)
	]
	interface IMathematicalFAMCondition : IDispatch
	{
		// Indicates whether to consider the condition met or not met when the
		// MathematicalCondition is satisfied
		[propget, id(1), helpstring("property ConsiderMet")] HRESULT
			ConsiderMet([out, retval] VARIANT_BOOL* pVal);
		[propput, id(1), helpstring("property ConsiderMet")] HRESULT
			ConsiderMet([in] VARIANT_BOOL newVal);

		// The mathematical condition to test
		[propget, id(2), helpstring("property MathematicalCondition")] HRESULT
			MathematicalCondition([out, retval] IMathConditionChecker** ppMathCondition);
		[propput, id(2), helpstring("property MathematicalCondition")] HRESULT
			MathematicalCondition([in] IMathConditionChecker* pMathCondition);
	};

	[
		object,
		uuid(064B346C-43FC-4F24-A251-622056DCFFA7),
		dual,
		helpstring("ITagFAMCondition Interface"),
		pointer_default(unique)
	]
	interface ITagCondition : IDispatch
	{
		// Indicates whether to consider the condition met or not met when the
		// Tag condition is satisfied
		[propget, id(1), helpstring("property ConsiderMet")] HRESULT
			ConsiderMet([out, retval] VARIANT_BOOL* pVal);
		[propput, id(1), helpstring("property ConsiderMet")] HRESULT
			ConsiderMet([in] VARIANT_BOOL newVal);

		// Indicates whether a file needs to have "Any" of the file tags selected, or
		// "All" of the file tags selected
		[propget, id(2), helpstring("property AnyTags")] HRESULT
			AnyTags([out, retval] VARIANT_BOOL* pVal);
		[propput, id(2), helpstring("property AnyTags")] HRESULT
			AnyTags([in] VARIANT_BOOL newVal);

		// The list of tags a file must contain to satisfy this condition (
		[propget, id(3), helpstring("property Tags")] HRESULT
			Tags([out, retval] IVariantVector** ppVecTags);
		[propput, id(3), helpstring("property Tags")] HRESULT
			Tags([in] IVariantVector* pVecTags);
	};

	[
		object,
		uuid(570EE4FB-5071-4620-A0D5-4A0A589F5B4C),
		dual,
		nonextensible,
		helpstring("IGenericMultiFAMCondition Interface"),
		pointer_default(unique)
	]
	interface IGenericMultiFAMCondition : IDispatch
	{
		// Generic FileMatchesFAMCondition which will called by multi FAM condition
		// with different logical operators
		[id(1), helpstring("method FileMatchesFAMCondition")] HRESULT FileMatchesFAMCondition(
			[in] IIUnknownVector* pFAMConditions, [in] ELogicalOperator eLogicalOperator, 
			[in] BSTR bstrFile, [in] IFileProcessingDB* pFPDB, [in] long lFileID, 
			[in] long lActionID, [in] IFAMTagManager* pFAMTM, [out, retval] VARIANT_BOOL* pRetVal);
	};

	[
		object,
		uuid(3BACAE68-137C-4F2F-9501-0E13412A4B54),
		dual,
		nonextensible,
		helpstring("ITaskCondition Interface"),
		pointer_default(unique)
	]
	interface ITaskCondition : IDispatch
	{
		// The IFileProcessingTask that should be run to evaluate whether the condition succeeds
		[propget, id(1), helpstring("property Task")] HRESULT Task([out, retval] IFileProcessingTask** ppVal);
		[propput, id(1), helpstring("property Task")] HRESULT Task([in] IFileProcessingTask* pNewVal);

		// VARIANT_TRUE if exceptions thrown by the task should be logged.
		[propget, id(2), helpstring("property LogExceptions")] HRESULT LogExceptions([out, retval] VARIANT_BOOL* pVal);
		[propput, id(2), helpstring("property LogExceptions")] HRESULT LogExceptions([in] VARIANT_BOOL newVal);
	};

	[
		uuid(69F8FA9D-5C3D-4569-9EE0-55B3FC63F630),
		helpstring("FileExistence Class")
	]
	coclass FileExistence
	{
		[default] interface IFileExistenceFAMCondition;
		interface ILicensedComponent;
		interface ICategorizedComponent;
		interface ICopyableObject;
		interface IMustBeConfiguredObject;
		interface IFAMCondition;
	};
	[
		uuid(657EB1F4-9890-45e1-A68F-EEEC8E12037D),
		helpstring("FileExistencePP Class")
	]
	coclass FileExistencePP
	{
		interface IUnknown;
	};

	[
		uuid(421BC3A2-8218-4048-A1A2-1FC7ED64EE5E),
		helpstring("FileNamePattern Class")
	]
	coclass FileNamePattern
	{
		[default] interface IFileNamePatternFAMCondition;
		interface ILicensedComponent;
		interface ICategorizedComponent;
		interface ICopyableObject;
		interface IMustBeConfiguredObject;
		interface IFAMCondition;
	};
	[
		uuid(3BF3D2A3-7DA3-4a8d-B4AC-D7D36956A063),
		helpstring("FileNamePatternPP Class")
	]
	coclass FileNamePatternPP
	{
		interface IUnknown;
	};

	[
		uuid(E7B93F0F-C8ED-4FC7-A6AC-47C3B7D7B669),
		helpstring("RandomMathCondition Class")
	]
	coclass RandomMathCondition
	{
		[default] interface IRandomMathCondition;
		interface IMathConditionChecker;
		interface ILicensedComponent;
		interface ICopyableObject;
		interface IMustBeConfiguredObject;
	};

	[
		uuid(29B3478A-2878-403E-8D32-03E8C45813DA),
		helpstring("OnceEveryMathCondition Class")
	]
	coclass OnceEveryMathCondition
	{
		[default] interface IOnceEveryMathCondition;
		interface IMathConditionChecker;
		interface ILicensedComponent;
		interface ICopyableObject;
		interface IClipboardCopyable;
		interface IMustBeConfiguredObject;
	};

	[
		uuid(F58E3618-4ED3-4826-9736-6011B6511A7A),
		helpstring("ModulusEqualsMathCondition Class")
	]
	coclass ModulusEqualsMathCondition
	{
		[default] interface IModulusEqualsMathCondition;
		interface IMathConditionChecker;
		interface ILicensedComponent;
		interface ICopyableObject;
		interface IMustBeConfiguredObject;
	};

	[
		uuid(B377CED4-6059-4748-B548-4FA4CA0EEC12),
		helpstring("MathematicalCondition Class")
	]
	coclass MathematicalCondition
	{
		[default] interface IMathematicalFAMCondition;
		interface ILicensedComponent;
		interface ICategorizedComponent;
		interface ICopyableObject;
		interface IClipboardCopyable;
		interface IMustBeConfiguredObject;
		interface IFAMCondition;
	};
	[
		uuid(46571961-56D1-4157-92BF-1FA791658174),
		helpstring("MathematicalConditionPP Class")
	]
	coclass MathematicalConditionPP
	{
		interface IUnknown;
	};
		
	[
		uuid(1A50AB0C-B935-48F3-9D62-AC567113714F),
		helpstring("TagCondition Class")
	]
	coclass TagCondition
	{
		[default] interface ITagCondition;
		interface ILicensedComponent;
		interface ICategorizedComponent;
		interface ICopyableObject;
		interface IMustBeConfiguredObject;
		interface IFAMCondition;
	};
	[
		uuid(3FB14376-588C-43AD-98FA-1C0AEFC6DEB2),
		helpstring("TagConditionPP Class")
	]
	coclass TagConditionPP
	{
		interface IUnknown;
	};

	[
		uuid(6DEF16E6-8A3A-4104-BDD3-7F54F18E1363),
		helpstring("GenericMultiFAMCondition Class")
	]
	coclass GenericMultiFAMCondition
	{
		[default] interface IGenericMultiFAMCondition;
		interface ILicensedComponent;
	};

	[
		uuid(7CCD2EDD-659C-45e6-83F3-0DF48958D105),
		helpstring("MultiFAMConditionAND Class")
	]
	coclass MultiFAMConditionAND
	{
		[default] interface IFAMCondition;
		interface ILicensedComponent;
		interface ICopyableObject;
		interface ICategorizedComponent;
		interface IMustBeConfiguredObject;
	};

	[
		uuid(B0943AA6-87EE-41e5-B1AD-3AD2F81C279C),
		helpstring("MultiFAMConditionOR Class")
	]
	coclass MultiFAMConditionOR
	{
		[default] interface IFAMCondition;
		interface ILicensedComponent;
		interface ICopyableObject;
		interface ICategorizedComponent;
		interface IMustBeConfiguredObject;
	};

	[
		uuid(26AFEBC0-4FBB-45c8-9913-B352E4F65C93),
		helpstring("MultiFAMConditionEXACTONE Class")
	]
	coclass MultiFAMConditionEXACTONE
	{
		[default] interface IFAMCondition;
		interface ILicensedComponent;
		interface ICopyableObject;
		interface ICategorizedComponent;
		interface IMustBeConfiguredObject;
	};

	[
		uuid(BEC43D96-A4F1-4f63-BF1F-44E544400300),
		helpstring("MultiFAMConditionEXACTONE Class")
	]
	coclass MultiFAMConditionNONE
	{
		[default] interface IFAMCondition;
		interface ILicensedComponent;
		interface ICopyableObject;
		interface ICategorizedComponent;
		interface IMustBeConfiguredObject;
	};

	[
		uuid(F98475F4-6EED-4367-8340-16D6D05E43F6),
		helpstring("TaskCondition Class")
	]
	coclass TaskCondition
	{
		[default] interface ITaskCondition;
		interface IFAMCondition;
		interface ICategorizedComponent;
		interface ICopyableObject;
		interface IMustBeConfiguredObject;
		interface ILicensedComponent;
	};

	[
		uuid(267BB4AC-4707-4301-9DB6-1D19C7227082),
		helpstring("TaskConditionPP Class")
	]
	coclass TaskConditionPP
	{
		[default] interface IUnknown;
	};
};
