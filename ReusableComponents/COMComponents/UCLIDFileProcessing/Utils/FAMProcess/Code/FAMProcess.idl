// FAMProcess.idl : IDL source for FAMProcess
//

// This file will be processed by the MIDL tool to
// produce the type library (FAMProcess.tlb) and marshalling code.

import "oaidl.idl";
import "ocidl.idl";

[
	object,
	uuid(E5591219-3561-4428-B33B-92107F22D026),
	dual,
	nonextensible,
	helpstring("IFileProcessingManagerProcess Interface"),
	pointer_default(unique)
]
interface IFileProcessingManagerProcess : IDispatch
{
	//----------------------------------------------------------------------------------------------
	// Pings the FAMProcess.exe to ensure it is still alive
	[id(1), helpstring("method Ping")] HRESULT Ping();
	//----------------------------------------------------------------------------------------------
	// Starts processing the FPS File
	// REQUIRES: FPS file has been set
	[id(2), helpstring("method Start")] HRESULT Start([in] LONG lNumberOfFilesToProcess);
	//----------------------------------------------------------------------------------------------
	// Stops the processing.  If no processing is being done, does nothing.
	[id(3), helpstring("method Stop")] HRESULT Stop();
	//----------------------------------------------------------------------------------------------
	[id(4), helpstring("method GetCounts")] HRESULT GetCounts(
		[out] LONG* plNumFilesProcessedSuccessfully, [out] LONG* plNumProcessingErrors,
		[out] LONG* plNumFilesSupplied, [out] LONG* plNumSupplyingErrors);
	//----------------------------------------------------------------------------------------------
	// Gets the current process ID
	[propget, id(5), helpstring("property ProcessID")] HRESULT ProcessID([out, retval] LONG* plID);
	//----------------------------------------------------------------------------------------------
	// Gets whether the current instance is actively processing or not
	[propget, id(6), helpstring("property IsRunning")] HRESULT IsRunning(
		[out, retval] VARIANT_BOOL* pvbProcessing);
	//----------------------------------------------------------------------------------------------
	// Gets/sets the FPS file to process.
	// Put requires that CurrentlyProcessing == VARIANT_FALSE
	[propget, id(7), helpstring("property FPSFile")] HRESULT FPSFile([out, retval] BSTR* pbstrFileName);
	[propput, id(7), helpstring("property FPSFile")] HRESULT FPSFile([in] BSTR bstrFileName);
	//----------------------------------------------------------------------------------------------
	// Gets whether user authentication is required to start the FAMProcess
	[propget, id(8), helpstring("property AuthenticationRequired")] HRESULT
		AuthenticationRequired([out, retval] VARIANT_BOOL* vbAuthenticationRequired);
	//----------------------------------------------------------------------------------------------
	// Provides the authentication code needed to run administrative tasks without a password
	[id(9), helpstring("method AuthenticateService")] HRESULT AuthenticateService(
		[in] BSTR bstrValue);
	//----------------------------------------------------------------------------------------------
	// Gets whether the FAMProcess is configured to keep processing as files are added to the queue.
	[propget, id(10), helpstring("property KeepProcessingAsFilesAdded")] HRESULT KeepProcessingAsFilesAdded(
		[out, retval]  VARIANT_BOOL *pbValue);
	//----------------------------------------------------------------------------------------------
	// Gets the connection string used to connect based on the current database server,
	// name and advanced connection string properties.
	[propget, id(11), helpstring("property ConnectionString")] HRESULT ConnectionString(
		[out, retval]  BSTR *pbstrConnectionString);
	//----------------------------------------------------------------------------------------------
	// Gets whether the FAMProcess is configured to process files
	[propget, id(12), helpstring("property IsProcessingEnabled")] HRESULT IsProcessingEnabled(
		[out, retval]  VARIANT_BOOL *pbValue);
	//----------------------------------------------------------------------------------------------
	// Gets whether the FAMProcess is configured to supply files
	[propget, id(13), helpstring("property IsSupplyingEnabled")] HRESULT IsSupplyingEnabled(
		[out, retval]  VARIANT_BOOL *pbValue);
};

[
	uuid(70C83EF4-87D0-49DA-85EA-F29549EEEB7A),
	version(1.0),
	helpstring("FAMProcess 1.0 Type Library")
]
library FAMProcessLib
{
	importlib("stdole2.tlb");
	importlib("..\..\..\..\UCLIDComponentsLM\COMLM\Code\COMLM.tlb");

	[
		uuid(21296131-B9D3-42D2-9850-76C474B9D0AF),
		helpstring("FileProcessingManagerProcess Class")
	]
	coclass FileProcessingManagerProcess
	{
		[default] interface IFileProcessingManagerProcess;
		interface ILicensedComponent;
	};
};
