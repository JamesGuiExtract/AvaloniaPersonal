#include "StdAfx.h"

#include "WorkflowManagement.h"
#include "ListCtrlHelper.h"
#include "AddModifyWorkflowForm.h"
#include "AddActionForm.h"
#include "RenameActionDlg.h"

#include <UCLIDException.h>
#include <COMUtils.h>
#include <string>

// Disable all the warnings that generated by including the msclr header files
#pragma warning(disable : 4945)

// includes to allow simple syntax for marshaling between c++ types and .net types
#include <msclr\marshal_cppstd.h>
#include <msclr\marshal_windows.h>

using namespace msclr::interop;
using namespace System::Collections::Specialized;


namespace Extract
{
	namespace FAMDBAdmin
	{
#pragma region Event Handlers

		Void  WorkflowManagement::HandleAddActionButton_Click(System::Object^  sender, System::EventArgs^  e)
		{
			try
			{
				// Create an add action dialog
				AddActionForm ^addAction = gcnew AddActionForm();

				if (addAction->ShowDialog(this) == System::Windows::Forms::DialogResult::OK)
				{
					// Add application trace whenever a database modification is made
					// [LRCAU #5052 - JDS - 12/18/2008]
					UCLIDException uex("ELI42045", "Application trace: Database change");
					uex.addDebugInfo("Change", "Add new action");
					uex.addDebugInfo("User Name", getCurrentUserName());
					uex.addDebugInfo("Server Name", asString(_ipfamDatabase->DatabaseServer));
					uex.addDebugInfo("Database", asString(_ipfamDatabase->DatabaseName));

					String ^ newAction = addAction->ActionNameToAdd;

					if (!String::IsNullOrWhiteSpace(newAction))
					{
						// Add the new action to the database
						DWORD dwNewActionID;

						// Display a wait-cursor because we are adding an action to DB
						CWaitCursor wait;

						string strNewAction = marshal_as<string>(newAction);

						// Create the new action
						dwNewActionID = _ipfamDatabase->DefineNewAction(_bstr_t(strNewAction.c_str()));
						uex.addDebugInfo("New Action Name", strNewAction);
						uex.addDebugInfo("New Action ID", dwNewActionID);

						ListItemPair ^newItem = gcnew ListItemPair(newAction, dwNewActionID);
						actionsCheckedListBox->Items->Add(newItem, CheckState::Unchecked);

						  // Restore the wait cursor because we have finished adding an action to DB
						wait.Restore();

						// Log application trace [LRCAU #5052 - JDS - 12/18/2008]
						uex.log();
					} // Out if block
				}
			}
			CATCH_AND_DISPLAY_ALL_EXCEPTIONS("ELI41923");
		}

		Void WorkflowManagement::HandleDeleteActionButton_Click(System::Object^  sender, System::EventArgs^  e)
		{
			try
			{
				// Check if there is no action selected
				if (actionsCheckedListBox->SelectedIndex <= 0)
				{
					return;
				}

				// Get the selected action to remove
				// Display the wait cursor while action is deleted
				CWaitCursor cursor;

				// Get index of first selection
				int iIndex = actionsCheckedListBox->SelectedIndex;
				
				// Get the action name to remove
				ListItemPair ^ ActionItemToDelete = safe_cast<ListItemPair ^>(actionsCheckedListBox->SelectedItem);

				// Prompt to verify
				if (MessageBox::Show(ActiveForm, "Remove the action: " + ActionItemToDelete->Name + "?", "Confirmation",
					MessageBoxButtons::YesNoCancel, MessageBoxIcon::Question) != System::Windows::Forms::DialogResult::Yes)
				{
					return;
				}

				if (MessageBox::Show(ActiveForm, "Do you really want to remove the action: " + ActionItemToDelete->Name + "?",
					"Final Confirmation", MessageBoxButtons::YesNoCancel, MessageBoxIcon::Question) != System::Windows::Forms::DialogResult::Yes)
				{
					return;
				}

				string strActionDeleted = "";

				// Catch any exceptions for each action being deleted.
				try
				{
					// This cleans up memory allocated when marshaling types
					marshal_context marshalContext;

					BSTR bstrActionName;
					bstrActionName = marshalContext.marshal_as<BSTR>(ActionItemToDelete->Name);

					// Delete the action
					_ipfamDatabase->DeleteAction(bstrActionName);

					actionsCheckedListBox->Items->Remove(ActionItemToDelete);

					strActionDeleted = marshal_as<std::string>(ActionItemToDelete->Name);
				}
				CATCH_AND_DISPLAY_ALL_EXCEPTIONS("ELI41925");

				// Add application trace whenever a database modification is made
				// [LRCAU #5052 - JDS - 12/18/2008]
				UCLIDException uex("ELI41926", "Application trace: Database change");
				uex.addDebugInfo("Change", "Remove action(s)");
				uex.addDebugInfo("User Name", getCurrentUserName());
				uex.addDebugInfo("Server Name", asString(_ipfamDatabase->DatabaseServer));
				uex.addDebugInfo("Database", asString(_ipfamDatabase->DatabaseName));
				uex.addDebugInfo("Action removed", strActionDeleted);
				uex.log();
			}
			CATCH_AND_DISPLAY_ALL_EXCEPTIONS("ELI41927");
		}

		Void WorkflowManagement::HandleRenameActionButton_Click(System::Object^  sender, System::EventArgs^  e)
		{
			try
			{
				// Check if there is no action selected
				if (actionsCheckedListBox->SelectedIndex <= 0)
				{
					return;
				}

				// Get index of first selection
				ListItemPair ^ actionItemToRename = safe_cast<ListItemPair ^>(actionsCheckedListBox->SelectedItem);

				// Display the wait cursor while action is deleted
				CWaitCursor cursor;

				string strOldName = marshal_as<std::string>(actionItemToRename->Name);
				DWORD dwID = actionItemToRename->ID;

				// Create an add action dialog
				RenameActionDlg dlgRenameAction(_ipfamDatabase);

				// Set the old action name in the rename dialog
				dlgRenameAction.SetOldActionName(strOldName);

				if (dlgRenameAction.DoModal() == IDOK)
				{
					// Add application trace whenever a database modification is made
					// [LRCAU #5052 - JDS - 12/18/2008]
					UCLIDException uex("ELI41928", "Application trace: Database change");
					uex.addDebugInfo("Change", "Rename action");
					uex.addDebugInfo("User Name", getCurrentUserName());
					uex.addDebugInfo("Server Name", asString(_ipfamDatabase->DatabaseServer));
					uex.addDebugInfo("Database", asString(_ipfamDatabase->DatabaseName));

					// Display wait cursor
					CWaitCursor wait;

					// Init the action ID, old name and new name
					string strNewName = "";

					// Get the new name
					dlgRenameAction.GetNewActionName(strNewName);

					if (strOldName != strNewName)
					{
						// Call RenameAction to rename the action
						_ipfamDatabase->RenameAction(strOldName.c_str(), _bstr_t(strNewName.c_str()));
						uex.addDebugInfo("Old Action Name", strOldName);
						uex.addDebugInfo("New Action Name", strNewName);

						// Log application trace [LRCAU #5052 - JDS - 12/18/2008]
						uex.log();

						// Display the message that the action is renamed
						String^ strPrompt = "The action '" + actionItemToRename->Name + "' has been renamed to '"
							+ marshal_as<String^>(strNewName) + "'.";
						MessageBox::Show(ActiveForm, strPrompt, "Success", MessageBoxButtons::OK, MessageBoxIcon::Information);

						actionItemToRename->Name = marshal_as<String^>(strNewName);
						
						actionsCheckedListBox->Refresh();
					}
				}
			}
			CATCH_AND_DISPLAY_ALL_EXCEPTIONS("ELI41929");
		}

		Void WorkflowManagement::HandleWorkflowManagement_Load(System::Object^  sender, System::EventArgs^  e)
		{
			try
			{
				loadActionsList();
				loadWorkflowCombo();
			}
			CATCH_AND_DISPLAY_ALL_EXCEPTIONS("ELI41934")

		}

		Void WorkflowManagement::HandleModifyWorkflowButton_Click(System::Object^  sender, System::EventArgs^  e)
		{
			try
			{
				if (workflowComboBox->SelectedIndex < 0)
				{
					return;
				}

				ListItemPair ^selected;
					
				selected = safe_cast<ListItemPair^>(workflowComboBox->SelectedItem);
				
				promptAndSaveActionsForWorkFlow(selected);

				Int32 currentWorkflowID = selected->ID;

				AddModifyWorkflowForm ^workflowForm;
				try
				{
					workflowForm = gcnew AddModifyWorkflowForm(_ipfamDatabase, currentWorkflowID);
					if (workflowForm->ShowDialog() == System::Windows::Forms::DialogResult::OK)
					{
						_currentWorkflow = marshal_as<String^>(workflowForm->ipWorkflowDefinition->Name);
						if (currentWorkflowID == workflowForm->ipWorkflowDefinition->ID)
						{
							_currentWorkflow = marshal_as<String^>(workflowForm->ipWorkflowDefinition->Name);
							selected->Name = _currentWorkflow;

							workflowComboBox->Items[workflowComboBox->SelectedIndex] = selected;
							workflowComboBox->Refresh();
						}
						updateButtons();
					}
				}
				finally
				{
					delete workflowForm;
				}
			}
			CATCH_AND_DISPLAY_ALL_EXCEPTIONS("ELI41940")
		}
		
		Void WorkflowManagement::HandleAddWorkflowButton_Click(System::Object^  sender, System::EventArgs^  e)
		{
			try
			{
				Int32 currentWorkflowID = -1;

				ListItemPair ^selected;
				if (workflowComboBox->SelectedIndex >= 0)
				{
					selected = safe_cast<ListItemPair^>(workflowComboBox->SelectedItem);
					
					promptAndSaveActionsForWorkFlow(selected);
				}

				AddModifyWorkflowForm ^workflowForm;
				try
				{
					workflowForm = gcnew AddModifyWorkflowForm(_ipfamDatabase, currentWorkflowID);
					if (workflowForm->ShowDialog() == System::Windows::Forms::DialogResult::OK)
					{
						workflowActionsDirty = false;
						_currentWorkflow = marshal_as<String^>(workflowForm->ipWorkflowDefinition->Name);

						loadWorkflowCombo();


						updateButtons();
					}
				}
				finally
				{
					delete workflowForm;
				}
			}
			CATCH_AND_DISPLAY_ALL_EXCEPTIONS("ELI42060")
		}	
		Void WorkflowManagement::HandleDeleteWorkflowButton_Click(System::Object ^ sender, System::EventArgs ^ e)
		{
			try
			{
				if (workflowComboBox->SelectedIndex >= 0)
				{
					ListItemPair ^selectedItem = safe_cast<ListItemPair^>(workflowComboBox->SelectedItem);
					if (MessageBox::Show("Delete the " + selectedItem->Name + " workflow?", "Delete workflow",
						MessageBoxButtons::YesNo, MessageBoxIcon::Question) == System::Windows::Forms::DialogResult::Yes)
					{
						_ipfamDatabase->DeleteWorkflow(selectedItem->ID);
						workflowActionsDirty = false;
						_currentWorkflow = "";
						loadWorkflowCombo();
						setActionChecksForCurrentWorkflow();
					}
				}
			}
			CATCH_AND_DISPLAY_ALL_EXCEPTIONS("ELI42037");
		}
		
		Void WorkflowManagement::HandleWorkflowSelectionChangeCommitted(System::Object ^ sender, System::EventArgs ^ e)
		{
			try
			{
				int indexOfLastWorkflow = workflowComboBox->FindStringExact(_currentWorkflow);

				if (indexOfLastWorkflow >= 0 && workflowActionsDirty)
				{
					ListItemPair ^previousWorkflow = safe_cast<ListItemPair^>(workflowComboBox->Items[indexOfLastWorkflow]);

					promptAndSaveActionsForWorkFlow(previousWorkflow);
				}

				if (workflowComboBox->SelectedIndex != -1)
				{
					ListItemPair ^ currentItem = safe_cast<ListItemPair ^>(workflowComboBox->SelectedItem);
					_currentWorkflow = currentItem->Name;
				}
				else
				{
					_currentWorkflow = "";
				}

				setActionChecksForCurrentWorkflow();
				updateButtons();
			}
			CATCH_AND_DISPLAY_ALL_EXCEPTIONS("ELI42007");
		}

		Void WorkflowManagement::HandleActionsCheckedListBox_ItemCheck(System::Object ^ sender, ItemCheckEventArgs ^ e)
		{
			try
			{
				// keep the check box from being checked
				if (workflowComboBox->SelectedIndex < 0)
				{
					e->NewValue = CheckState::Unchecked;
				}
			}
			CATCH_AND_DISPLAY_ALL_EXCEPTIONS("ELI42043");
		}
		
		Void WorkflowManagement::HandleActionsCheckedListBox_MouseClick(System::Object^  sender, MouseEventArgs^ e)
		{
			try
			{
				if (workflowComboBox->SelectedIndex < 0)
				{
					return;
				}
				int mouseClickItem = actionsCheckedListBox->IndexFromPoint(e->X, e->Y);
				actionsCheckedListBox->SelectedIndex = mouseClickItem;
				if ((e->Button == System::Windows::Forms::MouseButtons::Left) && mouseClickItem >= 0)
				{
					if (e->X > 13)
					{
						actionsCheckedListBox->SetItemChecked(actionsCheckedListBox->SelectedIndex,
							!actionsCheckedListBox->GetItemChecked(actionsCheckedListBox->SelectedIndex));

					}
					else
					{
							workflowActionsDirty = true;
							saveChangesButton->Enabled = true;

					}
				}
			}
			CATCH_AND_DISPLAY_ALL_EXCEPTIONS("ELI42064");
		}

		Void WorkflowManagement::HandleSaveChangesButton_Click(System::Object ^ sender, System::EventArgs ^ e)
		{
			try
			{
				if (workflowComboBox->SelectedIndex >= 0 && workflowActionsDirty)
				{
					ListItemPair ^selectedWorkflow = safe_cast<ListItemPair^>(workflowComboBox->SelectedItem);

					saveActionsForWorkflow(selectedWorkflow);
					workflowActionsDirty = false;
					updateButtons();
				}
			}
			CATCH_AND_DISPLAY_ALL_EXCEPTIONS("ELI42044");
		}
		
		Void Extract::FAMDBAdmin::WorkflowManagement::HandleWorkflowManagement_FormClosing(System::Object ^ sender, System::Windows::Forms::FormClosingEventArgs ^ e)
		{
			try
			{
				if (workflowComboBox->SelectedIndex >= 0 && workflowActionsDirty)
				{
					ListItemPair ^selectedWorkflow = safe_cast<ListItemPair^>(workflowComboBox->SelectedItem);

					promptAndSaveActionsForWorkFlow(selectedWorkflow);
				}
			}
			CATCH_AND_DISPLAY_ALL_EXCEPTIONS("ELI42059");
		}

#pragma endregion

#pragma region Helper methods

		Void WorkflowManagement::loadActionsList()
		{
			// Clear the list so it can be reloaded
			actionsCheckedListBox->Items->Clear();
			actionsCheckedListBox->DisplayMember = "Name";
			actionsCheckedListBox->ValueMember = "ID";

			// Get the actions from the database
			IStrToStrMapPtr actions = _ipfamDatabase->GetAllActions();
			ListCtrlHelper::LoadListCtrl(actionsCheckedListBox, actions);

			// if there is no selected workflow there is nothing else to do
			if (workflowComboBox->SelectedIndex < 0)
			{
				// reset the workflow actions dirty flag
				workflowActionsDirty = false;
				updateButtons();

				// no items need to be checked because no workflow
				return;
			}
		}

		Void WorkflowManagement::setActionChecksForCurrentWorkflow()
		{

			// Clear all the checks
			for (int i = 0;  i < actionsCheckedListBox->Items->Count; i++)
			{
				actionsCheckedListBox->SetItemCheckState(i, CheckState::Unchecked);
			}

			// if no workflow is selected nothing else to do
			if (workflowComboBox->SelectedIndex < 0)
			{
				return;
			}

			// Set the checks
			// Get the currently selected workflow
			ListItemPair ^selectedWorkflow = safe_cast<ListItemPair^>(workflowComboBox->SelectedItem);

			// Get the actions for the workflow
			IStrToStrMapPtr workflowActions = _ipfamDatabase->GetWorkflowActions(selectedWorkflow->ID);

			// Get the KeyValue pairs
			IIUnknownVectorPtr itemPairs = workflowActions->GetAllKeyValuePairs();

			int numItems = itemPairs->Size();
			for (int i = 0; i < numItems; i++)
			{
				IStringPairPtr currentActionPair = safe_cast<IStringPairPtr>(itemPairs->At(i));
				ListItemPair ^newItem = gcnew ListItemPair(currentActionPair);

				Int32 index = actionsCheckedListBox->FindStringExact(newItem->Name);
				if (index != ListBox::NoMatches)
				{
					actionsCheckedListBox->SetItemChecked(index, true);
				}
			}
			workflowActionsDirty = false;
		}

		Void WorkflowManagement::updateButtons()
		{
			modifyWorkflowButton->Enabled = workflowComboBox->SelectedIndex >= 0;
			deleteWorkflowButton->Enabled = workflowComboBox->SelectedIndex >= 0;
			saveChangesButton->Enabled = workflowActionsDirty;
		}

		Void WorkflowManagement::loadWorkflowCombo()
		{
			workflowComboBox->Items->Clear();

			workflowComboBox->DisplayMember = "Name";
			workflowComboBox->ValueMember = "ID";

			IStrToStrMapPtr workflows = _ipfamDatabase->GetWorkflows();
			ASSERT_RESOURCE_ALLOCATION("ELI41935", workflows != __nullptr);

			ListCtrlHelper::LoadListCtrl(workflowComboBox, workflows);

			int currIndex = workflowComboBox->FindStringExact(_currentWorkflow);
			workflowComboBox->SelectedIndex = currIndex;
			
			setActionChecksForCurrentWorkflow();
			
			updateButtons();
		}

		Void WorkflowManagement::promptAndSaveActionsForWorkFlow(ListItemPair ^workFlowToUpdate)
		{
			if (!workflowActionsDirty)
			{
				return;
			}
			if (MessageBox::Show("The actions for " + workFlowToUpdate->Name + " workflow have changed. Save changes?",
				"Save changes", MessageBoxButtons::YesNo, MessageBoxIcon::Question) == System::Windows::Forms::DialogResult::Yes)
			{
				saveActionsForWorkflow(workFlowToUpdate);
				workflowActionsDirty = false;
				updateButtons();
			}
		}

		Void WorkflowManagement::checkAction(System::String ^ action)
		{
			CheckedListBox::CheckedIndexCollection ^ checked = actionsCheckedListBox->CheckedIndices;
			if (!String::IsNullOrEmpty(action))
			{
				int index = actionsCheckedListBox->FindStringExact(action);
				if (!checked->Contains(index))
				{
					actionsCheckedListBox->SetItemChecked(index, true);
					workflowActionsDirty = true;
				}
			}
		}
		
		Void WorkflowManagement::saveActionsForWorkflow(ListItemPair ^workFlowToUpdate)
		{
			marshal_context marshalContext;
			IVariantVectorPtr newWorkflowActions(CLSID_VariantVector);
			ASSERT_RESOURCE_ALLOCATION("ELI42022", newWorkflowActions != __nullptr);

			IEnumerator^ checkedEnum = actionsCheckedListBox->CheckedItems->GetEnumerator();
			while (checkedEnum->MoveNext())
			{
				ListItemPair ^current = safe_cast<ListItemPair^>(checkedEnum->Current);
				newWorkflowActions->PushBack(marshalContext.marshal_as<BSTR>(current->Name));
			}
			_ipfamDatabase->SetWorkflowActions(workFlowToUpdate->ID, newWorkflowActions);
		}
#pragma endregion

	}
}

