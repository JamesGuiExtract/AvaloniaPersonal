#include "StdAfx.h"

#ifndef HANDLE_CLI_EXCEPTIONS
#define HANDLE_CLI_EXCEPTIONS
#endif

#include "WorkflowManagement.h"
#include "ListCtrlHelper.h"
#include "AddModifyWorkflowForm.h"
#include "AddActionForm.h"
#include "RenameActionDlg.h"

#include <COMUtils.h>
#include <string>

// Disable all the warnings that generated by including the msclr header files
#pragma warning(disable : 4945)

// includes to allow simple syntax for marshaling between c++ types and .net types
#include <msclr\marshal_cppstd.h>
#include <msclr\marshal_windows.h>

using namespace Extract::Utilities;
using namespace msclr::interop;
using namespace System::Collections::Specialized;

namespace Extract
{
	namespace FAMDBAdmin
	{
#pragma region Event Handlers

		Void  WorkflowManagement::HandleAddActionButton_Click(System::Object^  sender, System::EventArgs^  e)
		{
			try
			{
				// Create an add action dialog
				AddActionForm ^addAction = gcnew AddActionForm();

				if (addAction->ShowDialog(this) == System::Windows::Forms::DialogResult::OK)
				{
					// Add application trace whenever a database modification is made
					// [LRCAU #5052 - JDS - 12/18/2008]
					UCLIDException uex("ELI42045", "Application trace: Database change");
					uex.addDebugInfo("Change", "Add new action");
					uex.addDebugInfo("User Name", getCurrentUserName());
					uex.addDebugInfo("Server Name", asString(_ipfamDatabase->DatabaseServer));
					uex.addDebugInfo("Database", asString(_ipfamDatabase->DatabaseName));

					String ^ newAction = addAction->ActionNameToAdd;

					if (!String::IsNullOrWhiteSpace(newAction))
					{
						// Add the new action to the database
						DWORD dwNewActionID;

						// Display a wait-cursor because we are adding an action to DB
						CWaitCursor wait;

						string strNewAction = marshal_as<string>(newAction);

						// Create the new action
						dwNewActionID = _ipfamDatabase->DefineNewAction(_bstr_t(strNewAction.c_str()));
						uex.addDebugInfo("New Action Name", strNewAction);
						uex.addDebugInfo("New Action ID", dwNewActionID);

						int index = actionsGridView->Rows->Add();
						auto newRow = actionsGridView->Rows[index];
						newRow->Cells[ActionIncludedColumnIndex]->Value = true;
						newRow->Cells[ActionIDColumnIndex]->Value = dwNewActionID;
						newRow->Cells[ActionNameColumnIndex]->Value = newAction;
						newRow->Cells[ActionMainSequenceColumnIndex]->Value = true;
						newRow->Selected = true;

						// If there is a currently selected workflow, the action will default to be
						// included and thus should flag the workflow actions as dirty.
						int workflowID = getSelectedWorkflowId();
						if (workflowID != -1)
						{
							workflowActionsDirty = true;
							updateButtons();
						}

						// Restore the wait cursor because we have finished adding an action to DB
						wait.Restore();

						// Log application trace [LRCAU #5052 - JDS - 12/18/2008]
						uex.log();
					} // Out if block
				}
			}
			CATCH_AND_DISPLAY_ALL_EXCEPTIONS("ELI41923");
		}

		Void WorkflowManagement::HandleDeleteActionButton_Click(System::Object^  sender, System::EventArgs^  e)
		{
			try
			{
				// Check if there is no action selected
				if (actionsGridView->SelectedRows->Count != 1)
				{
					return;
				}

				// Get the selected action to remove
				// Display the wait cursor while action is deleted
				CWaitCursor cursor;

				DataGridViewRow ^selectedRow = actionsGridView->SelectedRows[0];
				
				// Get the action name to remove
				String^ strActionName = (String^)selectedRow->Cells[ActionNameColumnIndex]->Value;

				// Prompt to verify
				if (MessageBox::Show(ActiveForm, "Remove the action: " + strActionName + "?", "Confirmation",
					MessageBoxButtons::YesNoCancel, MessageBoxIcon::Question) != System::Windows::Forms::DialogResult::Yes)
				{
					return;
				}

				if (MessageBox::Show(ActiveForm, "Do you really want to remove the action: " + strActionName + "?",
					"Final Confirmation", MessageBoxButtons::YesNoCancel, MessageBoxIcon::Question) != System::Windows::Forms::DialogResult::Yes)
				{
					return;
				}

				string strActionDeleted = "";

				// Catch any exceptions for each action being deleted.
				try
				{
					// This cleans up memory allocated when marshaling types
					marshal_context marshalContext;

					BSTR bstrActionName;
					bstrActionName = marshalContext.marshal_as<BSTR>(strActionName);

					// Delete the action
					_ipfamDatabase->DeleteAction(bstrActionName);

					actionsGridView->Rows->Remove(selectedRow);

					strActionDeleted = marshal_as<std::string>(strActionName);
				}
				CATCH_AND_DISPLAY_ALL_EXCEPTIONS("ELI41925");

				// Add application trace whenever a database modification is made
				// [LRCAU #5052 - JDS - 12/18/2008]
				UCLIDException uex("ELI41926", "Application trace: Database change");
				uex.addDebugInfo("Change", "Remove action(s)");
				uex.addDebugInfo("User Name", getCurrentUserName());
				uex.addDebugInfo("Server Name", asString(_ipfamDatabase->DatabaseServer));
				uex.addDebugInfo("Database", asString(_ipfamDatabase->DatabaseName));
				uex.addDebugInfo("Action removed", strActionDeleted);
				uex.log();
			}
			CATCH_AND_DISPLAY_ALL_EXCEPTIONS("ELI41927");
		}

		Void WorkflowManagement::HandleRenameActionButton_Click(System::Object^  sender, System::EventArgs^  e)
		{
			try
			{
				// Check if there is no action selected
				if (actionsGridView->SelectedRows->Count != 1)
				{
					return;
				}

				// Display the wait cursor while action is deleted
				CWaitCursor cursor;

				DataGridViewRow ^selectedRow = actionsGridView->SelectedRows[0];

				// Get ID and action name 
				DWORD dwID = (DWORD)selectedRow->Cells[ActionIDColumnIndex]->Value;
				String^ oldName = (String^)selectedRow->Cells[ActionNameColumnIndex]->Value;
				string strOldName = marshal_as<string>(oldName);

				// Create an add action dialog
				RenameActionDlg dlgRenameAction(_ipfamDatabase);

				// Set the old action name in the rename dialog
				dlgRenameAction.SetOldActionName(strOldName);

				if (dlgRenameAction.DoModal() == IDOK)
				{
					// Add application trace whenever a database modification is made
					// [LRCAU #5052 - JDS - 12/18/2008]
					UCLIDException uex("ELI41928", "Application trace: Database change");
					uex.addDebugInfo("Change", "Rename action");
					uex.addDebugInfo("User Name", getCurrentUserName());
					uex.addDebugInfo("Server Name", asString(_ipfamDatabase->DatabaseServer));
					uex.addDebugInfo("Database", asString(_ipfamDatabase->DatabaseName));

					// Display wait cursor
					CWaitCursor wait;

					// Init the action ID, old name and new name
					string strNewName = "";

					// Get the new name
					dlgRenameAction.GetNewActionName(strNewName);

					if (strOldName != strNewName)
					{
						// Call RenameAction to rename the action
						_ipfamDatabase->RenameAction(strOldName.c_str(), _bstr_t(strNewName.c_str()));
						uex.addDebugInfo("Old Action Name", strOldName);
						uex.addDebugInfo("New Action Name", strNewName);

						// Log application trace [LRCAU #5052 - JDS - 12/18/2008]
						uex.log();

						// Display the message that the action is renamed
						String^ strPrompt = "The action '" + oldName + "' has been renamed to '"
							+ marshal_as<String^>(strNewName) + "'.";
						MessageBox::Show(ActiveForm, strPrompt, "Success", MessageBoxButtons::OK, MessageBoxIcon::Information);

						selectedRow->Cells[ActionNameColumnIndex]->Value = marshal_as<String^>(strNewName);
					}
				}
			}
			CATCH_AND_DISPLAY_ALL_EXCEPTIONS("ELI41929");
		}

		Void WorkflowManagement::HandleWorkflowManagement_Load(System::Object^  sender, System::EventArgs^  e)
		{
			try
			{
				loadActionsList();
				loadWorkflowCombo();
				_loadBalanceCheckBox->Checked =
					marshal_as<String^>(_ipfamDatabase->GetDBInfoSetting("EnableLoadBalancing", true)) == "1";
			}
			CATCH_AND_DISPLAY_ALL_EXCEPTIONS("ELI41934")

		}

		Void WorkflowManagement::HandleModifyWorkflowButton_Click(System::Object^  sender, System::EventArgs^  e)
		{
			try
			{
				if (workflowComboBox->SelectedIndex <= 0)
				{
					return;
				}

				ListItemPair ^selected;
					
				selected = safe_cast<ListItemPair^>(workflowComboBox->SelectedItem);
				
				promptAndSaveActionsForWorkFlow(selected);

				Int32 currentWorkflowID = selected->ID;

				AddModifyWorkflowForm ^workflowForm;
				try
				{
					workflowForm = gcnew AddModifyWorkflowForm(_ipfamDatabase, currentWorkflowID);
					if (workflowForm->ShowDialog() == System::Windows::Forms::DialogResult::OK)
					{
						_currentWorkflow = marshal_as<String^>(workflowForm->ipWorkflowDefinition->Name);
						if (currentWorkflowID == workflowForm->ipWorkflowDefinition->ID)
						{
							_currentWorkflow = marshal_as<String^>(workflowForm->ipWorkflowDefinition->Name);
							selected->Name = _currentWorkflow;

							workflowComboBox->Items[workflowComboBox->SelectedIndex] = selected;
							workflowComboBox->Refresh();
						}

						updateButtons();
					}
				}
				finally
				{
					delete workflowForm;
				}
			}
			CATCH_AND_DISPLAY_ALL_EXCEPTIONS("ELI41940")
		}
		
		Void WorkflowManagement::HandleAddWorkflowButton_Click(System::Object^  sender, System::EventArgs^  e)
		{
			try
			{
				Int32 currentWorkflowID = -1;

				ListItemPair ^selected;
				if (workflowComboBox->SelectedIndex > 0)
				{
					selected = safe_cast<ListItemPair^>(workflowComboBox->SelectedItem);
					
					promptAndSaveActionsForWorkFlow(selected);
				}

				AddModifyWorkflowForm ^workflowForm;
				try
				{
					workflowForm = gcnew AddModifyWorkflowForm(_ipfamDatabase, currentWorkflowID);
					if (workflowForm->ShowDialog() == System::Windows::Forms::DialogResult::OK)
					{
						workflowActionsDirty = false;
						_currentWorkflow = marshal_as<String^>(workflowForm->ipWorkflowDefinition->Name);

						loadWorkflowCombo();

						updateButtons();
					}
				}
				finally
				{
					delete workflowForm;
				}
			}
			CATCH_AND_DISPLAY_ALL_EXCEPTIONS("ELI42060")
		}	
		Void WorkflowManagement::HandleDeleteWorkflowButton_Click(System::Object ^ sender, System::EventArgs ^ e)
		{
			try
			{
				if (workflowComboBox->SelectedIndex > 0)
				{
					ListItemPair ^selectedItem = safe_cast<ListItemPair^>(workflowComboBox->SelectedItem);
					if (MessageBox::Show("Delete the " + selectedItem->Name + " workflow?", "Delete workflow",
						MessageBoxButtons::YesNo, MessageBoxIcon::Question) == System::Windows::Forms::DialogResult::Yes)
					{
						_ipfamDatabase->DeleteWorkflow(selectedItem->ID);
						workflowActionsDirty = false;
						_currentWorkflow = "";
						loadWorkflowCombo();
					}
				}
			}
			CATCH_AND_DISPLAY_ALL_EXCEPTIONS("ELI42037");
		}
		
		Void WorkflowManagement::HandleWorkflowSelectionChangeCommitted(System::Object ^ sender, System::EventArgs ^ e)
		{
			try
			{
				int indexOfLastWorkflow = workflowComboBox->FindStringExact(_currentWorkflow);

				if (indexOfLastWorkflow > 0 && workflowActionsDirty) 
				{
					ListItemPair ^previousWorkflow = safe_cast<ListItemPair^>(workflowComboBox->Items[indexOfLastWorkflow]);

					promptAndSaveActionsForWorkFlow(previousWorkflow);
				}

				bool workflowSelected = workflowComboBox->SelectedIndex > 0;

				if (workflowSelected)
				{
					ListItemPair ^ currentItem = safe_cast<ListItemPair ^>(workflowComboBox->SelectedItem);
					_currentWorkflow = currentItem->Name;
				}
				else
				{
					_currentWorkflow = "";
				}

				ActionIncludedColumn->Visible = workflowSelected;
				ActionMainSequenceColumn->Visible = workflowSelected;

				// When changing workflows, clear _initializedActions so that any action included
				// from this point will be defaulted as a main sequence action.
				_initializedActions.Clear();

				setActionChecksForCurrentWorkflow();

				workflowActionsDirty = false;
				updateButtons();
			}
			CATCH_AND_DISPLAY_ALL_EXCEPTIONS("ELI42007");
		}

		Void WorkflowManagement::HandleActionsCheckedListBox_ItemCheck(System::Object ^ sender, ItemCheckEventArgs ^ e)
		{
			try
			{
				// keep the check box from being checked
				if (workflowComboBox->SelectedIndex < 0)
				{
					e->NewValue = CheckState::Unchecked;
				}
			}
			CATCH_AND_DISPLAY_ALL_EXCEPTIONS("ELI42043");
		}

		void WorkflowManagement::HandleCellContentClick(System::Object ^sender, System::Windows::Forms::DataGridViewCellEventArgs ^e)
		{
			try
			{
				if (e->RowIndex < 0)
				{
					return;
				}

				if (e->ColumnIndex == ActionIncludedColumnIndex)
				{
					toggleActionIncluded(actionsGridView->Rows[e->RowIndex]);
				}
				else if (e->ColumnIndex == ActionMainSequenceColumnIndex)
				{
					toggleMainSequenceAction(actionsGridView->Rows[e->RowIndex]);
				}
			}
			CATCH_AND_DISPLAY_ALL_EXCEPTIONS("ELI43346");
		}

		void WorkflowManagement::HandleLoadBalanceCheckBox_CheckedChanged(System::Object^  sender, System::EventArgs^  e)
		{
			try
			{
				_ipfamDatabase->SetDBInfoSetting("EnableLoadBalancing",
					_loadBalanceCheckBox->Checked ? "1" : "0", VARIANT_TRUE, VARIANT_TRUE);
			}
			CATCH_AND_DISPLAY_ALL_EXCEPTIONS("ELI43426");
		}

		Void WorkflowManagement::HandleSaveChangesButton_Click(System::Object ^ sender, System::EventArgs ^ e)
		{
			try
			{
				if (workflowComboBox->SelectedIndex > 0 && workflowActionsDirty)
				{
					ListItemPair ^selectedWorkflow = safe_cast<ListItemPair^>(workflowComboBox->SelectedItem);

					saveActionsForWorkflow(selectedWorkflow);
					workflowActionsDirty = false;
					updateButtons();
				}
			}
			CATCH_AND_DISPLAY_ALL_EXCEPTIONS("ELI42044");
		}
		
		Void Extract::FAMDBAdmin::WorkflowManagement::HandleWorkflowManagement_FormClosing(System::Object ^ sender, System::Windows::Forms::FormClosingEventArgs ^ e)
		{
			try
			{
				if (workflowComboBox->SelectedIndex > 0 && workflowActionsDirty)
				{
					ListItemPair ^selectedWorkflow = safe_cast<ListItemPair^>(workflowComboBox->SelectedItem);

					promptAndSaveActionsForWorkFlow(selectedWorkflow);
				}
			}
			CATCH_AND_DISPLAY_ALL_EXCEPTIONS("ELI42059");
		}

#pragma endregion

#pragma region Helper methods

		Void WorkflowManagement::loadActionsList()
		{
			// Clear the list so it can be reloaded
			actionsGridView->Rows->Clear();

			// Get the actions from the database
			IStrToStrMapPtr actions = _ipfamDatabase->GetAllActions();
			IIUnknownVectorPtr itemPairs = actions->GetAllKeyValuePairs();
			int numItems = itemPairs->Size();
			for (int i = 0; i < numItems; i++)
			{
				IStringPairPtr currentActionPair = (IStringPairPtr)itemPairs->At(i);

				int index = actionsGridView->Rows->Add();
				auto newRow = actionsGridView->Rows[index];
				newRow->Cells[ActionIDColumnIndex]->Value =
					UInt32::Parse(marshal_as<String^>(currentActionPair->StringValue));
				newRow->Cells[ActionNameColumnIndex]->Value =
					marshal_as<String^>(currentActionPair->StringKey);
			}

			// if there is no selected workflow there is nothing else to do
			if (workflowComboBox->SelectedIndex <= 0)
			{
				// reset the workflow actions dirty flag
				workflowActionsDirty = false;
				updateButtons();

				// no items need to be checked because no workflow
				return;
			}
		}

		Void WorkflowManagement::toggleActionIncluded(DataGridViewRow ^row)
		{
			bool currentlyIncluded = (bool)row->Cells[ActionIncludedColumnIndex]->Value;

			auto checkBoxCell = (DataGridViewCheckBoxCell^)row->Cells[ActionMainSequenceColumnIndex];

			currentlyIncluded = !currentlyIncluded;
			row->Cells[ActionIncludedColumnIndex]->Value = currentlyIncluded;

			if (currentlyIncluded)
			{
				// Ensure the main sequence checkbox is visible for actions are included.
				checkBoxCell->FlatStyle = FlatStyle::Standard;
				checkBoxCell->Style->BackColor = actionsGridView->DefaultCellStyle->BackColor;
				checkBoxCell->Style->ForeColor = actionsGridView->DefaultCellStyle->ForeColor;
				checkBoxCell->Style->SelectionBackColor = actionsGridView->DefaultCellStyle->SelectionBackColor;
				checkBoxCell->Style->SelectionForeColor = actionsGridView->DefaultCellStyle->SelectionForeColor;
				checkBoxCell->ReadOnly = false;

				String^ actionName = (String^)row->Cells[ActionNameColumnIndex]->Value;
				if (!_initializedActions.Contains(actionName))
				{
					_initializedActions.Add(actionName);
					toggleMainSequenceAction(row);
				}
			}
			else
			{
				// Make the main sequence checkbox appear for actions not included.
				checkBoxCell->FlatStyle = FlatStyle::Flat;
				checkBoxCell->Style->BackColor = actionsGridView->BackgroundColor;
				checkBoxCell->Style->ForeColor = actionsGridView->BackgroundColor;
				checkBoxCell->Style->SelectionBackColor = actionsGridView->BackgroundColor;
				checkBoxCell->Style->SelectionForeColor = actionsGridView->BackgroundColor;
				checkBoxCell->ReadOnly = true;
			}

			workflowActionsDirty = true;
			updateButtons();
		}

		Void WorkflowManagement::toggleMainSequenceAction(DataGridViewRow ^row)
		{
			bool currentlyIncluded = (bool)row->Cells[ActionIncludedColumnIndex]->Value;
			if (currentlyIncluded)
			{
				bool currentlyMainSequence = (bool)row->Cells[ActionMainSequenceColumnIndex]->Value;

				auto cell = row->Cells[ActionMainSequenceColumnIndex];
				cell->Value = !currentlyMainSequence;

				workflowActionsDirty = true;
				updateButtons();
			}
		}

		Void WorkflowManagement::setActionChecksForCurrentWorkflow()
		{
			// Clear all the checks
			for each (DataGridViewRow ^row in actionsGridView->Rows)
			{
				row->Cells[ActionIncludedColumnIndex]->Value = false;
				row->Cells[ActionMainSequenceColumnIndex]->Value = false;
			}

			int workflowID = getSelectedWorkflowId();
			if (workflowID == -1)
			{
				return;
			}

			// Get the actions for the workflow
			IIUnknownVectorPtr workflowActions = _ipfamDatabase->GetWorkflowActions(workflowID);

			Dictionary<String^, bool> includedActions;
			int numItems = workflowActions->Size();
			for (int i = 0; i < numItems; i++)
			{
				IVariantVectorPtr actionProperties = safe_cast<IVariantVectorPtr>(workflowActions->At(i));
				String^ name = marshal_as<String^>(actionProperties->Item[1].bstrVal);
				bool mainSequence = asCppBool(actionProperties->Item[2].boolVal);
				includedActions[name] = mainSequence;
			}

			for each (DataGridViewRow ^row in actionsGridView->Rows)
			{
				String^ actionName = (String^)row->Cells[ActionNameColumnIndex]->Value;
				auto checkBoxCell = (DataGridViewCheckBoxCell^)row->Cells[ActionMainSequenceColumnIndex];
				bool mainSequence = false;

				if (includedActions.TryGetValue(actionName, mainSequence))
				{
					// Ensure the main sequence checkbox is visible for actions are included.
					checkBoxCell->FlatStyle = FlatStyle::Standard;
					checkBoxCell->Style->BackColor = actionsGridView->DefaultCellStyle->BackColor;
					checkBoxCell->Style->ForeColor = actionsGridView->DefaultCellStyle->ForeColor;
					checkBoxCell->Style->SelectionBackColor = actionsGridView->DefaultCellStyle->SelectionBackColor;
					checkBoxCell->Style->SelectionForeColor = actionsGridView->DefaultCellStyle->SelectionForeColor;
					checkBoxCell->ReadOnly = false;

					row->Cells[ActionIncludedColumnIndex]->Value = true;
					row->Cells[ActionMainSequenceColumnIndex]->Value = mainSequence;
					_initializedActions.Add(actionName);
				}
				else
				{
					// Make the main sequence checkbox appear for actions not included.
					checkBoxCell->FlatStyle = FlatStyle::Flat;
					checkBoxCell->Style->BackColor = actionsGridView->BackgroundColor;
					checkBoxCell->Style->ForeColor = actionsGridView->BackgroundColor;
					checkBoxCell->Style->SelectionBackColor = actionsGridView->BackgroundColor;
					checkBoxCell->Style->SelectionForeColor = actionsGridView->BackgroundColor;
					checkBoxCell->ReadOnly = true;
				}
			}
		}

		int WorkflowManagement::getSelectedWorkflowId()
		{
			bool workflowSelected = workflowComboBox->SelectedIndex > 0;

			// if no workflow is selected nothing else to do
			if (!workflowSelected)
			{
				return -1;
			}

			ListItemPair ^selectedWorkflow = safe_cast<ListItemPair^>(workflowComboBox->SelectedItem);

			return selectedWorkflow->ID;
		}

		Void WorkflowManagement::updateButtons()
		{
			modifyWorkflowButton->Enabled = workflowComboBox->SelectedIndex > 0;
			deleteWorkflowButton->Enabled = workflowComboBox->SelectedIndex > 0;
			saveChangesButton->Enabled = workflowActionsDirty;
		}

		Void WorkflowManagement::loadWorkflowCombo()
		{
			workflowComboBox->Items->Clear();

			workflowComboBox->DisplayMember = "Name";
			workflowComboBox->ValueMember = "ID";

			IStrToStrMapPtr workflows = _ipfamDatabase->GetWorkflows();
			ASSERT_RESOURCE_ALLOCATION("ELI41935", workflows != __nullptr);

			ListCtrlHelper::LoadListCtrl(workflowComboBox, workflows);

			workflowComboBox->Items->Insert(0, "<All workflows>");

			int currIndex = max(0, workflowComboBox->FindStringExact(_currentWorkflow));
			workflowComboBox->SelectedIndex = currIndex;
			
			bool workflowSelected = (currIndex > 0);
			ActionIncludedColumn->Visible = workflowSelected;
			ActionMainSequenceColumn->Visible = workflowSelected;

			_initializedActions.Clear();

			setActionChecksForCurrentWorkflow();
			
			workflowActionsDirty = false;
			
			updateButtons();
		}

		Void WorkflowManagement::promptAndSaveActionsForWorkFlow(ListItemPair ^workFlowToUpdate)
		{
			if (!workflowActionsDirty)
			{
				return;
			}
			if (MessageBox::Show("The actions for " + workFlowToUpdate->Name + " workflow have changed. Save changes?",
				"Save changes", MessageBoxButtons::YesNo, MessageBoxIcon::Question) == System::Windows::Forms::DialogResult::Yes)
			{
				saveActionsForWorkflow(workFlowToUpdate);
				workflowActionsDirty = false;
				updateButtons();
			}
		}

		Void WorkflowManagement::saveActionsForWorkflow(ListItemPair ^workFlowToUpdate)
		{
			marshal_context marshalContext;
			IIUnknownVectorPtr newWorkflowActions(CLSID_IUnknownVector);
			ASSERT_RESOURCE_ALLOCATION("ELI42022", newWorkflowActions != __nullptr);

			HashSet<String^> actionNames;
			for each (DataGridViewRow ^row in actionsGridView->Rows)
			{
				if ((bool)row->Cells[ActionIncludedColumnIndex]->Value)
				{
					IVariantVectorPtr ipActionInfo(CLSID_VariantVector);

					String^ actionName = (String^)row->Cells[ActionNameColumnIndex]->Value;
					actionNames.Add(actionName);
					BSTR bstrActionName = marshalContext.marshal_as<BSTR>(actionName);
					ipActionInfo->PushBack(bstrActionName);
					bool mainSequence = (bool)row->Cells[ActionMainSequenceColumnIndex]->Value;
					ipActionInfo->PushBack(asVariantBool(mainSequence));

					newWorkflowActions->PushBack(ipActionInfo);
				}
			}

			_ipfamDatabase->SetWorkflowActions(workFlowToUpdate->ID, newWorkflowActions);
		}
#pragma endregion

	}
}

