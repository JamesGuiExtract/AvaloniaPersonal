#include "StdAfx.h"

#ifndef HANDLE_CLI_EXCEPTIONS
#define HANDLE_CLI_EXCEPTIONS
#endif

#include "AddModifyWorkflowForm.h"
#include "ListCtrlHelper.h"
#include <UCLIDException.h>

// Disable all the warnings that generated by including the msclr header files
#pragma warning(disable : 4945)

// includes to allow simple syntax for marshaling between c++ types and .net types
#include <msclr\marshal_cppstd.h>
#include <msclr\marshal_windows.h>

using namespace msclr::interop;
using namespace AttributeDbMgrComponentsLib;

namespace Extract
{
	namespace FAMDBAdmin
	{

#pragma region Constructors

		AddModifyWorkflowForm::AddModifyWorkflowForm(IFileProcessingDBPtr famDatabase, Int32 workflowID)
		{
			try
			{
				InitializeComponent();

				_pipfamDatabase = new IFileProcessingDBPtr();
				*_pipfamDatabase = famDatabase;

				_workflowID = workflowID;

				// Set the title 
				if (_workflowID < 0)
				{
					Text = "Add workflow";
				}
				else
				{
					Text = "Modify workflow";
				}

				// Create the pointer to the smart pointer for the WorkflowDefinition
				_pipWorkflowDefinition = new IWorkflowDefinitionPtr;
				if (_workflowID >= 0)
				{
					ipWorkflowDefinition = _ipfamDatabase->GetWorkflowDefinition(_workflowID);
				}
				else
				{
					_pipWorkflowDefinition->CreateInstance(CLSID_WorkflowDefinition);
					ASSERT_RESOURCE_ALLOCATION("ELI41983", ipWorkflowDefinition != __nullptr);
				}

			}
			CATCH_ALL_AND_RETHROW_AS_UCLID_EXCEPTION("ELI41982");
		}

#pragma endregion

#pragma region Event handlers

		Void AddModifyWorkflowForm::HandleAddModifyWorkflowForm_Load(System::Object ^ sender, System::EventArgs ^ e)
		{
			try
			{
				// Load data into the form				
				loadWorkFlowTypeCombo();
				loadWorkflow();
				_loadBalanceWeightComboBox->SelectedItem =
					ipWorkflowDefinition->LoadBalanceWeight.ToString();
			}
			CATCH_AND_DISPLAY_ALL_EXCEPTIONS("ELI41952");
		}

		Void AddModifyWorkflowForm::HandleOkButton_Click(System::Object ^ sender, System::EventArgs ^ e)
		{
			try
			{
				// Set the result so that if an exception is thrown the dialog will stay open
				DialogResult = System::Windows::Forms::DialogResult::None;

				marshal_context context;

				// Trim leading and trailing whitespace from the workflow name
				String ^workflowName = workflowNameTextBox->Text->Trim();

				// Verify that the name is not empty
				if (String::IsNullOrWhiteSpace(workflowName))
				{
					System::Windows::Forms::MessageBox::Show("Workflow name cannot be empty.");
					workflowNameTextBox->Focus();
					return;
				}

				ipWorkflowDefinition->Name = context.marshal_as<BSTR>(workflowName);

				// Set the description
				ipWorkflowDefinition->Description = context.marshal_as<BSTR>(descriptionTextBox->Text);

				EWorkflowType workflowType = kUndefined;
				if (workFlowTypeComboBox->SelectedIndex >= 0)
				{
					ListItemPair ^selected = safe_cast<ListItemPair^>(workFlowTypeComboBox->SelectedItem);
					workflowType = safe_cast<EWorkflowType>(selected->ID);
					ipWorkflowDefinition->Type = workflowType;
				}

				ipWorkflowDefinition->LoadBalanceWeight = Int32::Parse((String^)_loadBalanceWeightComboBox->SelectedItem);
				
				// This is a new workflow so add it to the database
				if (_workflowID == -1)
				{
					_workflowID = _ipfamDatabase->AddWorkflow(ipWorkflowDefinition->Name, workflowType);
					ipWorkflowDefinition->ID = _workflowID;
				}

				// Update the workflow definition
				_ipfamDatabase->SetWorkflowDefinition(ipWorkflowDefinition);

				// Successfully added/updated the workflow definition so set result to ok
				DialogResult = System::Windows::Forms::DialogResult::OK;
			}
			CATCH_AND_DISPLAY_ALL_EXCEPTIONS("ELI41981");			
		}

#pragma endregion

#pragma region Helper methods

		Void AddModifyWorkflowForm::loadWorkflow()
		{
			// Load the form from the loaded workflow definition if this is not a new workflow
			if (_workflowID >= 0)
			{
				workflowNameTextBox->Text = marshal_as<String ^>(ipWorkflowDefinition->Name);
				descriptionTextBox->Text = marshal_as<String ^>(ipWorkflowDefinition->Description);
			}
		}

		Void Extract::FAMDBAdmin::AddModifyWorkflowForm::loadWorkFlowTypeCombo()
		{
			workFlowTypeComboBox->Items->Clear();
			workFlowTypeComboBox->DisplayMember = "Name";
			workFlowTypeComboBox->ValueMember = "ID";

			workFlowTypeComboBox->Items->Add(gcnew ListItemPair("Redaction", kRedaction));
			workFlowTypeComboBox->Items->Add(gcnew ListItemPair("Extraction",kExtraction));
			workFlowTypeComboBox->Items->Add(gcnew ListItemPair("Classification",kClassification));
			
			switch (ipWorkflowDefinition->Type)
			{
			case kRedaction:
				workFlowTypeComboBox->SelectedIndex = workFlowTypeComboBox->FindStringExact("Redaction");
				break;
			case kExtraction:
				workFlowTypeComboBox->SelectedIndex = workFlowTypeComboBox->FindStringExact("Extraction");
				break;
			case kClassification:
				workFlowTypeComboBox->SelectedIndex = workFlowTypeComboBox->FindStringExact("Classification");
				break;
			}
		}

#pragma endregion

	}
}