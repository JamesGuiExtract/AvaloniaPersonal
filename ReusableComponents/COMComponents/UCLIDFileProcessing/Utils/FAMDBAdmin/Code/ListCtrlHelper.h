#pragma once
// Disable all the warnings that generated by including the msclr header files
#pragma warning(disable : 4945)

// includes to allow simple syntax for marshaling between c++ types and .net types
#include <msclr\marshal_cppstd.h>
#include <msclr\marshal_windows.h>

using namespace msclr::interop;

namespace Extract {
	namespace FAMDBAdmin {

		using namespace System;
		using namespace System::ComponentModel;
		using namespace System::Collections;
		using namespace System::Windows::Forms;
		using namespace UCLID_COMUTILSLib;
		using namespace msclr::interop;

		// Class to be used as a list item that has name and an ID
		public ref class ListItemPair
		{
		public:
#pragma region Properties

			property String^ Name;
			property Int32 ID;

#pragma endregion

#pragma region Constructors

			// Create a list item with the given name and id
			ListItemPair(String ^name, Int32 id)
			{
				Name = name;
				ID = id;
			}

			// Create list item using the StringPair
			// this assumes the key is the name and so is a string
			// and the value is a string representation of a number
			ListItemPair(IStringPairPtr stringPair)
			{
				Name = marshal_as<String^>(stringPair->StringKey);
				ID = Int32::Parse(marshal_as<String^>(stringPair->StringValue));
			}

#pragma endregion

		};

		public class ListCtrlHelper
		{
		public:

#pragma region Static Methods

			// Loads a ComboBox list  with values from IStrToStrMap
			static void LoadListCtrl(ComboBox ^listCtrl, IStrToStrMapPtr values)
			{
				// Clear the list so it can be reloaded
				listCtrl->Items->Clear();
				listCtrl->DisplayMember = "Name";
				listCtrl->ValueMember = "ID";

				IIUnknownVectorPtr itemPairs = values->GetAllKeyValuePairs();

				int numItems = itemPairs->Size();
				for (int i = 0; i < numItems; i++)
				{
					IStringPairPtr currentActionPair = (IStringPairPtr)itemPairs->At(i);
					ListItemPair ^newItem = gcnew ListItemPair(currentActionPair);

					listCtrl->Items->Add(newItem);
				}
			}

			// Loads a CheckedListBox list with values from IStrToStrMap
			static void LoadListCtrl(CheckedListBox ^listCtrl, IStrToStrMapPtr values)
			{
				// Clear the list so it can be reloaded
				listCtrl->Items->Clear();
				listCtrl->DisplayMember = "Name";
				listCtrl->ValueMember = "ID";

				IIUnknownVectorPtr itemPairs = values->GetAllKeyValuePairs();

				int numItems = itemPairs->Size();
				for (int i = 0; i < numItems; i++)
				{
					IStringPairPtr currentActionPair = (IStringPairPtr)itemPairs->At(i);
					ListItemPair ^newItem = gcnew ListItemPair(currentActionPair);

					listCtrl->Items->Add(newItem);
				}
			}

#pragma endregion

		};


	}
}