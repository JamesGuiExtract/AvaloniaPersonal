// Machine generated IDispatch wrapper class(es) created by Microsoft Visual C++

// NOTE: Do not modify the contents of this file.  If this class is regenerated by
//  Microsoft Visual C++, your modifications will be overwritten.


#include "stdafx.h"
#include "imageedit.h"

/////////////////////////////////////////////////////////////////////////////
// CImageEdit

IMPLEMENT_DYNCREATE(CImageEdit, CWnd)

/////////////////////////////////////////////////////////////////////////////
// CImageEdit properties

long CImageEdit::GetPage()
{
	long result;
	GetProperty(0x1, VT_I4, (void*)&result);
	return result;
}

void CImageEdit::SetPage(long propVal)
{
	SetProperty(0x1, VT_I4, propVal);
}

long CImageEdit::GetScrollPositionX()
{
	long result;
	GetProperty(0x2, VT_I4, (void*)&result);
	return result;
}

void CImageEdit::SetScrollPositionX(long propVal)
{
	SetProperty(0x2, VT_I4, propVal);
}

long CImageEdit::GetScrollPositionY()
{
	long result;
	GetProperty(0x3, VT_I4, (void*)&result);
	return result;
}

void CImageEdit::SetScrollPositionY(long propVal)
{
	SetProperty(0x3, VT_I4, propVal);
}

long CImageEdit::GetMousePointer()
{
	long result;
	GetProperty(0x4, VT_I4, (void*)&result);
	return result;
}

void CImageEdit::SetMousePointer(long propVal)
{
	SetProperty(0x4, VT_I4, propVal);
}

double CImageEdit::GetBaseRotation()
{
	double result;
	GetProperty(0x5, VT_R8, (void*)&result);
	return result;
}

void CImageEdit::SetBaseRotation(double propVal)
{
	SetProperty(0x5, VT_R8, propVal);
}

/////////////////////////////////////////////////////////////////////////////
// CImageEdit operations

void CImageEdit::SetImage(LPCTSTR szImagePath)
{
	static BYTE parms[] =
		VTS_BSTR;
	InvokeHelper(0x6, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 szImagePath);
}

void CImageEdit::Display()
{
	InvokeHelper(0x7, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

void CImageEdit::ClearDisplay()
{
	InvokeHelper(0x8, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

void CImageEdit::Refresh()
{
	InvokeHelper(DISPID_REFRESH, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

void CImageEdit::LockLeadWndUpdate()
{
	InvokeHelper(0x9, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

void CImageEdit::UnlockLeadWndUpdate()
{
	InvokeHelper(0xa, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

void CImageEdit::Scroll(short iType, long iDistance)
{
	static BYTE parms[] =
		VTS_I2 VTS_I4;
	InvokeHelper(0xb, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 iType, iDistance);
}

long CImageEdit::GetImageWidth()
{
	long result;
	InvokeHelper(0xc, DISPATCH_METHOD, VT_I4, (void*)&result, NULL);
	return result;
}

long CImageEdit::GetPageCount()
{
	long result;
	InvokeHelper(0xd, DISPATCH_METHOD, VT_I4, (void*)&result, NULL);
	return result;
}

long CImageEdit::GetImageHeight()
{
	long result;
	InvokeHelper(0xe, DISPATCH_METHOD, VT_I4, (void*)&result, NULL);
	return result;
}

CString CImageEdit::GetImage()
{
	CString result;
	InvokeHelper(0xf, DISPATCH_METHOD, VT_BSTR, (void*)&result, NULL);
	return result;
}

void CImageEdit::FitToParent(long bFitPage)
{
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x10, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 bFitPage);
}

void CImageEdit::DrawSelectionRect(long Left, long Top, long Right, long Bottom)
{
	static BYTE parms[] =
		VTS_I4 VTS_I4 VTS_I4 VTS_I4;
	InvokeHelper(0x11, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 Left, Top, Right, Bottom);
}

long CImageEdit::GetXResolution()
{
	long result;
	InvokeHelper(0x12, DISPATCH_METHOD, VT_I4, (void*)&result, NULL);
	return result;
}

long CImageEdit::GetYResolution()
{
	long result;
	InvokeHelper(0x13, DISPATCH_METHOD, VT_I4, (void*)&result, NULL);
	return result;
}

void CImageEdit::ZoomInAroundPoint(long PosX, long PosY)
{
	static BYTE parms[] =
		VTS_I4 VTS_I4;
	InvokeHelper(0x14, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 PosX, PosY);
}

void CImageEdit::ZoomOutAroundPoint(long PosX, long PosY)
{
	static BYTE parms[] =
		VTS_I4 VTS_I4;
	InvokeHelper(0x15, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 PosX, PosY);
}

void CImageEdit::SetZoomMagnifyFactor(long lPercentMagnify)
{
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x16, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 lPercentMagnify);
}

long CImageEdit::GetZoomMagnifyFactor()
{
	long result;
	InvokeHelper(0x17, DISPATCH_METHOD, VT_I4, (void*)&result, NULL);
	return result;
}

double CImageEdit::GetZoom()
{
	double result;
	InvokeHelper(0x18, DISPATCH_METHOD, VT_R8, (void*)&result, NULL);
	return result;
}

void CImageEdit::SetZoom(long newValue)
{
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x19, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 newValue);
}

void CImageEdit::SetCursorHandle(long* hCursor)
{
	static BYTE parms[] =
		VTS_PI4;
	InvokeHelper(0x1a, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 hCursor);
}

void CImageEdit::ExtractZoneImage(long nX1, long nY1, long nX2, long nY2, long nHeight, long nPageNum, LPCTSTR strFileName)
{
	static BYTE parms[] =
		VTS_I4 VTS_I4 VTS_I4 VTS_I4 VTS_I4 VTS_I4 VTS_BSTR;
	InvokeHelper(0x1b, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 nX1, nY1, nX2, nY2, nHeight, nPageNum, strFileName);
}

void CImageEdit::EnableVerticalScroll(long bEnable)
{
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x1c, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 bEnable);
}

void CImageEdit::RefreshRect(long lLeft, long lTop, long lRight, long lBottom)
{
	static BYTE parms[] =
		VTS_I4 VTS_I4 VTS_I4 VTS_I4;
	InvokeHelper(0x1d, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 lLeft, lTop, lRight, lBottom);
}

void CImageEdit::AboutBox()
{
	InvokeHelper(0xfffffdd8, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}
