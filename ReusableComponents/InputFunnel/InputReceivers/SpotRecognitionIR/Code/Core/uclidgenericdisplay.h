#if !defined(AFX_UCLIDGENERICDISPLAY_H__552B6A51_EAC4_4D6B_9B55_97EC2BBA7434__INCLUDED_)
#define AFX_UCLIDGENERICDISPLAY_H__552B6A51_EAC4_4D6B_9B55_97EC2BBA7434__INCLUDED_

#if _MSC_VER > 1000
#pragma once
#endif // _MSC_VER > 1000
// Machine generated IDispatch wrapper class(es) created by Microsoft Visual C++

// NOTE: Do not modify the contents of this file.  If this class is regenerated by
//  Microsoft Visual C++, your modifications will be overwritten.

/////////////////////////////////////////////////////////////////////////////
// CUCLIDGenericDisplay wrapper class

class CUCLIDGenericDisplay : public CWnd
{
protected:
	DECLARE_DYNCREATE(CUCLIDGenericDisplay)
public:
	CLSID const& GetClsid()
	{
		static CLSID const clsid
			= { 0x14981576, 0x9117, 0x11d4, { 0x97, 0x25, 0x0, 0x80, 0x48, 0xfb, 0xc9, 0x6e } };
		return clsid;
	}
	virtual BOOL Create(LPCTSTR lpszClassName,
		LPCTSTR lpszWindowName, DWORD dwStyle,
		const RECT& rect,
		CWnd* pParentWnd, UINT nID,
		CCreateContext* pContext = NULL)
	{ return CreateControl(GetClsid(), lpszWindowName, dwStyle, rect, pParentWnd, nID); }

    BOOL Create(LPCTSTR lpszWindowName, DWORD dwStyle,
		const RECT& rect, CWnd* pParentWnd, UINT nID,
		CFile* pPersist = NULL, BOOL bStorage = FALSE,
		BSTR bstrLicKey = NULL)
	{ return CreateControl(GetClsid(), lpszWindowName, dwStyle, rect, pParentWnd, nID,
		pPersist, bStorage, bstrLicKey); }

// Attributes
public:

// Operations
public:
	void setDefaultUnits(LPCTSTR zDefaultUnits);
	void zoomPush();
	void zoomPop();
	void zoomExtents();
	void zoomFitToWidth();
	void zoomCenter(double dCenterX, double dCenterY);
	void zoomWindow(double dBottomLeftX, double dBottomLeftY, double dTopRightX, double dTopRightY, long* pnFitStatus);
	void setImage(LPCTSTR zImageFileName);
	void setScaleFactor(double dScaleFactor);
	double getScaleFactor();
	void setStatusBarText(LPCTSTR zStatusBarText);
	void setRubberbandingParameters(long ERubberbandType, double dStartPointX, double dStartPointY);
	void enableRubberbanding(long bValue);
	void deleteEntity(long ulEntityID);
	void clear();
	CString getEntityAttributes(long ulEntityID);
	void modifyEntityAttribute(long ulEntityID, LPCTSTR zAttributeName, LPCTSTR zNewValue);
	void addEntityAttribute(long ulEntityID, LPCTSTR zAttributeName, LPCTSTR zValue);
	void deleteEntityAttribute(long ulEntityID, LPCTSTR zAttributeName);
	unsigned long getEntityColor(long ulEntityID);
	void setEntityColor(long ulEntityID, unsigned long newColor);
	CString getEntityType(long ulEntityID);
	void moveEntityBy(long ulEntityID, double dX, double dY);
	long getEntityNearestTo(double dX, double dY, double* rDistance);
	void selectEntity(long ulEntityID, long bSelect);
	void selectAllEntities(long bSelect);
	CString getSelectedEntities();
	void setEntityText(long ulTextEntityID, LPCTSTR zNewText);
	CString queryEntities(LPCTSTR zQuery);
	CString getEntityText(long ulTextEntityID);
	void getCurrentViewExtents(double* rdBottomLeftX, double* rdBottomLeftY, double* rdTopRightX, double* rdTopRightY);
	void getEntityExtents(long ulEntityID, double* rdBottomLeftX, double* rdBottomLeftY, double* rdTopRightX, double* rdTopRightY);
	CString getDefaultUnits();
	CString getImageName();
	CString getStatusBarText();
	long isRubberbandingEnabled();
	long getRubberbandingParameters(long* ERubberbandType, double* dStartPointX, double* dStartPointY);
	void convertWorldToImagePixelCoords(double dWorldX, double dWorldY, long* rulImagePixelPosX, long* rulImagePixelPosY, long nPageNum);
	void convertImagePixelToWorldCoords(long ulImagePixelPosX, long ulImagePixelPosY, double* rdWorldX, double* rdWorldY, long nPageNum);
	void getImageExtents(double* dWidth, double* dHeight);
	void setZoomFactor(double dZoomFactor);
	double getZoomFactor();
	void zoomIn(long* pnFitStatus);
	void zoomOut(long* pnFitStatus);
	void enableEntitySelection(long bEnable);
	long isEntitySelectionEnabled();
	void enableZoneEntityCreation(long bEnable);
	long isZoneEntityCreationEnabled();
	void getZoneEntityParameters(long nZoneEntityID, long* rulStartPosX, long* rulStartPosY, long* rulEndPosX, long* rulEndPosY, long* rulTotalZoneHeight);
	void setMinZoneWidth(long ulMinZoneWidth);
	long getMinZoneWidth();
	void setZoneHighlightHeight(long ulNewHeight);
	long getZoneHighlightHeight();
	void setZoneHighlightColor(unsigned long newColor);
	unsigned long getZoneHighlightColor();
	void convertWorldToClientWindowPixelCoords(double dWorldX, double dWorldY, long* rulClientWndPosX, long* rulClientWndPosY, long nPageNum);
	void convertClientWindowPixelToWorldCoords(long ulClientWndPosX, long ulClientWndPosY, double* rdWorldX, double* rdWorldY, long nPageNum);
	void zoomInAroundPoint(double dX, double dY);
	void zoomOutAroundPoint(double dX, double dY);
	void setXYTrackingOption(long iTrackingOption);
	BOOL documentIsModified();
	long getCurrentPageNumber();
	void setCurrentPageNumber(long ulPageNumber);
	long getTotalPages();
	CString getEntityAttributeValue(long ulEntityID, LPCTSTR zAttributeName);
	CString getEntityInfo(long nEntityID);
	long addCurveEntity(double dCenterX, double dCenterY, double dRadius, double dStartAngle, double dEndAngle, long nPageNum);
	long addLineEntity(double dStartPointX, double dStartPointY, double dEndPointX, double dEndPointY, long nPageNum);
	long addSpecializedCircleEntity(double dCenterX, double dCenterY, long nPercentRadius, long nPageNum);
	long addTextEntity(double dInsertionPointX, double dInsertionPointY, LPCTSTR zText, short ucAlignment, double dRotationInDegrees, double dHeight, LPCTSTR zFontName, long nPageNum);
	long addZoneEntity(long ulStartPosX, long ulStartPosY, long ulEndPosX, long ulEndPosY, long ulTotalZoneHeight, long nPageNum, long bFill, long bBorderVisible, unsigned long borderColor);
	double getBaseRotation(long nPageNum);
	void setBaseRotation(long nPageNum, double dBaseRotation);
	void setDocumentModified(long bModified);
	void setCursorHandle(long* hCursor);
	void extractZoneEntityImage(long nZoneEntityID, LPCTSTR strFileName);
	void extractZoneImage(long nX1, long nY1, long nX2, long nY2, long nHeight, long nPageNum, LPCTSTR strFileName);
	void getCurrentPageSize(long* pWidth, long* pHeight);
	long isZoneBorderVisible(long ulZoneEntityID);
	void showZoneBorder(long ulZoneEntityID, long bShow);
	unsigned long getZoneBorderColor(long ulZoneEntityID);
	void setZoneBorderColor(long ulZoneEntityID, unsigned long newColor);
	long isZoneFilled(long ulZoneEntityID);
	void setZoneFilled(long ulZoneEntityID, long bFilled);
	void setZoneEntityCreationType(long eType);
	long getZoneEntityCreationType();
	void setZoom(double dZoom);
	double getZoom();
	long getZoneBorderStyle(long ulZoneEntityID);
	void setZoneBorderStyle(long ulZoneEntityID, long nStyle);
	long isZoneBorderSpecial(long ulZoneEntityID);
	void setZoneBorderSpecial(long ulZoneEntityID, long bSpecial);
	long getEntityPage(long ulZoneEntityID);
	void AboutBox();
	void enableDisplayPercentage(long bValue);	
	long isZoneEntityAdjustmentEnabled();
	void enableZoneEntityAdjustment(long bEnable);
	void setFittingMode(long eFittingMode);
	long getFittingMode();
};

//{{AFX_INSERT_LOCATION}}
// Microsoft Visual C++ will insert additional declarations immediately before the previous line.

#endif // !defined(AFX_UCLIDGENERICDISPLAY_H__552B6A51_EAC4_4D6B_9B55_97EC2BBA7434__INCLUDED_)
