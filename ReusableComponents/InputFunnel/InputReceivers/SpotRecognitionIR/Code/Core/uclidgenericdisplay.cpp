// Machine generated IDispatch wrapper class(es) created by Microsoft Visual C++

// NOTE: Do not modify the contents of this file.  If this class is regenerated by
//  Microsoft Visual C++, your modifications will be overwritten.


#include "stdafx.h"
#include "uclidgenericdisplay.h"

/////////////////////////////////////////////////////////////////////////////
// CUCLIDGenericDisplay

IMPLEMENT_DYNCREATE(CUCLIDGenericDisplay, CWnd)

/////////////////////////////////////////////////////////////////////////////
// CUCLIDGenericDisplay properties

/////////////////////////////////////////////////////////////////////////////
// CUCLIDGenericDisplay operations

void CUCLIDGenericDisplay::setDefaultUnits(LPCTSTR zDefaultUnits)
{
	static BYTE parms[] =
		VTS_BSTR;
	InvokeHelper(0x1, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 zDefaultUnits);
}

void CUCLIDGenericDisplay::zoomPush()
{
	InvokeHelper(0x2, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

void CUCLIDGenericDisplay::zoomPop()
{
	InvokeHelper(0x3, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

void CUCLIDGenericDisplay::zoomExtents()
{
	InvokeHelper(0x4, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

void CUCLIDGenericDisplay::zoomFitToWidth()
{
	InvokeHelper(0x5D, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

void CUCLIDGenericDisplay::zoomCenter(double dCenterX, double dCenterY)
{
	static BYTE parms[] =
		VTS_R8 VTS_R8;
	InvokeHelper(0x5, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 dCenterX, dCenterY);
}

void CUCLIDGenericDisplay::zoomWindow(double dBottomLeftX, double dBottomLeftY, 
									  double dTopRightX, double dTopRightY, long* pnFitStatus)
{
	static BYTE parms[] =
		VTS_R8 VTS_R8 VTS_R8 VTS_R8 VTS_PI4;
	InvokeHelper(0x6, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 dBottomLeftX, dBottomLeftY, dTopRightX, dTopRightY, pnFitStatus);
}

void CUCLIDGenericDisplay::setImage(LPCTSTR zImageFileName)
{
	static BYTE parms[] =
		VTS_BSTR;
	InvokeHelper(0x7, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 zImageFileName);
}

void CUCLIDGenericDisplay::setScaleFactor(double dScaleFactor)
{
	static BYTE parms[] =
		VTS_R8;
	InvokeHelper(0x8, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 dScaleFactor);
}

double CUCLIDGenericDisplay::getScaleFactor()
{
	double result;
	InvokeHelper(0x9, DISPATCH_METHOD, VT_R8, (void*)&result, NULL);
	return result;
}

void CUCLIDGenericDisplay::setStatusBarText(LPCTSTR zStatusBarText)
{
	static BYTE parms[] =
		VTS_BSTR;
	InvokeHelper(0xa, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 zStatusBarText);
}

void CUCLIDGenericDisplay::setRubberbandingParameters(long ERubberbandType, double dStartPointX, double dStartPointY)
{
	static BYTE parms[] =
		VTS_I4 VTS_R8 VTS_R8;
	InvokeHelper(0xb, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 ERubberbandType, dStartPointX, dStartPointY);
}

void CUCLIDGenericDisplay::enableRubberbanding(long bValue)
{
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0xc, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 bValue);
}

void CUCLIDGenericDisplay::deleteEntity(long ulEntityID)
{
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0xd, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 ulEntityID);
}

void CUCLIDGenericDisplay::clear()
{
	InvokeHelper(0xe, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

CString CUCLIDGenericDisplay::getEntityAttributes(long ulEntityID)
{
	CString result;
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0xf, DISPATCH_METHOD, VT_BSTR, (void*)&result, parms,
		ulEntityID);
	return result;
}

void CUCLIDGenericDisplay::modifyEntityAttribute(long ulEntityID, LPCTSTR zAttributeName, LPCTSTR zNewValue)
{
	static BYTE parms[] =
		VTS_I4 VTS_BSTR VTS_BSTR;
	InvokeHelper(0x10, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 ulEntityID, zAttributeName, zNewValue);
}

void CUCLIDGenericDisplay::addEntityAttribute(long ulEntityID, LPCTSTR zAttributeName, LPCTSTR zValue)
{
	static BYTE parms[] =
		VTS_I4 VTS_BSTR VTS_BSTR;
	InvokeHelper(0x11, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 ulEntityID, zAttributeName, zValue);
}

void CUCLIDGenericDisplay::deleteEntityAttribute(long ulEntityID, LPCTSTR zAttributeName)
{
	static BYTE parms[] =
		VTS_I4 VTS_BSTR;
	InvokeHelper(0x12, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 ulEntityID, zAttributeName);
}

unsigned long CUCLIDGenericDisplay::getEntityColor(long ulEntityID)
{
	unsigned long result;
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x13, DISPATCH_METHOD, VT_I4, (void*)&result, parms,
		ulEntityID);
	return result;
}

void CUCLIDGenericDisplay::setEntityColor(long ulEntityID, unsigned long newColor)
{
	static BYTE parms[] =
		VTS_I4 VTS_I4;
	InvokeHelper(0x14, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 ulEntityID, newColor);
}

CString CUCLIDGenericDisplay::getEntityType(long ulEntityID)
{
	CString result;
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x15, DISPATCH_METHOD, VT_BSTR, (void*)&result, parms,
		ulEntityID);
	return result;
}

void CUCLIDGenericDisplay::moveEntityBy(long ulEntityID, double dX, double dY)
{
	static BYTE parms[] =
		VTS_I4 VTS_R8 VTS_R8;
	InvokeHelper(0x16, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 ulEntityID, dX, dY);
}

long CUCLIDGenericDisplay::getEntityNearestTo(double dX, double dY, double* rDistance)
{
	long result;
	static BYTE parms[] =
		VTS_R8 VTS_R8 VTS_PR8;
	InvokeHelper(0x17, DISPATCH_METHOD, VT_I4, (void*)&result, parms,
		dX, dY, rDistance);
	return result;
}

void CUCLIDGenericDisplay::selectEntity(long ulEntityID, long bSelect)
{
	static BYTE parms[] =
		VTS_I4 VTS_I4;
	InvokeHelper(0x18, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 ulEntityID, bSelect);
}

void CUCLIDGenericDisplay::selectAllEntities(long bSelect)
{
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x19, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 bSelect);
}

CString CUCLIDGenericDisplay::getSelectedEntities()
{
	CString result;
	InvokeHelper(0x1a, DISPATCH_METHOD, VT_BSTR, (void*)&result, NULL);
	return result;
}

void CUCLIDGenericDisplay::setEntityText(long ulTextEntityID, LPCTSTR zNewText)
{
	static BYTE parms[] =
		VTS_I4 VTS_BSTR;
	InvokeHelper(0x1b, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 ulTextEntityID, zNewText);
}

CString CUCLIDGenericDisplay::queryEntities(LPCTSTR zQuery)
{
	CString result;
	static BYTE parms[] =
		VTS_BSTR;
	InvokeHelper(0x1c, DISPATCH_METHOD, VT_BSTR, (void*)&result, parms,
		zQuery);
	return result;
}

CString CUCLIDGenericDisplay::getEntityText(long ulTextEntityID)
{
	CString result;
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x1d, DISPATCH_METHOD, VT_BSTR, (void*)&result, parms,
		ulTextEntityID);
	return result;
}

void CUCLIDGenericDisplay::getCurrentViewExtents(double* rdBottomLeftX, double* rdBottomLeftY, double* rdTopRightX, double* rdTopRightY)
{
	static BYTE parms[] =
		VTS_PR8 VTS_PR8 VTS_PR8 VTS_PR8;
	InvokeHelper(0x1e, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 rdBottomLeftX, rdBottomLeftY, rdTopRightX, rdTopRightY);
}

void CUCLIDGenericDisplay::getEntityExtents(long ulEntityID, double* rdBottomLeftX, double* rdBottomLeftY, double* rdTopRightX, double* rdTopRightY)
{
	static BYTE parms[] =
		VTS_I4 VTS_PR8 VTS_PR8 VTS_PR8 VTS_PR8;
	InvokeHelper(0x1f, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 ulEntityID, rdBottomLeftX, rdBottomLeftY, rdTopRightX, rdTopRightY);
}

CString CUCLIDGenericDisplay::getDefaultUnits()
{
	CString result;
	InvokeHelper(0x20, DISPATCH_METHOD, VT_BSTR, (void*)&result, NULL);
	return result;
}

CString CUCLIDGenericDisplay::getImageName()
{
	CString result;
	InvokeHelper(0x21, DISPATCH_METHOD, VT_BSTR, (void*)&result, NULL);
	return result;
}

CString CUCLIDGenericDisplay::getStatusBarText()
{
	CString result;
	InvokeHelper(0x22, DISPATCH_METHOD, VT_BSTR, (void*)&result, NULL);
	return result;
}

long CUCLIDGenericDisplay::isRubberbandingEnabled()
{
	long result;
	InvokeHelper(0x23, DISPATCH_METHOD, VT_I4, (void*)&result, NULL);
	return result;
}

long CUCLIDGenericDisplay::getRubberbandingParameters(long* ERubberbandType, double* dStartPointX, double* dStartPointY)
{
	long result;
	static BYTE parms[] =
		VTS_PI4 VTS_PR8 VTS_PR8;
	InvokeHelper(0x24, DISPATCH_METHOD, VT_I4, (void*)&result, parms,
		ERubberbandType, dStartPointX, dStartPointY);
	return result;
}

void CUCLIDGenericDisplay::convertWorldToImagePixelCoords(double dWorldX, double dWorldY, long* rulImagePixelPosX, long* rulImagePixelPosY, long nPageNum)
{
	static BYTE parms[] =
		VTS_R8 VTS_R8 VTS_PI4 VTS_PI4 VTS_I4;
	InvokeHelper(0x25, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 dWorldX, dWorldY, rulImagePixelPosX, rulImagePixelPosY, nPageNum);
}

void CUCLIDGenericDisplay::convertImagePixelToWorldCoords(long ulImagePixelPosX, long ulImagePixelPosY, double* rdWorldX, double* rdWorldY, long nPageNum)
{
	static BYTE parms[] =
		VTS_I4 VTS_I4 VTS_PR8 VTS_PR8 VTS_I4;
	InvokeHelper(0x26, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 ulImagePixelPosX, ulImagePixelPosY, rdWorldX, rdWorldY, nPageNum);
}

void CUCLIDGenericDisplay::getImageExtents(double* dWidth, double* dHeight)
{
	static BYTE parms[] =
		VTS_PR8 VTS_PR8;
	InvokeHelper(0x27, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 dWidth, dHeight);
}

void CUCLIDGenericDisplay::setZoomFactor(double dZoomFactor)
{
	static BYTE parms[] =
		VTS_R8;
	InvokeHelper(0x28, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 dZoomFactor);
}

double CUCLIDGenericDisplay::getZoomFactor()
{
	double result;
	InvokeHelper(0x29, DISPATCH_METHOD, VT_R8, (void*)&result, NULL);
	return result;
}

void CUCLIDGenericDisplay::zoomIn(long* pnFitStatus)
{	
	static BYTE parms[] =
		VTS_PI4;
	InvokeHelper(0x2a, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		pnFitStatus);
}

void CUCLIDGenericDisplay::zoomOut(long* pnFitStatus)
{
	static BYTE parms[] =
		VTS_PI4;
	InvokeHelper(0x2b, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		pnFitStatus);
}

void CUCLIDGenericDisplay::enableEntitySelection(long bEnable)
{
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x2c, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 bEnable);
}

long CUCLIDGenericDisplay::isEntitySelectionEnabled()
{
	long result;
	InvokeHelper(0x2d, DISPATCH_METHOD, VT_I4, (void*)&result, NULL);
	return result;
}

void CUCLIDGenericDisplay::enableZoneEntityCreation(long bEnable)
{
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x2e, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 bEnable);
}

long CUCLIDGenericDisplay::isZoneEntityCreationEnabled()
{
	long result;
	InvokeHelper(0x2f, DISPATCH_METHOD, VT_I4, (void*)&result, NULL);
	return result;
}

void CUCLIDGenericDisplay::getZoneEntityParameters(long nZoneEntityID, long* rulStartPosX, long* rulStartPosY, long* rulEndPosX, long* rulEndPosY, long* rulTotalZoneHeight)
{
	static BYTE parms[] =
		VTS_I4 VTS_PI4 VTS_PI4 VTS_PI4 VTS_PI4 VTS_PI4;
	InvokeHelper(0x30, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 nZoneEntityID, rulStartPosX, rulStartPosY, rulEndPosX, rulEndPosY, rulTotalZoneHeight);
}

void CUCLIDGenericDisplay::setMinZoneWidth(long ulMinZoneWidth)
{
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x31, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 ulMinZoneWidth);
}

long CUCLIDGenericDisplay::getMinZoneWidth()
{
	long result;
	InvokeHelper(0x32, DISPATCH_METHOD, VT_I4, (void*)&result, NULL);
	return result;
}

void CUCLIDGenericDisplay::setZoneHighlightHeight(long ulNewHeight)
{
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x33, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 ulNewHeight);
}

long CUCLIDGenericDisplay::getZoneHighlightHeight()
{
	long result;
	InvokeHelper(0x34, DISPATCH_METHOD, VT_I4, (void*)&result, NULL);
	return result;
}

void CUCLIDGenericDisplay::setZoneHighlightColor(unsigned long newColor)
{
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x35, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 newColor);
}

unsigned long CUCLIDGenericDisplay::getZoneHighlightColor()
{
	unsigned long result;
	InvokeHelper(0x36, DISPATCH_METHOD, VT_I4, (void*)&result, NULL);
	return result;
}

void CUCLIDGenericDisplay::convertWorldToClientWindowPixelCoords(double dWorldX, double dWorldY, long* rulClientWndPosX, long* rulClientWndPosY, long nPageNum)
{
	static BYTE parms[] =
		VTS_R8 VTS_R8 VTS_PI4 VTS_PI4 VTS_I4;
	InvokeHelper(0x37, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 dWorldX, dWorldY, rulClientWndPosX, rulClientWndPosY, nPageNum);
}

void CUCLIDGenericDisplay::convertClientWindowPixelToWorldCoords(long ulClientWndPosX, long ulClientWndPosY, double* rdWorldX, double* rdWorldY, long nPageNum)
{
	static BYTE parms[] =
		VTS_I4 VTS_I4 VTS_PR8 VTS_PR8 VTS_I4;
	InvokeHelper(0x38, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 ulClientWndPosX, ulClientWndPosY, rdWorldX, rdWorldY, nPageNum);
}

void CUCLIDGenericDisplay::zoomInAroundPoint(double dX, double dY)
{
	static BYTE parms[] =
		VTS_R8 VTS_R8;
	InvokeHelper(0x39, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 dX, dY);
}

void CUCLIDGenericDisplay::zoomOutAroundPoint(double dX, double dY)
{
	static BYTE parms[] =
		VTS_R8 VTS_R8;
	InvokeHelper(0x3a, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 dX, dY);
}

void CUCLIDGenericDisplay::setXYTrackingOption(long iTrackingOption)
{
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x3b, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 iTrackingOption);
}

void CUCLIDGenericDisplay::enableDisplayPercentage(long bValue)
{
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x5e, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 bValue);
}

long CUCLIDGenericDisplay::isZoneEntityAdjustmentEnabled()
{
	long result;
	InvokeHelper(0x5f, DISPATCH_METHOD, VT_I4, (void*)&result, NULL);
	return result;
}

void CUCLIDGenericDisplay::enableZoneEntityAdjustment(long bEnable)
{
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x60, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 bEnable);
}

void CUCLIDGenericDisplay::setFittingMode(long eFittingMode)
{
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x61, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 eFittingMode);
}

long CUCLIDGenericDisplay::getFittingMode()
{
	long result;
	InvokeHelper(0x62, DISPATCH_METHOD, VT_I4, (void*)&result, NULL);
	return result;
}

BOOL CUCLIDGenericDisplay::documentIsModified()
{
	BOOL result;
	InvokeHelper(0x3c, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
	return result;
}

long CUCLIDGenericDisplay::getCurrentPageNumber()
{
	long result;
	InvokeHelper(0x3d, DISPATCH_METHOD, VT_I4, (void*)&result, NULL);
	return result;
}

void CUCLIDGenericDisplay::setCurrentPageNumber(long ulPageNumber)
{
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x3e, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 ulPageNumber);
}

long CUCLIDGenericDisplay::getTotalPages()
{
	long result;
	InvokeHelper(0x3f, DISPATCH_METHOD, VT_I4, (void*)&result, NULL);
	return result;
}

CString CUCLIDGenericDisplay::getEntityAttributeValue(long ulEntityID, LPCTSTR zAttributeName)
{
	CString result;
	static BYTE parms[] =
		VTS_I4 VTS_BSTR;
	InvokeHelper(0x40, DISPATCH_METHOD, VT_BSTR, (void*)&result, parms,
		ulEntityID, zAttributeName);
	return result;
}

CString CUCLIDGenericDisplay::getEntityInfo(long nEntityID)
{
	CString result;
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x41, DISPATCH_METHOD, VT_BSTR, (void*)&result, parms,
		nEntityID);
	return result;
}

long CUCLIDGenericDisplay::addCurveEntity(double dCenterX, double dCenterY, double dRadius, double dStartAngle, double dEndAngle, long nPageNum)
{
	long result;
	static BYTE parms[] =
		VTS_R8 VTS_R8 VTS_R8 VTS_R8 VTS_R8 VTS_I4;
	InvokeHelper(0x42, DISPATCH_METHOD, VT_I4, (void*)&result, parms,
		dCenterX, dCenterY, dRadius, dStartAngle, dEndAngle, nPageNum);
	return result;
}

long CUCLIDGenericDisplay::addLineEntity(double dStartPointX, double dStartPointY, double dEndPointX, double dEndPointY, long nPageNum)
{
	long result;
	static BYTE parms[] =
		VTS_R8 VTS_R8 VTS_R8 VTS_R8 VTS_I4;
	InvokeHelper(0x43, DISPATCH_METHOD, VT_I4, (void*)&result, parms,
		dStartPointX, dStartPointY, dEndPointX, dEndPointY, nPageNum);
	return result;
}

long CUCLIDGenericDisplay::addSpecializedCircleEntity(double dCenterX, double dCenterY, long nPercentRadius, long nPageNum)
{
	long result;
	static BYTE parms[] =
		VTS_R8 VTS_R8 VTS_I4 VTS_I4;
	InvokeHelper(0x44, DISPATCH_METHOD, VT_I4, (void*)&result, parms,
		dCenterX, dCenterY, nPercentRadius, nPageNum);
	return result;
}

long CUCLIDGenericDisplay::addTextEntity(double dInsertionPointX, double dInsertionPointY, LPCTSTR zText, short ucAlignment, double dRotationInDegrees, double dHeight, LPCTSTR zFontName, long nPageNum)
{
	long result;
	static BYTE parms[] =
		VTS_R8 VTS_R8 VTS_BSTR VTS_I2 VTS_R8 VTS_R8 VTS_BSTR VTS_I4;
	InvokeHelper(0x45, DISPATCH_METHOD, VT_I4, (void*)&result, parms,
		dInsertionPointX, dInsertionPointY, zText, ucAlignment, dRotationInDegrees, dHeight, zFontName, nPageNum);
	return result;
}

long CUCLIDGenericDisplay::addZoneEntity(long ulStartPosX, long ulStartPosY, long ulEndPosX, long ulEndPosY, long ulTotalZoneHeight, long nPageNum, long bFill, long bBorderVisible, unsigned long borderColor)
{
	long result;
	static BYTE parms[] =
		VTS_I4 VTS_I4 VTS_I4 VTS_I4 VTS_I4 VTS_I4 VTS_I4 VTS_I4 VTS_I4;
	InvokeHelper(0x46, DISPATCH_METHOD, VT_I4, (void*)&result, parms,
		ulStartPosX, ulStartPosY, ulEndPosX, ulEndPosY, ulTotalZoneHeight, nPageNum, bFill, bBorderVisible, borderColor);
	return result;
}

double CUCLIDGenericDisplay::getBaseRotation(long nPageNum)
{
	double result;
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x47, DISPATCH_METHOD, VT_R8, (void*)&result, parms,
		nPageNum);
	return result;
}

void CUCLIDGenericDisplay::setBaseRotation(long nPageNum, double dBaseRotation)
{
	static BYTE parms[] =
		VTS_I4 VTS_R8;
	InvokeHelper(0x48, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 nPageNum, dBaseRotation);
}

void CUCLIDGenericDisplay::setDocumentModified(long bModified)
{
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x49, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 bModified);
}

void CUCLIDGenericDisplay::setCursorHandle(long* hCursor)
{
	static BYTE parms[] =
		VTS_PI4;
	InvokeHelper(0x4a, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 hCursor);
}

void CUCLIDGenericDisplay::extractZoneEntityImage(long nZoneEntityID, LPCTSTR strFileName)
{
	static BYTE parms[] =
		VTS_I4 VTS_BSTR;
	InvokeHelper(0x4b, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 nZoneEntityID, strFileName);
}

void CUCLIDGenericDisplay::extractZoneImage(long nX1, long nY1, long nX2, long nY2, long nHeight, long nPageNum, LPCTSTR strFileName)
{
	static BYTE parms[] =
		VTS_I4 VTS_I4 VTS_I4 VTS_I4 VTS_I4 VTS_I4 VTS_BSTR;
	InvokeHelper(0x4c, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 nX1, nY1, nX2, nY2, nHeight, nPageNum, strFileName);
}

void CUCLIDGenericDisplay::getCurrentPageSize(long* pWidth, long* pHeight)
{
	static BYTE parms[] =
		VTS_PI4 VTS_PI4;
	InvokeHelper(0x4d, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 pWidth, pHeight);
}

long CUCLIDGenericDisplay::isZoneBorderVisible(long ulZoneEntityID)
{
	long result;
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x4e, DISPATCH_METHOD, VT_I4, (void*)&result, parms,
		ulZoneEntityID);
	return result;
}

void CUCLIDGenericDisplay::showZoneBorder(long ulZoneEntityID, long bShow)
{
	static BYTE parms[] =
		VTS_I4 VTS_I4;
	InvokeHelper(0x4f, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 ulZoneEntityID, bShow);
}

unsigned long CUCLIDGenericDisplay::getZoneBorderColor(long ulZoneEntityID)
{
	unsigned long result;
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x50, DISPATCH_METHOD, VT_I4, (void*)&result, parms,
		ulZoneEntityID);
	return result;
}

void CUCLIDGenericDisplay::setZoneBorderColor(long ulZoneEntityID, unsigned long newColor)
{
	static BYTE parms[] =
		VTS_I4 VTS_I4;
	InvokeHelper(0x51, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 ulZoneEntityID, newColor);
}

long CUCLIDGenericDisplay::isZoneFilled(long ulZoneEntityID)
{
	long result;
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x52, DISPATCH_METHOD, VT_I4, (void*)&result, parms,
		ulZoneEntityID);
	return result;
}

void CUCLIDGenericDisplay::setZoneFilled(long ulZoneEntityID, long bFilled)
{
	static BYTE parms[] =
		VTS_I4 VTS_I4;
	InvokeHelper(0x53, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 ulZoneEntityID, bFilled);
}

void CUCLIDGenericDisplay::setZoneEntityCreationType(long eType)
{
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x54, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 eType);
}

long CUCLIDGenericDisplay::getZoneEntityCreationType()
{
	long result;
	InvokeHelper(0x55, DISPATCH_METHOD, VT_I4, (void*)&result, NULL);
	return result;
}

void CUCLIDGenericDisplay::setZoom(double dZoom)
{
	static BYTE parms[] =
		VTS_R8;
	InvokeHelper(0x56, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 dZoom);
}

double CUCLIDGenericDisplay::getZoom()
{
	double result;
	InvokeHelper(0x57, DISPATCH_METHOD, VT_R8, (void*)&result, NULL);
	return result;
}

long CUCLIDGenericDisplay::getZoneBorderStyle(long ulZoneEntityID)
{
	long result;
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x58, DISPATCH_METHOD, VT_I4, (void*)&result, parms,
		ulZoneEntityID);
	return result;
}

void CUCLIDGenericDisplay::setZoneBorderStyle(long ulZoneEntityID, long nStyle)
{
	static BYTE parms[] =
		VTS_I4 VTS_I4;
	InvokeHelper(0x59, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 ulZoneEntityID, nStyle);
}

long CUCLIDGenericDisplay::isZoneBorderSpecial(long ulZoneEntityID)
{
	long result;
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x5a, DISPATCH_METHOD, VT_I4, (void*)&result, parms,
		ulZoneEntityID);
	return result;
}

void CUCLIDGenericDisplay::setZoneBorderSpecial(long ulZoneEntityID, long bSpecial)
{
	static BYTE parms[] =
		VTS_I4 VTS_I4;
	InvokeHelper(0x5b, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 ulZoneEntityID, bSpecial);
}

long CUCLIDGenericDisplay::getEntityPage(long ulZoneEntityID)
{
	long result;
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x5c, DISPATCH_METHOD, VT_I4, (void*)&result, parms,
		 ulZoneEntityID);
	return result;
}

void CUCLIDGenericDisplay::AboutBox()
{
	InvokeHelper(0xfffffdd8, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}
