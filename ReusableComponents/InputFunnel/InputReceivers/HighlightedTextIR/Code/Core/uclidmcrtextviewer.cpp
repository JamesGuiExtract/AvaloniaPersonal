// Machine generated IDispatch wrapper class(es) created by Microsoft Visual C++

// NOTE: Do not modify the contents of this file.  If this class is regenerated by
//  Microsoft Visual C++, your modifications will be overwritten.


#include "stdafx.h"
#include "uclidmcrtextviewer.h"

/////////////////////////////////////////////////////////////////////////////
// CUCLIDMCRTextViewer

IMPLEMENT_DYNCREATE(CUCLIDMCRTextViewer, CWnd)

/////////////////////////////////////////////////////////////////////////////
// CUCLIDMCRTextViewer properties

/////////////////////////////////////////////////////////////////////////////
// CUCLIDMCRTextViewer operations

void CUCLIDMCRTextViewer::open(LPCTSTR strFileName)
{
	static BYTE parms[] =
		VTS_BSTR;
	InvokeHelper(0x1, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 strFileName);
}

void CUCLIDMCRTextViewer::save()
{
	InvokeHelper(0x2, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

void CUCLIDMCRTextViewer::saveAs(LPCTSTR strFileName)
{
	static BYTE parms[] =
		VTS_BSTR;
	InvokeHelper(0x3, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 strFileName);
}

void CUCLIDMCRTextViewer::clear()
{
	InvokeHelper(0x4, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

void CUCLIDMCRTextViewer::parseText()
{
	InvokeHelper(0x5, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

void CUCLIDMCRTextViewer::enableTextSelection(long ulValue)
{
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x6, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 ulValue);
}

CString CUCLIDMCRTextViewer::getEntityText(long ulTextEntityID)
{
	CString result;
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x7, DISPATCH_METHOD, VT_BSTR, (void*)&result, parms,
		ulTextEntityID);
	return result;
}

void CUCLIDMCRTextViewer::pasteTextFromClipboard()
{
	InvokeHelper(0x8, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

void CUCLIDMCRTextViewer::copyTextToClipboard()
{
	InvokeHelper(0x9, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

void CUCLIDMCRTextViewer::setTextFontName(LPCTSTR strFontName)
{
	static BYTE parms[] =
		VTS_BSTR;
	InvokeHelper(0xa, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 strFontName);
}

CString CUCLIDMCRTextViewer::getTextFontName()
{
	CString result;
	InvokeHelper(0xb, DISPATCH_METHOD, VT_BSTR, (void*)&result, NULL);
	return result;
}

void CUCLIDMCRTextViewer::setTextSize(long ulTextSize)
{
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0xc, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 ulTextSize);
}

long CUCLIDMCRTextViewer::getTextSize()
{
	long result;
	InvokeHelper(0xd, DISPATCH_METHOD, VT_I4, (void*)&result, NULL);
	return result;
}

void CUCLIDMCRTextViewer::increaseTextSize()
{
	InvokeHelper(0xe, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

void CUCLIDMCRTextViewer::decreaseTextSize()
{
	InvokeHelper(0xf, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

void CUCLIDMCRTextViewer::appendTextFromClipboard()
{
	InvokeHelper(0x10, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

void CUCLIDMCRTextViewer::setText(LPCTSTR strNewText)
{
	static BYTE parms[] =
		VTS_BSTR;
	InvokeHelper(0x11, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 strNewText);
}

void CUCLIDMCRTextViewer::appendText(LPCTSTR strNewText)
{
	static BYTE parms[] =
		VTS_BSTR;
	InvokeHelper(0x12, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 strNewText);
}

long CUCLIDMCRTextViewer::isModified()
{
	long result;
	InvokeHelper(0x13, DISPATCH_METHOD, VT_I4, (void*)&result, NULL);
	return result;
}

void CUCLIDMCRTextViewer::print()
{
	InvokeHelper(0x14, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

CString CUCLIDMCRTextViewer::getFileName()
{
	CString result;
	InvokeHelper(0x15, DISPATCH_METHOD, VT_BSTR, (void*)&result, NULL);
	return result;
}

void CUCLIDMCRTextViewer::setEntityText(long ulTextEntityID, LPCTSTR strNewText)
{
	static BYTE parms[] =
		VTS_I4 VTS_BSTR;
	InvokeHelper(0x16, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 ulTextEntityID, strNewText);
}

void CUCLIDMCRTextViewer::setTextHighlightColor(long ulTextEntityID, unsigned long newTextHighlightColor)
{
	static BYTE parms[] =
		VTS_I4 VTS_I4;
	InvokeHelper(0x17, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 ulTextEntityID, newTextHighlightColor);
}

long CUCLIDMCRTextViewer::isEntityIDValid(long lEntityID)
{
	long result;
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x18, DISPATCH_METHOD, VT_I4, (void*)&result, parms,
		lEntityID);
	return result;
}

void CUCLIDMCRTextViewer::setInputFinder(LPUNKNOWN pInputFinder)
{
	static BYTE parms[] =
		VTS_UNKNOWN;
	InvokeHelper(0x19, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 pInputFinder);
}

unsigned long CUCLIDMCRTextViewer::getEntityColor(long ulTextEntityID)
{
	unsigned long result;
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x1a, DISPATCH_METHOD, VT_I4, (void*)&result, parms,
		ulTextEntityID);
	return result;
}

void CUCLIDMCRTextViewer::setEntityColor(long ulTextEntityID, unsigned long newTextColor)
{
	static BYTE parms[] =
		VTS_I4 VTS_I4;
	InvokeHelper(0x1b, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 ulTextEntityID, newTextColor);
}

CString CUCLIDMCRTextViewer::getText()
{
	CString result;
	InvokeHelper(0x1c, DISPATCH_METHOD, VT_BSTR, (void*)&result, NULL);
	return result;
}

CString CUCLIDMCRTextViewer::getSelectedText()
{
	CString result;
	InvokeHelper(0x1d, DISPATCH_METHOD, VT_BSTR, (void*)&result, NULL);
	return result;
}
