// Machine generated IDispatch wrapper class(es) created by Microsoft Visual C++

// NOTE: Do not modify the contents of this file.  If this class is regenerated by
//  Microsoft Visual C++, your modifications will be overwritten.


#include "stdafx.h"
#include "inputmanager.h"

// Dispatch interfaces referenced by this interface
#include "iunknownvector.h"
#include "inputreceiver.h"

/////////////////////////////////////////////////////////////////////////////
// CInputManager

IMPLEMENT_DYNCREATE(CInputManager, CWnd)

/////////////////////////////////////////////////////////////////////////////
// CInputManager properties

/////////////////////////////////////////////////////////////////////////////
// CInputManager operations

BOOL CInputManager::GetWindowsShown()
{
	BOOL result;
	InvokeHelper(0x1, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

BOOL CInputManager::GetInputIsEnabled()
{
	BOOL result;
	InvokeHelper(0x2, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

void CInputManager::EnableInput1(LPCTSTR strInputValidatorName, LPCTSTR strPrompt)
{
	static BYTE parms[] =
		VTS_BSTR VTS_BSTR;
	InvokeHelper(0x4, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 strInputValidatorName, strPrompt);
}

void CInputManager::EnableInput2(LPDISPATCH pInputValidator, LPCTSTR strPrompt)
{
	static BYTE parms[] =
		VTS_DISPATCH VTS_BSTR;
	InvokeHelper(0x5, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 pInputValidator, strPrompt);
}

void CInputManager::DisableInput()
{
	InvokeHelper(0x6, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

CIUnknownVector CInputManager::DetectInputReceivers()
{
	LPDISPATCH pDispatch;
	InvokeHelper(0x7, DISPATCH_METHOD, VT_DISPATCH, (void*)&pDispatch, NULL);
	return CIUnknownVector(pDispatch);
}

CIUnknownVector CInputManager::DetectInputValidators()
{
	LPDISPATCH pDispatch;
	InvokeHelper(0x8, DISPATCH_METHOD, VT_DISPATCH, (void*)&pDispatch, NULL);
	return CIUnknownVector(pDispatch);
}

long CInputManager::CreateNewInputReceiver(LPCTSTR strInputReceiverName)
{
	long result;
	static BYTE parms[] =
		VTS_BSTR;
	InvokeHelper(0x9, DISPATCH_METHOD, VT_I4, (void*)&result, parms,
		strInputReceiverName);
	return result;
}

long CInputManager::ConnectInputReceiver(LPDISPATCH pInputReceiver)
{
	long result;
	static BYTE parms[] =
		VTS_DISPATCH;
	InvokeHelper(0xa, DISPATCH_METHOD, VT_I4, (void*)&result, parms,
		pInputReceiver);
	return result;
}

void CInputManager::DisconnectInputReceiver(long nIRHandle)
{
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0xb, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 nIRHandle);
}

CInputReceiver CInputManager::GetInputReceiver(long nIRHandle)
{
	LPDISPATCH pDispatch;
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0xc, DISPATCH_METHOD, VT_DISPATCH, (void*)&pDispatch, parms,
		nIRHandle);
	return CInputReceiver(pDispatch);
}

void CInputManager::ShowWindows(BOOL bShow)
{
	static BYTE parms[] =
		VTS_BOOL;
	InvokeHelper(0xd, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 bShow);
}

void CInputManager::Destroy()
{
	InvokeHelper(0xe, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}
