/////////////////////////////////////////////////////////////////////////////
//                                                                            
//  File Name:    Setup.rul                                                   
//                                                                            
//  Description:  InstallShield script                                          
//                                                                            
//  Comments:     This minimal project is intended for advanced users. 
//                To create a robust project with step-by-step 
//				  instructions, use the Project Wizard. 
//                                                                                                               
/////////////////////////////////////////////////////////////////////////////

// Include header files /////////////////////////////////////////////////////
#include "ifx.h"

#include "..\..\..\..\..\..\ProductDevelopment\Common\InstallScripts\Common.rul"

////////////////////// string defines ////////////////////////////
    #define EXTRACT_DIR "\\Extract Systems\\CommonComponents"
    #define REG_PATH_UNINSTALL "\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Uninstall"
	#define IDSHIELD_PRODUCT_CODE "{158160CD-7B55-462F-8477-7E18B2937D40}"
    #define FLEX_INDEX_PRODUCT_CODE "{A7DFE34D-A07E-4D57-A624-B758E42A69D4}"
    #define LOG_FILE_PATH CommonAppDataFolder ^ "\\Extract Systems\\LogFiles\\Misc"
    #define EXCEPTION_FILE_NAME "ExtractException.uex"

//////////////////// installation declarations ///////////////////

    // In order to have your InstallScript function executed as a custom
    // action by the Windows Installer, it must be prototyped as an 
    // entry-point function.

    // The keyword export identifies MyFunction() as an entry-point function.
    // The argument it accepts must be a handle to the Installer database.
    
      /* export prototype MyFunction(HWND); */  

    // To Do:  Declare global variables, define constants, and prototype user-
    //         defined and DLL functions here.

// control identifiers
#define BUTTON_NEXT    1
#define BUTTON_BACK   12
//#define BUTTON_CANCEL  9
#define RG_REMOVE_OLD 1204


// ----- DLL function prototypes -----


    // your DLL function prototypes


// ---- script function prototypes -----


    // your script function prototypes    
    prototype NUMBER ConfirmDriverUpdate();
    prototype install64SentinelDriversIfRequired();



///////////////////////////////////////////////////////////////////////////////
//                                                                           
//  FUNCTION:   OnFirstUIBefore                                            
//                                                                           
//  EVENT:      FirstUIBefore event is sent when installation is run for the first
//              time on given machine. In the handler installation usually displays
//              UI allowing end user to specify installation parameters. After this
//              function returns, ComponentTransferData is called to perform file
//              transfer.
//                                                                           
///////////////////////////////////////////////////////////////////////////////
function OnFirstUIBefore()
    NUMBER nResult, nSetupType, nvSize, nUser;
    NUMBER bOpt1, bOpt2;
    STRING szTitle, szMsg, szQuestion, svName, svCompany, szFile;
    STRING szLicenseFile;
    STRING szMsg1;
    LIST list, listStartCopy;
    BOOL bCustom; 
    STRING szOldDriverFound;
    STRING szOldDriverRemoved;
    INT    nSize;

begin	        
    gbInstalled = FALSE;
    // TO DO: if you want to enable background, window title, and caption bar title                                                                   
    // SetTitle( @PRODUCT_NAME, 24, WHITE );                                        
    // SetTitle( @PRODUCT_NAME, 0, BACKGROUNDCAPTION ); 	                  
    // Enable( FULLWINDOWMODE );						   
    // Enable( BACKGROUND );							  
    // SetColor(BACKGROUND,RGB (0, 128, 128));					   
 
 	// make sure the user has administrative privilege
	if (Is(USER_ADMINISTRATOR, "") <= 0) then
		MessageBox("You must have administrative privileges on this computer to install the software package. Setup will terminate.", WARNING);
		abort;
	endif;

	DetectDotNET_40();
	
	CheckOtherExtractProducts();
	
    SHELL_OBJECT_FOLDER = @PRODUCT_NAME;	   
    
    nSetupType = TYPICAL;	

Dlg_SdWelcome:
    szTitle = "";
    szMsg   = "";
    nResult = SdWelcome(szTitle, szMsg);
    if (nResult = BACK) goto Dlg_SdWelcome;
	
    szTitle   = "";
    svName    = "";
    svCompany = "";

Dlg_ConfirmDriverUpdate:
	// This will set property OLDDRIVERFOUND to TRUE
	MsiDoAction(ISMSI_HANDLE, "RemoveOldDriver.B391C18A_6953_11D4_82CB_00D0B72E1DB9");
	nSize = 127;
	MsiGetProperty(ISMSI_HANDLE, "OLDDRIVERFOUND", szOldDriverFound, nSize);
	if ( szOldDriverFound = "TRUE" ) then
		nResult = ConfirmDriverUpdate();
		if nResult = BACK goto Dlg_SdWelcome;
	endif;
    
//Dlg_SdLicense:
//	nResult = SdLicense2(szTitle, "", "", "License.txt", FALSE);
//	if nResult = BACK goto Dlg_SdWelcome;


    // setup default status
    Enable(STATUSEX);
    gbInstalled = TRUE;
 
    return 0;
end;

///////////////////////////////////////////////////////////////////////////////
//
//  FUNCTION:   OnFirstUIAfter
//
//  EVENT:      FirstUIAfter event is sent after file transfer, when installation 
//              is run for the first time on given machine. In this event handler 
//              installation usually displays UI that will inform end user that
//              installation has been completed successfully.
//
///////////////////////////////////////////////////////////////////////////////
function OnFirstUIAfter()
    STRING szTitle, szMsg1, szMsg2, szOption1, szOption2, szRegAllCmdLine, szCmd;
    BOOL bOpt1, bOpt2;
begin
	// Rename existing UCLIDException file
 	RenameUEXFile();
 	
	// Install the 64 bit drivers if required	
	//install64SentinelDriversIfRequired();

    // Register Dlls
	szRegAllCmdLine = "\"" + PROGRAMFILES + EXTRACT_DIR + "\\RegisterAll.bat\"";
	szCmd = "cmd";
	LaunchAppAndWait( szRegAllCmdLine, "/s", LAAW_OPTION_WAIT | LAAW_OPTION_HIDDEN | LAAW_OPTION_SHOW_HOURGLASS );
   
    Disable(STATUSEX);

	if ( gbInstalled ) then
		szMsg1 = SdLoadString(IFX_SDFINISH_MSG1);   
	    SdFinishEx(szTitle, szMsg1, szMsg2, szOption1, szOption2, bOpt1, bOpt2);
	else
		szMsg1 = "Installation was unable to complete, because does not have administrative privileges.";
		SdFinish(szTitle, szMsg1, "Click Finish to exit.", "", "", bOpt1, bOpt2);
	endif;
end; 
   

//---------------------------------------------------------------------------
// OnMaintUIAfter
//
// The OnMaintUIAfter event called by the framework after the file transfer
// of the setup when the setup is running in maintenance mode. By default
// this event displays UI that informs the end user that the maintenance setup
// has been completed successfully.
//---------------------------------------------------------------------------
function OnMaintUIAfter()
	STRING szTitle, szMsg1, szMsg2, szOption1, szOption2;
	NUMBER bOpt1, bOpt2;
begin
    if ( REMOVEALLMODE) then
		ALLUSERS = 1;
		
		// Remove the Extract Systems LM menu folder
		DeleteDir( StartMenuFolder ^ "Programs\\Extract Systems LM", ALLCONTENTS); 
		DeleteDir( StartMenuFolder ^ "Programs\\Extract Systems LM", ALLCONTENTS);
    	
    	// Delete all lst files
    	DeleteFile(PROGRAMFILES + EXTRACT_DIR + "\\*.LST");
    endif;
    
	Disable(STATUSEX);

	bOpt1   = FALSE;
	bOpt2   = FALSE;
    
	// Added - Version 9.5 - Use appropriate strings for complete
    // uninstall.
    if( REMOVEALLMODE ) then
        szTitle = SdLoadString(IFX_SDFINISH_REMOVE_TITLE);
        szMsg1 = SdLoadString(IFX_SDFINISH_REMOVE_MSG1);
    else
        szTitle = SdLoadString(IFX_SDFINISH_MAINT_TITLE);    
        szMsg1  = SdLoadString(IFX_SDFINISH_MAINT_MSG1);
    endif;

	SdFinishEx(szTitle, szMsg1, szMsg2, szOption1, szOption2, bOpt1, bOpt2);
end;
  
//////////////////////////////////////////////////////////////////////////////
//
//  FUNCTION:   OnBegin
//
//  EVENT:      Begin event is always sent as the first event during installation.
//
//////////////////////////////////////////////////////////////////////////////
function OnBegin()
begin
	// get SDK root directory
end;

// --- include script file section ---
//////////////////////////////////////////////////////////////////////////////
//
//  FUNCTION:   ConfirmDriverUpdate
//
//  PURPOSE:    To display and mangage the display dialog to confirm driver upgrade
//				if an older version of the driver is installed.
//
//////////////////////////////////////////////////////////////////////////////
function NUMBER ConfirmDriverUpdate( )
	BOOL bDone;
	NUMBER nControl;
	NUMBER nReturn;    
	STRING szConfirmUpgrade;
	STRING szOldDriverRemoved;
    INT    nSize;
begin
    EzDefineDialog(
    	"ConfirmDriverUpdate",  // nickname for dialog
    	ISUSER,          // DLL containing the dialog's resources
    	"ConfirmDriverUpdate",  // name of dialog in Dialogs view
    	0); 
       		             // numeric resource ID for dialog; not used here
       		             
	bDone = FALSE;
	while (!bDone)

		nControl = WaitOnDialog("ConfirmDriverUpdate");

		switch (nControl)

    	case BUTTON_BACK:
        	// user clicked Back
        	nReturn = BUTTON_BACK;
        	bDone = TRUE;

    	case BUTTON_NEXT:
       		// user clicked Upgrade ( which acts like next
       		nReturn = BUTTON_NEXT;
    		MsiDoAction(ISMSI_HANDLE, "SetCONFIRMUPGRADE.B391C18A_6953_11D4_82CB_00D0B72E1DB9");
    		// Get the CONFIRMUPGRADE.B391C18A_6953_11D4_82CB_00D0B72E1DB9 Property 
			nSize = 127;
			MsiGetProperty(ISMSI_HANDLE, "CONFIRMUPGRADE.B391C18A_6953_11D4_82CB_00D0B72E1DB9", szConfirmUpgrade, nSize);
			// Set the CONFIMRUPGRADE property to the value of the merge module value		
			MsiSetProperty(ISMSI_HANDLE, "CONFIRMUPGRADE", szConfirmUpgrade);
			// Remove the old driver
       		MsiDoAction(ISMSI_HANDLE, "RemoveOldDriverAgain.B391C18A_6953_11D4_82CB_00D0B72E1DB9");
        	bDone = TRUE;

    	case BUTTON_CANCEL:
        	// user clicked Cancel; ask user to verify cancellation
        	Do(EXIT);

		endswitch;

	endwhile;
	EndDialog("ConfirmDriverUpdate");
	ReleaseDialog("ConfirmDriverUpdate");

end;


//////////////////////////////////////////////////////////////////////////////
//
//  FUNCTION:   install64SentinelDriversIfRequired
//
//  PURPOSE:    To check if the system is 64 bit and install the correct drivers
//				if it is
//
//////////////////////////////////////////////////////////////////////////////

function install64SentinelDriversIfRequired()
	INT    nSize;    
	STRING szVerValue;
	STRING szProgram;
begin 
	nSize = 127;
	// Get the 64 bit OS Version -- if null it is not 64 bit
	MsiGetProperty(ISMSI_HANDLE,"VersionNT64", szVerValue, nSize);
	if ( StrLength (szVerValue) > 0 ) then
		// Run the Sentinel 64 driver install
		szProgram = SUPPORTDIR  ^ "\\Sentinel Protection Installer 7.5.0.exe";
		LaunchAppAndWait(szProgram, "", LAAW_OPTION_WAIT); 
	endif;
end;




// --- include script file section ---
