
#include "stdafx.h"
#include "UnknownMeasurement.hpp"

using namespace std;

AbstractMeasurement::EType UnknownMeasurement::getType() const
{
	return AbstractMeasurement::kUnknown; 
}
//--------------------------------------------------------------------------------------------------
const string& UnknownMeasurement::getTypeAsString() const
{
	static string strType = "Unknown";
	return strType;
}
//--------------------------------------------------------------------------------------------------
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
AbstractMeasurement* UnknownMeasurement::createNew()
{
	return new UnknownMeasurement();
}
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void UnknownMeasurement::evaluate(const char *pszText)
{
	strEvaluatedString = pszText;
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

bool UnknownMeasurement::isValid(void)
{
	return true;
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

vector<string> UnknownMeasurement::getAlternateStrings(void)
{
	vector<string> vecReturnVal;
	vecReturnVal.push_back(strEvaluatedString);
	return vecReturnVal;
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

string UnknownMeasurement::asString(void)
{
	return strEvaluatedString;
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void UnknownMeasurement::resetVariables()
{

}
