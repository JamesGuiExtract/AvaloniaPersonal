//---------------------------------------------------------------------------------------------------
// <auto-generated>
//    This code was generated by T4Model template for T4 (https://github.com/linq2db/linq2db).
//    Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
// </auto-generated>
//---------------------------------------------------------------------------------------------------

#pragma warning disable 1591

using System;
using System.Collections.Generic;
using System.Linq;

using LinqToDB;
using LinqToDB.Configuration;
using LinqToDB.Mapping;

namespace LabDEOrderMappingInvestigator.SqliteModels
{
	/// <summary>
	/// Database       : OrderMappingDB
	/// Data Source    : OrderMappingDB
	/// Server Version : 3.24.0
	/// </summary>
	public partial class CustomerOrderMappingDB : LinqToDB.Data.DataConnection
	{
		public ITable<AlternateTestName>         AlternateTestNames         { get { return this.GetTable<AlternateTestName>(); } }
		public ITable<AlternateTestNameSource>   AlternateTestNameSources   { get { return this.GetTable<AlternateTestNameSource>(); } }
		public ITable<AlternateTestNameStatus>   AlternateTestNameStatus    { get { return this.GetTable<AlternateTestNameStatus>(); } }
		public ITable<ComponentToESComponentMap> ComponentToESComponentMaps { get { return this.GetTable<ComponentToESComponentMap>(); } }
		public ITable<DisabledESComponentAKA>    DisabledESComponentAkas    { get { return this.GetTable<DisabledESComponentAKA>(); } }
		public ITable<Flag>                      Flags                      { get { return this.GetTable<Flag>(); } }
		public ITable<FlagTranslation>           FlagTranslations           { get { return this.GetTable<FlagTranslation>(); } }
		public ITable<Gender>                    Genders                    { get { return this.GetTable<Gender>(); } }
		public ITable<LabAddress>                LabAddresses               { get { return this.GetTable<LabAddress>(); } }
		public ITable<LabOrder>                  LabOrders                  { get { return this.GetTable<LabOrder>(); } }
		public ITable<LabOrderTest>              LabOrderTests              { get { return this.GetTable<LabOrderTest>(); } }
		public ITable<LabTest>                   LabTests                   { get { return this.GetTable<LabTest>(); } }
		public ITable<OrderDerivedFromESOrder>   OrderDerivedFromESOrders   { get { return this.GetTable<OrderDerivedFromESOrder>(); } }
		public ITable<Physician>                 Physicians                 { get { return this.GetTable<Physician>(); } }
		public ITable<PriorityPatient>           PriorityPatients           { get { return this.GetTable<PriorityPatient>(); } }
		public ITable<Setting>                   Settings                   { get { return this.GetTable<Setting>(); } }
		public ITable<SmartTag>                  SmartTags                  { get { return this.GetTable<SmartTag>(); } }
		public ITable<Unit>                      Units                      { get { return this.GetTable<Unit>(); } }

		public CustomerOrderMappingDB()
		{
			InitDataContext();
			InitMappingSchema();
		}

		public CustomerOrderMappingDB(string configuration)
			: base(configuration)
		{
			InitDataContext();
			InitMappingSchema();
		}

		public CustomerOrderMappingDB(LinqToDbConnectionOptions options)
			: base(options)
		{
			InitDataContext();
			InitMappingSchema();
		}

		public CustomerOrderMappingDB(LinqToDbConnectionOptions<CustomerOrderMappingDB> options)
			: base(options)
		{
			InitDataContext();
			InitMappingSchema();
		}

		partial void InitDataContext  ();
		partial void InitMappingSchema();
	}

	[Table("AlternateTestName")]
	public partial class AlternateTestName
	{
		[Column,     NotNull ] public string Name       { get; set; } // nvarchar(255)
		[Column,     NotNull ] public string TestCode   { get; set; } // nvarchar(255)
		[Column,     NotNull ] public char   StatusCode { get; set; } // nvarchar(1)
		[PrimaryKey, Identity] public long   ID         { get; set; } // integer

		#region Associations

		/// <summary>
		/// FK_AlternateTestNameSource_0_0_BackReference
		/// </summary>
		[Association(ThisKey="ID", OtherKey="AlternateTestNameID", CanBeNull=true, Relationship=LinqToDB.Mapping.Relationship.OneToMany, IsBackReference=true)]
		public IEnumerable<AlternateTestNameSource> AlternateTestNameSources { get; set; }

		/// <summary>
		/// FK_AlternateTestName_0_0
		/// </summary>
		[Association(ThisKey="StatusCode", OtherKey="Code", CanBeNull=false, Relationship=LinqToDB.Mapping.Relationship.ManyToOne, KeyName="FK_AlternateTestName_0_0", BackReferenceName="AlternateTestNames")]
		public AlternateTestNameStatus AlternateTestNameStatus { get; set; }

		/// <summary>
		/// FK_AlternateTestName_1_0
		/// </summary>
		[Association(ThisKey="TestCode", OtherKey="TestCode", CanBeNull=false, Relationship=LinqToDB.Mapping.Relationship.ManyToOne, KeyName="FK_AlternateTestName_1_0", BackReferenceName="AlternateTestNames")]
		public LabTest LabTest { get; set; }

		#endregion
	}

	[Table("AlternateTestNameSource")]
	public partial class AlternateTestNameSource
	{
		[PrimaryKey, Identity   ] public long   ID                  { get; set; } // integer
		[Column,     NotNull    ] public long   AlternateTestNameID { get; set; } // bigint
		[Column,        Nullable] public string FileName            { get; set; } // nvarchar(260)
		[Column,        Nullable] public int?   Page                { get; set; } // int
		[Column,        Nullable] public int?   StartX              { get; set; } // int
		[Column,        Nullable] public int?   StartY              { get; set; } // int
		[Column,        Nullable] public int?   EndX                { get; set; } // int
		[Column,        Nullable] public int?   EndY                { get; set; } // int
		[Column,        Nullable] public int?   Height              { get; set; } // int

		#region Associations

		/// <summary>
		/// FK_AlternateTestNameSource_0_0
		/// </summary>
		[Association(ThisKey="AlternateTestNameID", OtherKey="ID", CanBeNull=false, Relationship=LinqToDB.Mapping.Relationship.ManyToOne, KeyName="FK_AlternateTestNameSource_0_0", BackReferenceName="AlternateTestNameSources")]
		public AlternateTestName AlternateTestName { get; set; }

		#endregion
	}

	[Table("AlternateTestNameStatus")]
	public partial class AlternateTestNameStatus
	{
		[PrimaryKey, NotNull] public char   Code        { get; set; } // nvarchar(1)
		[Column,     NotNull] public string Description { get; set; } // nvarchar(25)

		#region Associations

		/// <summary>
		/// FK_AlternateTestName_0_0_BackReference
		/// </summary>
		[Association(ThisKey="Code", OtherKey="StatusCode", CanBeNull=true, Relationship=LinqToDB.Mapping.Relationship.OneToMany, IsBackReference=true)]
		public IEnumerable<AlternateTestName> AlternateTestNames { get; set; }

		#endregion
	}

	[Table("ComponentToESComponentMap")]
	public partial class ComponentToESComponentMap
	{
		[PrimaryKey(0), NotNull] public string ComponentCode   { get; set; } // nvarchar(255)
		[PrimaryKey(1), NotNull] public string ESComponentCode { get; set; } // nvarchar(50)

		#region Associations

		/// <summary>
		/// FK_ComponentToESComponentMap_0_0
		/// </summary>
		[Association(ThisKey="ComponentCode", OtherKey="TestCode", CanBeNull=false, Relationship=LinqToDB.Mapping.Relationship.ManyToOne, KeyName="FK_ComponentToESComponentMap_0_0", BackReferenceName="ComponentToESComponentMaps")]
		public LabTest LabTest { get; set; }

		#endregion
	}

	[Table("DisabledESComponentAKA")]
	public partial class DisabledESComponentAKA
	{
		[PrimaryKey(0), NotNull] public string ESComponentCode { get; set; } // nvarchar(50)
		[PrimaryKey(1), NotNull] public string ESComponentAKA  { get; set; } // nvarchar(500)
	}

	[Table("Flag")]
	public partial class Flag
	{
		[Column("Flag"), PrimaryKey, NotNull] public string FlagColumn { get; set; } // nvarchar(25)

		#region Associations

		/// <summary>
		/// FK_FlagTranslation_0_0_BackReference
		/// </summary>
		[Association(ThisKey="FlagColumn", OtherKey="Flag", CanBeNull=true, Relationship=LinqToDB.Mapping.Relationship.OneToMany, IsBackReference=true)]
		public IEnumerable<FlagTranslation> FlagTranslations { get; set; }

		#endregion
	}

	[Table("FlagTranslation")]
	public partial class FlagTranslation
	{
		[PrimaryKey, NotNull    ] public string ESFlagCode { get; set; } // nvarchar(25)
		[Column,        Nullable] public string Flag       { get; set; } // nvarchar(25)

		#region Associations

		/// <summary>
		/// FK_FlagTranslation_0_0
		/// </summary>
		[Association(ThisKey="Flag", OtherKey="FlagColumn", CanBeNull=true, Relationship=LinqToDB.Mapping.Relationship.ManyToOne, KeyName="FK_FlagTranslation_0_0", BackReferenceName="FlagTranslations")]
		public Flag FkFlagTranslation00 { get; set; }

		#endregion
	}

	[Table("Gender")]
	public partial class Gender
	{
		[Column("Gender"), PrimaryKey, NotNull] public char GenderColumn { get; set; } // nvarchar(1)
	}

	[Table("LabAddresses")]
	public partial class LabAddress
	{
		[Column,     NotNull    ] public string LabCode  { get; set; } // nvarchar(25)
		[Column,        Nullable] public string Address1 { get; set; } // nvarchar(50)
		[Column,        Nullable] public string City     { get; set; } // nvarchar(50)
		[Column,        Nullable] public string State    { get; set; } // nvarchar(25)
		[Column,        Nullable] public string Zip      { get; set; } // nvarchar(10)
		[Column,        Nullable] public string LabName  { get; set; } // nvarchar(100)
		[PrimaryKey, Identity   ] public long   LabID    { get; set; } // integer
	}

	[Table("LabOrder")]
	public partial class LabOrder
	{
		[PrimaryKey, NotNull    ] public string Code              { get; set; } // nvarchar(25)
		[Column,     NotNull    ] public string Name              { get; set; } // nvarchar(255)
		[Column,        Nullable] public string TieBreaker        { get; set; } // nvarchar(255)
		[Column,        Nullable] public int?   FilledRequirement { get; set; } // int
		[Column,        Nullable] public string Comment           { get; set; } // nvarchar(500)

		#region Associations

		/// <summary>
		/// FK_LabOrderTest_1_0_BackReference
		/// </summary>
		[Association(ThisKey="Code", OtherKey="OrderCode", CanBeNull=true, Relationship=LinqToDB.Mapping.Relationship.OneToMany, IsBackReference=true)]
		public IEnumerable<LabOrderTest> LabOrderTests { get; set; }

		/// <summary>
		/// FK_OrderDerivedFromESOrder_0_0_BackReference
		/// </summary>
		[Association(ThisKey="Code", OtherKey="OrderCode", CanBeNull=true, Relationship=LinqToDB.Mapping.Relationship.OneToMany, IsBackReference=true)]
		public IEnumerable<OrderDerivedFromESOrder> OrderDerivedFromESOrders { get; set; }

		#endregion
	}

	[Table("LabOrderTest")]
	public partial class LabOrderTest
	{
		[Column, NotNull] public string OrderCode { get; set; } // nvarchar(25)
		[Column, NotNull] public string TestCode  { get; set; } // nvarchar(255)
		[Column, NotNull] public bool   Mandatory { get; set; } // bit

		#region Associations

		/// <summary>
		/// FK_LabOrderTest_1_0
		/// </summary>
		[Association(ThisKey="OrderCode", OtherKey="Code", CanBeNull=false, Relationship=LinqToDB.Mapping.Relationship.ManyToOne, KeyName="FK_LabOrderTest_1_0", BackReferenceName="LabOrderTests")]
		public LabOrder LabOrder { get; set; }

		/// <summary>
		/// FK_LabOrderTest_0_0
		/// </summary>
		[Association(ThisKey="TestCode", OtherKey="TestCode", CanBeNull=false, Relationship=LinqToDB.Mapping.Relationship.ManyToOne, KeyName="FK_LabOrderTest_0_0", BackReferenceName="LabOrderTests")]
		public LabTest LabTest { get; set; }

		#endregion
	}

	[Table("LabTest")]
	public partial class LabTest
	{
		[PrimaryKey, NotNull    ] public string TestCode     { get; set; } // nvarchar(255)
		[Column,     NotNull    ] public string OfficialName { get; set; } // nvarchar(255)
		[Column,        Nullable] public string Unit         { get; set; } // nvarchar(50)
		[Column,        Nullable] public string Comment      { get; set; } // nvarchar(500)

		#region Associations

		/// <summary>
		/// FK_AlternateTestName_1_0_BackReference
		/// </summary>
		[Association(ThisKey="TestCode", OtherKey="TestCode", CanBeNull=true, Relationship=LinqToDB.Mapping.Relationship.OneToMany, IsBackReference=true)]
		public IEnumerable<AlternateTestName> AlternateTestNames { get; set; }

		/// <summary>
		/// FK_ComponentToESComponentMap_0_0_BackReference
		/// </summary>
		[Association(ThisKey="TestCode", OtherKey="ComponentCode", CanBeNull=true, Relationship=LinqToDB.Mapping.Relationship.OneToMany, IsBackReference=true)]
		public IEnumerable<ComponentToESComponentMap> ComponentToESComponentMaps { get; set; }

		/// <summary>
		/// FK_LabOrderTest_0_0_BackReference
		/// </summary>
		[Association(ThisKey="TestCode", OtherKey="TestCode", CanBeNull=true, Relationship=LinqToDB.Mapping.Relationship.OneToMany, IsBackReference=true)]
		public IEnumerable<LabOrderTest> LabOrderTests { get; set; }

		#endregion
	}

	[Table("OrderDerivedFromESOrder")]
	public partial class OrderDerivedFromESOrder
	{
		[PrimaryKey(0), NotNull] public string OrderCode   { get; set; } // nvarchar(25)
		[PrimaryKey(1), NotNull] public string ESOrderCode { get; set; } // nvarchar(50)

		#region Associations

		/// <summary>
		/// FK_OrderDerivedFromESOrder_0_0
		/// </summary>
		[Association(ThisKey="OrderCode", OtherKey="Code", CanBeNull=false, Relationship=LinqToDB.Mapping.Relationship.ManyToOne, KeyName="FK_OrderDerivedFromESOrder_0_0", BackReferenceName="OrderDerivedFromESOrders")]
		public LabOrder LabOrder { get; set; }

		#endregion
	}

	[Table("Physician")]
	public partial class Physician
	{
		[PrimaryKey, NotNull    ] public string Code       { get; set; } // nvarchar(8)
		[Column,        Nullable] public string LastName   { get; set; } // nvarchar(50)
		[Column,        Nullable] public string FirstName  { get; set; } // nvarchar(30)
		[Column,        Nullable] public string MiddleName { get; set; } // nvarchar(30)
	}

	[Table("PriorityPatient")]
	public partial class PriorityPatient
	{
		[Column,     NotNull ] public string   First { get; set; } // nvarchar(64)
		[Column,     NotNull ] public string   Last  { get; set; } // nvarchar(64)
		[Column,     NotNull ] public DateTime DOB   { get; set; } // datetime
		[PrimaryKey, Identity] public long     ID    { get; set; } // integer
	}

	[Table("Settings")]
	public partial class Setting
	{
		[PrimaryKey, NotNull    ] public string Name  { get; set; } // nvarchar(100)
		[Column,        Nullable] public string Value { get; set; } // nvarchar(512)
	}

	[Table("SmartTag")]
	public partial class SmartTag
	{
		[PrimaryKey, NotNull    ] public string TagName  { get; set; } // nvarchar(16)
		[Column,        Nullable] public string TagValue { get; set; } // nvarchar(4000)
	}

	[Table("Unit")]
	public partial class Unit
	{
		[Column("Unit"), NotNull             ] public string UnitColumn { get; set; } // nvarchar(50)
		[Column(),       PrimaryKey, Identity] public long   ID         { get; set; } // integer
	}

	public static partial class TableExtensions
	{
		public static AlternateTestName Find(this ITable<AlternateTestName> table, long ID)
		{
			return table.FirstOrDefault(t =>
				t.ID == ID);
		}

		public static AlternateTestNameSource Find(this ITable<AlternateTestNameSource> table, long ID)
		{
			return table.FirstOrDefault(t =>
				t.ID == ID);
		}

		public static AlternateTestNameStatus Find(this ITable<AlternateTestNameStatus> table, char Code)
		{
			return table.FirstOrDefault(t =>
				t.Code == Code);
		}

		public static ComponentToESComponentMap Find(this ITable<ComponentToESComponentMap> table, string ComponentCode, string ESComponentCode)
		{
			return table.FirstOrDefault(t =>
				t.ComponentCode   == ComponentCode &&
				t.ESComponentCode == ESComponentCode);
		}

		public static DisabledESComponentAKA Find(this ITable<DisabledESComponentAKA> table, string ESComponentCode, string ESComponentAKA)
		{
			return table.FirstOrDefault(t =>
				t.ESComponentCode == ESComponentCode &&
				t.ESComponentAKA  == ESComponentAKA);
		}

		public static Flag Find(this ITable<Flag> table, string FlagColumn)
		{
			return table.FirstOrDefault(t =>
				t.FlagColumn == FlagColumn);
		}

		public static FlagTranslation Find(this ITable<FlagTranslation> table, string ESFlagCode)
		{
			return table.FirstOrDefault(t =>
				t.ESFlagCode == ESFlagCode);
		}

		public static Gender Find(this ITable<Gender> table, char GenderColumn)
		{
			return table.FirstOrDefault(t =>
				t.GenderColumn == GenderColumn);
		}

		public static LabAddress Find(this ITable<LabAddress> table, long LabID)
		{
			return table.FirstOrDefault(t =>
				t.LabID == LabID);
		}

		public static LabOrder Find(this ITable<LabOrder> table, string Code)
		{
			return table.FirstOrDefault(t =>
				t.Code == Code);
		}

		public static LabTest Find(this ITable<LabTest> table, string TestCode)
		{
			return table.FirstOrDefault(t =>
				t.TestCode == TestCode);
		}

		public static OrderDerivedFromESOrder Find(this ITable<OrderDerivedFromESOrder> table, string OrderCode, string ESOrderCode)
		{
			return table.FirstOrDefault(t =>
				t.OrderCode   == OrderCode &&
				t.ESOrderCode == ESOrderCode);
		}

		public static Physician Find(this ITable<Physician> table, string Code)
		{
			return table.FirstOrDefault(t =>
				t.Code == Code);
		}

		public static PriorityPatient Find(this ITable<PriorityPatient> table, long ID)
		{
			return table.FirstOrDefault(t =>
				t.ID == ID);
		}

		public static Setting Find(this ITable<Setting> table, string Name)
		{
			return table.FirstOrDefault(t =>
				t.Name == Name);
		}

		public static SmartTag Find(this ITable<SmartTag> table, string TagName)
		{
			return table.FirstOrDefault(t =>
				t.TagName == TagName);
		}

		public static Unit Find(this ITable<Unit> table, long ID)
		{
			return table.FirstOrDefault(t =>
				t.ID == ID);
		}
	}
}

#pragma warning restore 1591
