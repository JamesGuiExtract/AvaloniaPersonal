<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <metadata name="label1.GenerateMember" type="System.Boolean, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089">
    <value>False</value>
  </metadata>
  <metadata name="label2.GenerateMember" type="System.Boolean, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089">
    <value>False</value>
  </metadata>
  <metadata name="label3.GenerateMember" type="System.Boolean, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089">
    <value>False</value>
  </metadata>
  <metadata name="groupBox1.GenerateMember" type="System.Boolean, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089">
    <value>False</value>
  </metadata>
  <metadata name="infoTip4.GenerateMember" type="System.Boolean, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089">
    <value>False</value>
  </metadata>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="infoTip4.BackgroundImage" type="System.Drawing.Bitmap, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAAABGdBTUEAALGPC/xhBQAAAJBJREFUOE+9
        j1EOwCAIQz26R/NkumHtBCTO7GMv6YZIG0yK9kEPbaJrged1Rnyw9wBrlJZXKYW3+N7NlHPuxURSvQHn
        tRcGCPqM2gawZwLQBDjTRB0/gaxGy8sGUYCdCzeotY5qB+Y3ARyA/NtJEOD/Hnv/BDBEbyKwt9HEbyI1
        wyN1k2Y0YffpJzBg6C9SugBXWzYR3RcoFQAAAABJRU5ErkJggg==
</value>
  </data>
  <data name="infoTip4.TipText" xml:space="preserve">
    <value>MICR components will only be split if there is a match for this expression
Once a match is achieved, sub-components will be identified using the following specific group names:
'Routing'
'Account'
'CheckNumber'
'Amount'
Only these group names which exist in the expression will be available to configure to be split.

NOTE: After the corresponding text is extracted from the group, all spaces and special MICR chars
will be removed in the corresponding sub-attribute

A dat file may be specified, but must be prefixed with "file://"</value>
  </data>
  <data name="fileActionManagerPathTagButton1.Image" type="System.Drawing.Bitmap, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        iVBORw0KGgoAAAANSUhEUgAAACAAAAAgCAYAAABzenr0AAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8
        YQUAAAAJcEhZcwAADsMAAA7DAcdvqGQAAAA4SURBVFhH7c4xCgAgFMPQ3v/SSkHB/QtZ8paOTSRJGlhn
        MQ1AI24AFvEGIBHoeaHnhZ5LkvRJsgGqxA/xBJK2bgAAAABJRU5ErkJggg==
</value>
  </data>
  <metadata name="label4.GenerateMember" type="System.Boolean, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089">
    <value>False</value>
  </metadata>
  <metadata name="infoTip3.GenerateMember" type="System.Boolean, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089">
    <value>False</value>
  </metadata>
  <data name="infoTip3.BackgroundImage" type="System.Drawing.Bitmap, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAAABGdBTUEAALGPC/xhBQAAAJBJREFUOE+9
        j1EOwCAIQz26R/NkumHtBCTO7GMv6YZIG0yK9kEPbaJrged1Rnyw9wBrlJZXKYW3+N7NlHPuxURSvQHn
        tRcGCPqM2gawZwLQBDjTRB0/gaxGy8sGUYCdCzeotY5qB+Y3ARyA/NtJEOD/Hnv/BDBEbyKwt9HEbyI1
        wyN1k2Y0YffpJzBg6C9SugBXWzYR3RcoFQAAAABJRU5ErkJggg==
</value>
  </data>
  <data name="infoTip3.TipText" xml:space="preserve">
    <value>The full MICR line will include spaces and letter codes to represent special MICR chars:
T = Transit (routing)
U = on-Us (account)
A = Amount
D = Dash

Components will be split only from well-formed MICR lines where both a routing number
and account number are recognized. The split out sub-attributes will have spaces and the
special chars above removed (though they may contain "?" for unrecognized chars)

Check number will be split out only in formats where it appears at the start or end of the
MICR line. There are some formats where the check number is included as part of the
account number; the check number will not be split out in these cases.

Currently, splitting out of the check amount is not supported. </value>
  </data>
  <metadata name="infoTip1.GenerateMember" type="System.Boolean, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089">
    <value>False</value>
  </metadata>
  <data name="infoTip1.BackgroundImage" type="System.Drawing.Bitmap, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAAABGdBTUEAALGPC/xhBQAAAJBJREFUOE+9
        j1EOwCAIQz26R/NkumHtBCTO7GMv6YZIG0yK9kEPbaJrged1Rnyw9wBrlJZXKYW3+N7NlHPuxURSvQHn
        tRcGCPqM2gawZwLQBDjTRB0/gaxGy8sGUYCdCzeotY5qB+Y3ARyA/NtJEOD/Hnv/BDBEbyKwt9HEbyI1
        wyN1k2Y0YffpJzBg6C9SugBXWzYR3RcoFQAAAABJRU5ErkJggg==
</value>
  </data>
  <data name="infoTip1.TipText" xml:space="preserve">
    <value>This rule will tend to recognize many random characters on a document as MICR. 

To prevent large numbers of false positives, it is recommended that only text with 3
consecutive recognized digits be returned.

NOTE: Dat files can be specified, but must be prefixed with "file://"</value>
  </data>
  <metadata name="infoTip2.GenerateMember" type="System.Boolean, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089">
    <value>False</value>
  </metadata>
  <data name="infoTip2.BackgroundImage" type="System.Drawing.Bitmap, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAAABGdBTUEAALGPC/xhBQAAAJBJREFUOE+9
        j1EOwCAIQz26R/NkumHtBCTO7GMv6YZIG0yK9kEPbaJrged1Rnyw9wBrlJZXKYW3+N7NlHPuxURSvQHn
        tRcGCPqM2gawZwLQBDjTRB0/gaxGy8sGUYCdCzeotY5qB+Y3ARyA/NtJEOD/Hnv/BDBEbyKwt9HEbyI1
        wyN1k2Y0YffpJzBg6C9SugBXWzYR3RcoFQAAAABJRU5ErkJggg==
</value>
  </data>
  <data name="_regexFilterFileNamePathTagsButton.Image" type="System.Drawing.Bitmap, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        iVBORw0KGgoAAAANSUhEUgAAACAAAAAgCAYAAABzenr0AAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8
        YQUAAAAJcEhZcwAADsMAAA7DAcdvqGQAAAA4SURBVFhH7c4xCgAgFMPQ3v/SSkHB/QtZ8paOTSRJGlhn
        MQ1AI24AFvEGIBHoeaHnhZ5LkvRJsgGqxA/xBJK2bgAAAABJRU5ErkJggg==
</value>
  </data>
</root>