//---------------------------------------------------------------------------------------------------
// <auto-generated>
//    This code was generated by T4Model template for T4 (https://github.com/linq2db/linq2db).
//    Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
// </auto-generated>
//---------------------------------------------------------------------------------------------------

#pragma warning disable 1573, 1591

using System;
using System.Collections.Generic;
using System.Linq;

using LinqToDB;
using LinqToDB.Configuration;
using LinqToDB.Mapping;

namespace Extract.Utilities.ContextTags.SqliteModels.Version3
{
	/// <summary>
	/// Database       : CustomTags
	/// Data Source    : CustomTags
	/// Server Version : 3.24.0
	/// </summary>
	public partial class CustomTagsDB : LinqToDB.Data.DataConnection
	{
		public ITable<Context>   Contexts   { get { return this.GetTable<Context>(); } }
		public ITable<CustomTag> CustomTags { get { return this.GetTable<CustomTag>(); } }
		public ITable<Setting>   Settings   { get { return this.GetTable<Setting>(); } }
		public ITable<TagValue>  TagValues  { get { return this.GetTable<TagValue>(); } }

		public CustomTagsDB()
		{
			InitDataContext();
			InitMappingSchema();
		}

		public CustomTagsDB(string configuration)
			: base(configuration)
		{
			InitDataContext();
			InitMappingSchema();
		}

		public CustomTagsDB(LinqToDBConnectionOptions options)
			: base(options)
		{
			InitDataContext();
			InitMappingSchema();
		}

		public CustomTagsDB(LinqToDBConnectionOptions<CustomTagsDB> options)
			: base(options)
		{
			InitDataContext();
			InitMappingSchema();
		}

		partial void InitDataContext  ();
		partial void InitMappingSchema();
	}

	[Table("Context")]
	public partial class Context
	{
		[PrimaryKey, Identity] public long   ID         { get; set; } // integer
		[Column,     NotNull ] public string Name       { get; set; } // nvarchar(50)
		[Column,     NotNull ] public string FPSFileDir { get; set; } // nvarchar(260)

		#region Associations

		/// <summary>
		/// FK_TagValue_1_0_BackReference (TagValue)
		/// </summary>
		[Association(ThisKey="ID", OtherKey="ContextID", CanBeNull=true)]
		public IEnumerable<TagValue> TagValues { get; set; }

		#endregion
	}

	[Table("CustomTag")]
	public partial class CustomTag
	{
		[PrimaryKey, Identity] public long   ID   { get; set; } // integer
		[Column,     NotNull ] public string Name { get; set; } // nvarchar(50)

		#region Associations

		/// <summary>
		/// FK_TagValue_0_0_BackReference (TagValue)
		/// </summary>
		[Association(ThisKey="ID", OtherKey="TagID", CanBeNull=true)]
		public IEnumerable<TagValue> TagValues { get; set; }

		#endregion
	}

	[Table("Settings")]
	public partial class Setting
	{
		[PrimaryKey, NotNull    ] public string Name  { get; set; } // nvarchar(100)
		[Column,        Nullable] public string Value { get; set; } // nvarchar(512)
	}

	[Table("TagValue")]
	public partial class TagValue
	{
		[PrimaryKey(0), NotNull] public int    ContextID { get; set; } // int
		[PrimaryKey(1), NotNull] public int    TagID     { get; set; } // int
		[PrimaryKey(2), NotNull] public string Workflow  { get; set; } // nvarchar(100)
		[Column,        NotNull] public string Value     { get; set; } // nvarchar(400)

		#region Associations

		/// <summary>
		/// FK_TagValue_1_0 (Context)
		/// </summary>
		[Association(ThisKey="ContextID", OtherKey="ID", CanBeNull=false)]
		public Context Context { get; set; }

		/// <summary>
		/// FK_TagValue_0_0 (CustomTag)
		/// </summary>
		[Association(ThisKey="TagID", OtherKey="ID", CanBeNull=false)]
		public CustomTag Tag { get; set; }

		#endregion
	}

	public static partial class TableExtensions
	{
		public static Context Find(this ITable<Context> table, long ID)
		{
			return table.FirstOrDefault(t =>
				t.ID == ID);
		}

		public static CustomTag Find(this ITable<CustomTag> table, long ID)
		{
			return table.FirstOrDefault(t =>
				t.ID == ID);
		}

		public static Setting Find(this ITable<Setting> table, string Name)
		{
			return table.FirstOrDefault(t =>
				t.Name == Name);
		}

		public static TagValue Find(this ITable<TagValue> table, int ContextID, int TagID, string Workflow)
		{
			return table.FirstOrDefault(t =>
				t.ContextID == ContextID &&
				t.TagID     == TagID     &&
				t.Workflow  == Workflow);
		}
	}
}
