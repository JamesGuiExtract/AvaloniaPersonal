/////////////////////////////////////////////////////////////////////////////
//                                                                            
//  File Name:    Setup.rul                                                   
//                                                                            
//  Description:  InstallShield script                                          
//                                                                            
//  Comments:     This minimal project is intended for advanced users. 
//                To create a robust project with step-by-step 
//				  instructions, use the Project Wizard. 
//                                                                                                               
/////////////////////////////////////////////////////////////////////////////

// Include header files /////////////////////////////////////////////////////
#include "ifx.h"

#include "..\..\..\..\Common\InstallScripts\Common.rul"

#include "..\..\..\..\Common\InstallScripts\OnMaintUIBefore.rul"

#include "..\..\..\..\Common\InstallScripts\OnMaintUIAfter.rul"
                                 
                                 
#define PATH_TO_REGASM WINDIR ^ "Microsoft.NET\\Framework\\v2.0.50727\\RegAsm.exe"
#define CORE_POINT_CLIENT_GUID "{5DAD3198-6D64-46FA-961C-FBB76B722F4A}"

prototype RegisterDataEntryApp();
prototype InstallCorepoint();
prototype UnInstallCorepoint();
prototype InstallMSMQ();

///////////////////////////////////////////////////////////////////////////////
//                                                                           
//  FUNCTION:   OnFirstUIBefore                                            
//                                                                           
//  EVENT:      FirstUIBefore event is sent when installation is run for the first
//              time on given machine. In the handler installation usually displays
//              UI allowing end user to specify installation parameters. After this
//              function returns, ComponentTransferData is called to perform file
//              transfer.
//                                                                           
///////////////////////////////////////////////////////////////////////////////
function OnFirstUIBefore()
    NUMBER nResult, nSetupType, nvSize, nUser;
    NUMBER bOpt1, bOpt2;
    STRING szTitle, szMsg, szQuestion, svName, svCompany, szFile;
    STRING szLicenseFile;
    STRING szMsg1;
    LIST list, listStartCopy;
    BOOL bCustom;
    BOOL bInstallSQLServer, bDone;
    STRING szTemp;
    STRING szDialog;
begin	        
    gbInstalled = FALSE;
    // TO DO: if you want to enable background, window title, and caption bar title                                                                   
    // SetTitle( @PRODUCT_NAME, 24, WHITE );                                        
    // SetTitle( @PRODUCT_NAME, 0, BACKGROUNDCAPTION ); 	                  
    // Enable( FULLWINDOWMODE );						   
    // Enable( BACKGROUND );							  
    // SetColor(BACKGROUND,RGB (0, 128, 128));					   
 
 	// make sure the user has administrative privilege
	if (Is(USER_ADMINISTRATOR, "") <= 0) then
		MessageBox("You must have administrative privileges on this computer to install the software package. Setup will terminate.", WARNING);
		abort;
	endif;
	    
	CheckOtherExtractProducts();
	
    SHELL_OBJECT_FOLDER = @PRODUCT_NAME;	   
    
    nSetupType = TYPICAL;	

Dlg_SdWelcome:
    szTitle = "";
    szMsg   = "";
    nResult = SdWelcome(szTitle, szMsg);
    if (nResult = BACK) goto Dlg_SdWelcome;
	
    szTitle   = "";
    svName    = "";
    svCompany = "";
    
Dlg_SdLicense:
	nResult = SdLicense2(szTitle, "", "", "License.txt", FALSE);
	if nResult = BACK goto Dlg_SdWelcome;

Dlg_SdAskDestPath:    	
    nResult = SdAskDestPath(szTitle, szMsg, INSTALLDIR, 0);
    if (nResult = BACK) goto Dlg_SdLicense;

Dlg_SdStartCopy:	
    if (nResult = BACK) then
        goto Dlg_SdAskDestPath;
    endif;

    // setup default status
    Enable(STATUSEX);
	// Move old reg keys before setup moves files but the ui is finished
   	MoveRegKeys();
   	CopyLicFiles();
   	
   	// Install .net if not installed
   	InstallDotNET();
   	                                
	// Install SQL Native Client if not installed
   	InstallSQLNativeClient();
   	                          
	// Install Inlite Key drivers
   	InstallInliteKeyDrivers();
   	                        
	// Install Crystal Reports
   	InstallCrystalReports();
   	
   	InstallSQLCE();
   	
   	gbInstalled = TRUE;

    return 0;
end;

///////////////////////////////////////////////////////////////////////////////
//
//  FUNCTION:   OnFirstUIAfter
//
//  EVENT:      FirstUIAfter event is sent after file transfer, when installation 
//              is run for the first time on given machine. In this event handler 
//              installation usually displays UI that will inform end user that
//              installation has been completed successfully.
//
///////////////////////////////////////////////////////////////////////////////
function OnFirstUIAfter()
    STRING szTitle, szMsg1, szMsg2, szRegAllCmdLine, szCmd;
    BOOL bOpt1, bOpt2;    
begin
	if (gbInstalled) then
		// Removed Corepoint install because not sure if silent install works properley
   		//InstallCorepoint();
   		InstallMSMQ();

	   	// Rename the uex file
 	  	RenameUEXFile();
                                                                                                                              
	    // Register Dlls
		szRegAllCmdLine = "\"" + PROGRAMFILES + EXTRACT_DIR + "\\RegisterAll.bat\"";
		szCmd = "cmd";
		LaunchAppAndWait( szRegAllCmdLine, "", LAAW_OPTION_WAIT | LAAW_OPTION_HIDDEN | LAAW_OPTION_SHOW_HOURGLASS );
    	RegisterDataEntryApp();   
    endif;
    
    Disable(STATUSEX);

	if ( gbInstalled ) then
		szMsg1 = SdLoadString(IFX_SDFINISH_MSG1);   
	    SdFinishReboot(szTitle, szMsg1, SYS_BOOTMACHINE, szMsg2, 0);
	else
		szMsg1 = "Installation was unable to complete, because does not have administrative privileges.";
		SdFinish(szTitle, szMsg1, "Click Finish to exit.", "", "", bOpt1, bOpt2);
	endif;
end; 


///////////////////////////////////////////////////////////////////////////////
//
// Function: RegisterDataEntryApp
//
//  Purpose: To call Regasm for the dataEntryApplication
///////////////////////////////////////////////////////////////////////////////
function RegisterDataEntryApp()
	STRING strPathForDataEntryApplication;
begin
	strPathForDataEntryApplication = "\"" + PROGRAMFILES ^ EXTRACT_DIR ^ "Extract.DataEntry.dll" + "\"";
	LaunchAppAndWait( PATH_TO_REGASM, strPathForDataEntryApplication, LAAW_OPTION_WAIT | LAAW_OPTION_HIDDEN | LAAW_OPTION_SHOW_HOURGLASS );

	strPathForDataEntryApplication = "\"" + PROGRAMFILES ^ EXTRACT_DIR ^ "DataEntryApplication.exe" + "\"";
	LaunchAppAndWait( PATH_TO_REGASM, strPathForDataEntryApplication, LAAW_OPTION_WAIT | LAAW_OPTION_HIDDEN | LAAW_OPTION_SHOW_HOURGLASS );

	strPathForDataEntryApplication = "\"" + PROGRAMFILES ^ EXTRACT_DIR ^ "Extract.LabResultsCustomComponents.dll" + "\"";
	LaunchAppAndWait( PATH_TO_REGASM, strPathForDataEntryApplication, LAAW_OPTION_WAIT | LAAW_OPTION_HIDDEN | LAAW_OPTION_SHOW_HOURGLASS );
end;

///////////////////////////////////////////////////////////////////////////////
//
// Function: InstallMSMQ
//
//  Purpose: This function sets up MSMQ
//	Returns 0 if no errors
///////////////////////////////////////////////////////////////////////////////
function InstallMSMQ()
STRING szProgram, szCmdLine, strUninstallKey;
int nResult, svServiceState;
begin
	SdShowMsg("Setup is Configuring MSMQ", TRUE);

	// Need to install msmq which depends on the OS Version
	if ( SYSINFO.nOSMajor = 5 ) then
		szProgram = "sysocmgr";
		szCmdLine = "/i:" + WINDIR ^ "sysoc.inf /u:\"" + SUPPORTDIR ^ "XP_2003_MSMQ.ini\" /q";
		//MessageBox( szCmdLine, MB_OK);
		LaunchAppAndWait(szProgram, szCmdLine, LAAW_OPTION_WAIT | LAAW_OPTION_SHOW_HOURGLASS); 
	elseif (SYSINFO.nOSMajor = 6 ) then
		szProgram = "ocsetup";
		// If it is server the arguments need to be different
		if ( SYSINFO. nOSProductType = VER_NT_SERVER ) then
			szCmdLine = "MSMQ-Server /passive /quiet";	
		else
			szCmdLine = "MSMQ-Container;MSMQ-Server /passive /quiet";
		endif;
		LaunchAppAndWait(szProgram, szCmdLine, LAAW_OPTION_WAIT | LAAW_OPTION_SHOW_HOURGLASS);
	endif;
	
	SdShowMsg("Setup is Configuring MSMQ", FALSE);
end;
             
///////////////////////////////////////////////////////////////////////////////
//
// Function: InstallCorepoint
//
//  Purpose: This function installs the Corepoint Runtime.
//	Returns 0 if no errors
///////////////////////////////////////////////////////////////////////////////
function InstallCorepoint()
STRING szProgram, szCmdLine, strUninstallKey;
int nResult, svServiceState;
begin
	SdShowMsg("Setup is Installing Corepoint Integration Engine", TRUE);

	// Need to install msmq which depends on the OS Version
	if ( SYSINFO.nOSMajor = 5 ) then
		szProgram = "sysocmgr";
		szCmdLine = "/i:" + WINDIR ^ "inf\sysoc.inf /u:\"" + SUPPORTDIR ^ "XP_2003_MSMQ.ini\" /q";
		//MessageBox( szCmdLine, MB_OK);
		LaunchAppAndWait(szProgram, szCmdLine, LAAW_OPTION_WAIT | LAAW_OPTION_SHOW_HOURGLASS); 
	elseif (SYSINFO.nOSMajor = 6 ) then
		szProgram = "ocsetup";
		// If it is server the arguments need to be different
		if ( SYSINFO. nOSProductType = VER_NT_SERVER ) then
			szCmdLine = "MSMQ-Server /passive /quiet";	
		else
			szCmdLine = "MSMQ-Container;MSMQ-Server /passive /quiet";
		endif;
		LaunchAppAndWait(szProgram, szCmdLine, LAAW_OPTION_WAIT | LAAW_OPTION_SHOW_HOURGLASS);
	endif;
	
	// Install Crystal Reports
	szProgram = SUPPORTDIR ^ "Corepoint-Health-Setup-4.0.0.exe";
	szCmdLine = " /S /v\"ALLUSERS=1 ADDLOCAL=HiddenFeatures,InstallDirRegMarker," +
		"IntegrationEngine,MessageProcessingGears,RfmdbGear,CorepointHealthSolutions," +
		"CommunicationGears,EngineDocumentation,FileGear,FtpGear,HttpPostGear,"+
		"NeoReport,ReleaseNotes,SharedComObjects,TcpIpKeepAlive /qn\"";
	LaunchAppAndWait(szProgram, szCmdLine, LAAW_OPTION_WAIT | LAAW_OPTION_SHOW_HOURGLASS); 
	  
	// Create the path for the uninstall key
	strUninstallKey = REG_PATH_UNINSTALL ^ CORE_POINT_CLIENT_GUID;
	                                        
	// If key exists get the version
	if (RegDBKeyExist(strUninstallKey) = 1 ) then
		CopyFile( SUPPORTDIR ^ "NeoEnableXML.dll", PROGRAMFILES ^ "Corepoint Health\\Shared Components\\NeoEnableXML.dll");
	endif;
	
	SdShowMsg("Setup is Installing Corepoint Integration Engine", FALSE);
end;
        
        
///////////////////////////////////////////////////////////////////////////////
//
// Function: UninstallCorepoint
//
//  Purpose: This function uninstalls the Corepoint Integration Engine.
//	Returns 0 if no errors
///////////////////////////////////////////////////////////////////////////////
function UnInstallCorepoint()
STRING szProgram, szCmdLine;
int nResult, svServiceState;
begin
		// Ask user if they wish to unintall Corepoint
	nResult = MessageBox("Do you wish to uninstall Corepoint Integration Engine?" + 
		"\r\nOther installed applications may use this and uninstalling " + 
		" will cause those applications to work incorrectly." , MB_YESNO );

	if (nResult = IDYES) then
	    UninstallApplication(CORE_POINT_CLIENT_GUID,"", LAAW_OPTION_WAIT  | LAAW_OPTION_SHOW_HOURGLASS);
  	endif;
end;
