/////////////////////////////////////////////////////////////////////////////
//                                                                            
//  File Name:    Setup.rul                                                   
//                                                                            
//  Description:  InstallShield script                                          
//                                                                            
//  Comments:     This minimal project is intended for advanced users. 
//                To create a robust project with step-by-step 
//				  instructions, use the Project Wizard. 
//                                                                                                               
/////////////////////////////////////////////////////////////////////////////

// Include header files /////////////////////////////////////////////////////
#include "ifx.h"

////////////////////// string defines ////////////////////////////

    #define UNINST_LOGFILE_NAME      "Uninst.isu"
    #define UNINST_REGDB_KEY  "Software\\Microsoft\\Windows\\CurrentVersion\\Uninstall"
    #define WIN_COM_UPDATE_INDICATOR_KEY "Software\\Extract Systems\\Installation\\WinComUpdate"
    #define ARCMAP_COMMAND_KEY "\\ArcMapDocument\\shell\\open\\command"
    #define UCLID_ROOT "ExtractRoot"
    #define COMMON_COMPONENTS_DIR "Extract Systems\\CommonComponents"
    #define UCLID_DIR "\\UCLID Software\\CommonComponents"
    #define EXTRACT_DIR "\\Extract Systems\\CommonComponents"

//////////////////// installation declarations ///////////////////

    // In order to have your InstallScript function executed as a custom
    // action by the Windows Installer, it must be prototyped as an 
    // entry-point function.

    // The keyword export identifies MyFunction() as an entry-point function.
    // The argument it accepts must be a handle to the Installer database.
    
      /* export prototype MyFunction(HWND); */  

    // To Do:  Declare global variables, define constants, and prototype user-
    //         defined and DLL functions here.


// ----- DLL function prototypes -----


    // your DLL function prototypes


// ---- script function prototypes -----

	prototype ConfirmArcGISInstalled();  
	prototype SetupInstall(); 
	prototype GetIcoMapForArcGISDir(BYREF STRING);         
	prototype DetectOldIcoMap();  
    prototype MoveRegKeys();
    prototype SetupLicenseMode();
    prototype DisplayFinishAndExit(STRING);

    // ----- global variables ------

    // generated by the Project Wizard
    BOOL        bIsWindowsNT4, bIsWindowsNT351, bIsWindows98, bIsWindows95;
    BOOL        bIsShellExplorer, bInstallAborted, bIs32BitSetup;
    STRING      svName, svCompany, svSerial;
    STRING      svDefGroup;
    STRING      svSetupType;
    LIST        listStartCopy;


    // your global variables

    // g_strUCLIDRootDir -- directory for uclid software in window explorer structure, ex. C:\Program Files\UCLID Software
    // g_strIcoMapConfigRegistryKey -- uclid root key in registry, ex. Software\\UCLID Software\\IcoMap_ArcMap\\Configuration
    // g_strWinComUpdate -- The result after running the Window component update
    //						"" -- Has not been run yet,; 0 -- Failed;
    //						1 -- Succeeded and no restart required;
    //						2 -- Succeeded and restart is required
    STRING		g_strUCLIDRootDir, g_strIcoMapConfigRegistryKey;


///////////////////////////////////////////////////////////////////////////////
//                                                                           
//  FUNCTION:   OnFirstUIBefore                                            
//                                                                           
//  EVENT:      FirstUIBefore event is sent when installation is run for the first
//              time on given machine. In the handler installation usually displays
//              UI allowing end user to specify installation parameters. After this
//              function returns, ComponentTransferData is called to perform file
//              transfer.
//                                                                           
///////////////////////////////////////////////////////////////////////////////
function OnFirstUIBefore()
    NUMBER nResult, nSetupType, nvSize, nUser;
    NUMBER bOpt1, bOpt2;
    STRING szTitle, szMsg, szQuestion, svName, svCompany, szFile;
    STRING szLicenseFile;
    STRING szMsg1;
    LIST list, listStartCopy;
    BOOL bCustom;
begin	
    // TO DO: if you want to enable background, window title, and caption bar title                                                                   
    // SetTitle( @PRODUCT_NAME, 24, WHITE );                                        
    // SetTitle( @PRODUCT_NAME, 0, BACKGROUNDCAPTION ); 	                  
    // Enable( FULLWINDOWMODE );						   
    // Enable( BACKGROUND );							  
    // SetColor(BACKGROUND,RGB (0, 128, 128));
    				   
 	// make sure the user has administrative privilege
	if (Is(USER_ADMINISTRATOR, "") <= 0) then
		DisplayFinishAndExit ( "You must have administrative privileges on this computer to install the software package. Setup will terminate.");
	endif;  

	if ( ConfirmArcGISInstalled() < 0 ) then     
		DisplayFinishAndExit( "ArcGIS must be installed to install IcoMap");
	endif;

	DetectOldIcoMap();     

	SetupInstall();
	
    SHELL_OBJECT_FOLDER = @PRODUCT_NAME;	   
    
    nSetupType = TYPICAL;	

Dlg_SdWelcome:
    szTitle = "";
    szMsg   = "";
    nResult = SdWelcome(szTitle, szMsg);
    if (nResult = BACK) goto Dlg_SdWelcome;
	
    szTitle   = "";
    svName    = "";
    svCompany = "";
    
Dlg_SdLicense:
	nResult = SdLicense2(szTitle, "", "", "License.txt", FALSE);
	if nResult = BACK goto Dlg_SdWelcome;

Dlg_SdAskDestPath:    	
    nResult = SdAskDestPath(szTitle, szMsg, INSTALLDIR, 0);
    if (nResult = BACK) goto Dlg_SdLicense;

Dlg_SetupType:
    szTitle = "";
    szMsg   = "";
    nResult = SetupType(szTitle, szMsg, "", nSetupType, 0);
    if (nResult = BACK) then
        goto Dlg_SdAskDestPath;
    else
        nSetupType = nResult;
        if (nSetupType != CUSTOM) then
            nvSize = 0;
            FeatureCompareSizeRequired(MEDIA, INSTALLDIR, nvSize);
            // if there's no enough space for installation
            if (nvSize != 0) then      
            	MessageBox(szSdStr_NotEnoughSpace, WARNING);
                goto Dlg_SetupType;
            endif;
            bCustom = FALSE;
        else
            bCustom = TRUE;
        endif;
    endif;    

Dlg_SdFeatureTree: 
    szTitle    = "";
    szMsg      = "";
    if (nSetupType = CUSTOM) then
        nResult = SdFeatureTree(szTitle, szMsg, INSTALLDIR, "", 2);
        if (nResult = BACK) goto Dlg_SetupType;  
    endif;

Dlg_SdStartCopy:	
    if (nResult = BACK) then
        if (!bCustom) then
            goto Dlg_SetupType;    
    	else
            goto Dlg_SdFeatureTree;
    	endif;
    endif;

    // setup default status
    Enable(STATUSEX);         

   	// Move the reg keys from old location to new location if they exist
	MoveRegKeys();

    return 0;
end;

///////////////////////////////////////////////////////////////////////////////
//
//  FUNCTION:   OnFirstUIAfter
//
//  EVENT:      FirstUIAfter event is sent after file transfer, when installation 
//              is run for the first time on given machine. In this event handler 
//              installation usually displays UI that will inform end user that
//              installation has been completed successfully.
//
///////////////////////////////////////////////////////////////////////////////
function OnFirstUIAfter()
    STRING szTitle, szMsg1, szMsg2, szOption1, szOption2, szRegAllCmdLine, szCmd;
    NUMBER bOpt1, bOpt2;
begin  
    // Register Dlls
	szRegAllCmdLine = "\"" + PROGRAMFILES + EXTRACT_DIR + "\\RegisterAll.bat\"";
	szCmd = "cmd";
	LaunchAppAndWait( szRegAllCmdLine, "/s", LAAW_OPTION_WAIT | LAAW_OPTION_HIDDEN | LAAW_OPTION_SHOW_HOURGLASS );
	
	SetupLicenseMode();

    Disable(STATUSEX);
	
    bOpt1  = FALSE;
    bOpt2  = FALSE;
    szMsg1 = SdLoadString(IFX_SDFINISH_MSG1);
    SdFinishEx(szTitle, szMsg1, szMsg2, szOption1, szOption2, bOpt1, bOpt2);
end; 

////////////////////////////////////////////////////////
// ---- Helper functions section ------------------------

///////////////////////////////////////////////////////////////////////////////
//
// Function: ConfirmArcGISInstalled
//
//  Purpose: This function confirms whether ArcGIS is installed on target machine
//
///////////////////////////////////////////////////////////////////////////////
function ConfirmArcGISInstalled()
	STRING strArcGISBinDir, strRegistryKeyName, strTemp, strSub, strSub1, strSub2;
	NUMBER nvType, nvSize, nPos;
begin
    // set default root key to class root in Registry here...
    if (RegDBSetDefaultRoot(HKEY_CLASSES_ROOT) < 0 ) then
    	MessageBox ("Failed to set registry root to HKEY_CLASSES_ROOT. Setup will now be terminated.", SEVERE);
		return -1;
	else
		// find the key
	    strRegistryKeyName = ARCMAP_COMMAND_KEY;	
	    if (RegDBKeyExist(strRegistryKeyName) < 0) then
	    	MessageBox ("Setup detects no ArcGIS installed on this machine. Setup will now be terminated.", SEVERE);
	    	return -1;
	    else
	    	strTemp = "";
	    	if (RegDBGetKeyValueEx (strRegistryKeyName, "", nvType, strTemp, nvSize) < 0) then
    			MessageBox ("Failed to retrieve ArcMap.exe directory.", WARNING);
    		else
    			// find "%1" and remove it
    			nPos = StrFind(strTemp, "\"%1\"");
    			strSub = strTemp;
    			if (nPos >= 0) then
    				// if "%1" found, remove it
    				StrSub(strSub, strTemp, 0, nPos);
    			endif;
	    		nPos = StrFind(strSub, "\"");
    			while (nPos >= 0)
    				// if " found, remove it
	   				StrSub(strSub1, strSub, 0, nPos);
	   				StrSub(strSub2, strSub, nPos + 1, StrLength(strSub));
	   				strSub = strSub1 + strSub2;
 	   				nPos = StrFind(strSub, "\"");
    			endwhile;    			
	    		// remove any appending string after last slash string
	    		if (ParsePath(strArcGISBinDir, strSub, PATH) < 0) then
	    			return -1;
	    		else
    				// now set the ArcGIS bin dir
    				FeatureSetTarget(MEDIA, "<ArcMapEXELocation>", strArcGISBinDir);
    			endif;
    		endif;
	
		endif;
	endif;
	return 0;
end;     


///////////////////////////////////////////////////////////////////////////////
//
// Function: SetupInstall
//
//  Purpose: This will initialize the setup.  Any general initialization
//           needed for the installation should be performed here.
//
///////////////////////////////////////////////////////////////////////////////
function SetupInstall()
STRING strDir;
begin

    Enable( CORECOMPONENTHANDLING );

    bInstallAborted = FALSE;

    //  Create list of end user selections to be displayed by DialogShowSdStartCopy()  //

    listStartCopy = ListCreate(STRINGLIST);

    ListAddString( listStartCopy, "Place the summary here.", AFTER );

    if (bIs32BitSetup) then
        g_strUCLIDRootDir = PROGRAMFILES ^ @COMPANY_NAME;
    else
        g_strUCLIDRootDir = PROGRAMFILES ^ @COMPANY_NAME16; // use short names
    endif;

    // set icomap configuration folder in registry
    g_strIcoMapConfigRegistryKey = "Software\\Extract Systems\\IcoMap for ArcGIS";

    SdProductName( @PRODUCT_NAME );

    //Enable( DIALOGCACHE );

    return 0;
end;


///////////////////////////////////////////////////////////////////////////////
//
// Function: GetIcoMapForArcGISDir
//
//  Purpose: This function returns icomap for arcgis directory
//
///////////////////////////////////////////////////////////////////////////////
function GetIcoMapForArcGISDir(strRetVal)
begin
	strRetVal = strRetVal ^ "IcoMap for ArcGIS";
	
	return 0;
end;

///////////////////////////////////////////////////////////////////////////////
//
// Function: Detects whether or not older version of icomap installed on the
//			 target machine. If true, prompt for uninstallation.
//
///////////////////////////////////////////////////////////////////////////////
function DetectOldIcoMap()
	STRING strUninstallKey, strUninstallLogFile;
	STRING svValue, strTemp;
	NUMBER nvType, nvSize;
	NUMBER nStartPos, nEndPos;
begin
	if (RegDBSetDefaultRoot(HKEY_LOCAL_MACHINE) < 0 ) then
		return 0;
	endif;
	
	// this is for finding old style installs
	strUninstallKey = UNINST_REGDB_KEY ^ "IcoMap for ArcGIS";
	if (RegDBKeyExist(strUninstallKey) < 0) then
		return 0;
	endif;
	
	if (RegDBGetKeyValueEx (strUninstallKey, "UninstallString", nvType, svValue, nvSize) < 0) then
		return 0;
	endif;
	if (StrCompare(svValue, "") = 0) then
		return 0;
	endif;
	nStartPos = StrFind (svValue, "\"");
	if (nStartPos < 0) then
		return 0;
	endif;
	strUninstallLogFile = "";
	StrSub(strUninstallLogFile, svValue, nStartPos+1, StrLength(svValue));	
	nEndPos = StrFind (strUninstallLogFile, "\"");
	if (nEndPos < 0) then
		return 0;
	endif;	
	strTemp = strUninstallLogFile;
	StrSub(strUninstallLogFile, strTemp, 0, nEndPos);
		
	// make sure the uninstall log file exists
	if (Is(FILE_EXISTS, strUninstallLogFile) <= 0) then
		return 0;
	endif;
	if (AskYesNo("Setup detects an older version of IcoMap for ArcGIS installed. "+
				 	"It is highly recommended uninstall the older version before proceeding. " +
					 	"Do you wish to uninstall IcoMap for ArcGIS?", YES) = NO) then
      	DisplayFinishAndExit("Setup can not continue unless the older versino is uninstalled");
    endif;

   	SdShowMsg("Setup is uninstalling IcoMap for ArcGIS...", TRUE);
    // uninstall the old version
    if ( LaunchAppAndWait( "", svValue, LAAW_OPTION_WAIT ) < 0 )  then
    	DisplayFinishAndExit("Failed to uninstall IcoMap for ArcGIS");  
    endif;	
    SdShowMsg("Setup is uninstalling IcoMap for ArcGIS...", FALSE);

    return 0;
end;

///////////////////////////////////////////////////////////////////////////////
//
// Function: MoveRegKeys
//
//  Purpose: This function moves registry keys and values from the old UCLID Software keys
//			 to the Extract Systems keys
//	Returns 0 if no errors
///////////////////////////////////////////////////////////////////////////////
function MoveRegKeys()
begin
	// Move any remaining old keys to the new key path
	// Move the keys for Local machine to new Extract Systems settings
	RegDBSetDefaultRoot(HKEY_LOCAL_MACHINE);
	if ( RegDBKeyExist ("Software\\UCLID Software" ) > 0 )  then
		RegDBCopyKeys("Software\\UCLID Software",
					  "Software\\Extract Systems",
					  HKEY_LOCAL_MACHINE,
					  HKEY_LOCAL_MACHINE );
		RegDBDeleteKey("Software\\UCLID Software");
	endif;
	
	// Move the keys for current user to new Extract Systems settings
	RegDBSetDefaultRoot(HKEY_CURRENT_USER);
	if ( RegDBKeyExist ("Software\\UCLID Software" ) > 0 )  then
		RegDBCopyKeys("Software\\UCLID Software",
					  "Software\\Extract Systems",
					  HKEY_CURRENT_USER,
					  HKEY_CURRENT_USER );
		RegDBDeleteKey("Software\\UCLID Software");
	endif;
end; 

///////////////////////////////////////////////////////////////////////////////
//
// Function: SetupLicenseMode
//
//  Purpose: This function runs the IcoMapLicenseUtility
//	Returns 0 if no errors
///////////////////////////////////////////////////////////////////////////////
function SetupLicenseMode()
	STRING strLicenseUtil, strAppDir, strCC, strRunLicBat;
begin             
	strRunLicBat = SUPPORTDIR ^ "RunLicenseUtil.bat";
	strLicenseUtil = "\"" + INSTALLDIR ^ "Bin\\IcoMapLicenseUtil.exe" + "\"";  
	strCC = "\"" + PROGRAMFILES ^ EXTRACT_DIR  + "\"";
	// Run the IcoMapLicenseUtility to setup Node or Concurrent License
	LaunchAppAndWait (strRunLicBat, strCC + " " + strLicenseUtil, 
			LAAW_OPTION_WAIT | LAAW_OPTION_HIDDEN);
end;  


///////////////////////////////////////////////////////////////////////////////
//
// Function: DisplayFinishAndExit
//
// Purpose: This function advances the install to the finish dialog  
//			To be used to exit if a condition is not met		
// Returns 0 if no errors
///////////////////////////////////////////////////////////////////////////////

function DisplayFinishAndExit(strMsg) 
    NUMBER bOpt1, bOpt2;
begin
    bOpt1  = FALSE;
    bOpt2  = FALSE;
	SdFinish("", strMsg, "", "", "", bOpt1, bOpt2);
	exit;
end;

// --- include script file section ---


