// AFFileProcessors.idl : IDL source for AFFileProcessors.dll
//

// This file will be processed by the MIDL tool to
// produce the type library (AFFileProcessors.tlb) and marshalling code.

import "oaidl.idl";
import "ocidl.idl";

[
	uuid(0D45D3B2-CF74-4000-9549-EC5BD95B6A55),
	version(1.0),
	helpstring("AFFileProcessors 1.0 Type Library")
]
library UCLID_AFFILEPROCESSORSLib
{
	importlib("stdole32.tlb");
	importlib("stdole2.tlb");
	importlib("..\..\..\..\ReusableComponents\COMComponents\UCLIDCOMUtils\Core\Code\UCLIDCOMUtils.tlb");
	importlib("..\..\..\..\ReusableComponents\COMComponents\UCLIDComponentsLM\COMLM\Code\COMLM.tlb");
	importlib("..\..\..\..\ReusableComponents\COMComponents\UCLIDFileProcessing\Code\UCLIDFILEPROCESSING.tlb");
	importlib("..\..\AFValueModifiers\Code\AFValueModifiers.tlb");

	//////////////
	// Enums
	//////////////
	typedef 
	[
		uuid(891CCDB2-84CD-4011-BEBF-1C9F89C55E75), 
		helpstring("UCLID OCR Image Pages Type")
	]
    enum
	{
		kNoOCR = 0,
		kOCRAllPages = 1,
        kOCRCertainPages = 2
    } EOCRPagesType;

	//////////////
	// Interfaces
	//////////////
	[
		object,
		uuid(06557EDF-0C1E-4A5D-8B6C-51E60860FCE7),
		dual,
		helpstring("IAFEngineFileProcessor Interface"),
		pointer_default(unique)
	]
	interface IAFEngineFileProcessor : IDispatch
	{
		// if input is an image file and its corresponding USS file exists, then read that USS file
		[propget, id(1), helpstring("property ReadUSSFile")] HRESULT ReadUSSFile([out, retval] VARIANT_BOOL *pVal);
		[propput, id(1), helpstring("property ReadUSSFile")] HRESULT ReadUSSFile([in] VARIANT_BOOL newVal);
		// if input is an image file and its corresponding USS file exists, then create the USS file 
		// and read from the USS file
		[propget, id(2), helpstring("property CreateUSSFile")] HRESULT CreateUSSFile([out, retval] VARIANT_BOOL *pVal);
		[propput, id(2), helpstring("property CreateUSSFile")] HRESULT CreateUSSFile([in] VARIANT_BOOL newVal);
		// name of the rule set file name (encrypted or not)
		[propget, id(3), helpstring("property RuleSetFileName")] HRESULT RuleSetFileName([out, retval] BSTR *pVal);
		[propput, id(3), helpstring("property RuleSetFileName")] HRESULT RuleSetFileName([in] BSTR newVal);
		// OCR all pages or only OCR specific pages or Don't OCR any pages
		[propget, id(4), helpstring("property OCRPagesType")] HRESULT OCRPagesType([out, retval] EOCRPagesType *pVal);
		[propput, id(4), helpstring("property OCRPagesType")] HRESULT OCRPagesType([in] EOCRPagesType newVal);
		// If OCRPageRange = kOCRPages, this property specifies certain page numbers in a string
		[propget, id(5), helpstring("property OCRCertainPages")] HRESULT OCRCertainPages([out, retval] BSTR *strSpecificPages);
		[propput, id(5), helpstring("property OCRCertainPages")] HRESULT OCRCertainPages([in] BSTR strSpecificPages);
		// If a cleaned image should be used for OCR (if available)
		[propget, id(6), helpstring("property UseCleanedImage")] HRESULT UseCleanedImage([out, retval] VARIANT_BOOL* pVal);
		[propput, id(6), helpstring("property UseCleanedImage")] HRESULT UseCleanedImage([in] VARIANT_BOOL newVal);
		// Whether to provide input attributes to the ruleset.
		[propget, id(7), helpstring("property UseDataInputFile")] HRESULT UseDataInputFile([out, retval] VARIANT_BOOL *pVal);
		[propput, id(7), helpstring("property UseDataInputFile")] HRESULT UseDataInputFile([in] VARIANT_BOOL newVal);
		// The VOA file to include as input attributes (attributes will be added as children to AFDocument::Attribute).
		[propget, id(8), helpstring("property DataInputFileName")] HRESULT DataInputFileName([out, retval] BSTR *pVal);
		[propput, id(8), helpstring("property DataInputFileName")] HRESULT DataInputFileName([in] BSTR newVal);
	};

	[
		object,
		uuid(F96AFDF1-0F7D-4E71-A0E8-E38FF7BBF250),
		dual,
		helpstring("IAFConvertVOAToXMLTask Interface"),
		pointer_default(unique)
	]
	interface IAFConvertVOAToXMLTask : IDispatch
	{
		[propget, id(1), helpstring("property VOAFile")] HRESULT
			VOAFile([out, retval] BSTR* pbstrVOAFile);
		[propput, id(1), helpstring("property VOAFile")] HRESULT
			VOAFile([in] BSTR bstrVOAFile);
		[propget, id(2), helpstring("property XMLOutputHandler")] HRESULT
			XMLOutputHandler([out, retval] IUnknown** ppXMLOutputHandler);
		[propput, id(2), helpstring("property XMLOutputHandler")] HRESULT
			XMLOutputHandler([in] IUnknown* pXMLOutputHandler);
	};

	[
	object,
	uuid(D297FDF5-F4F9-4A4E-BB84-C06084BB9882),
	dual,
	nonextensible,
	helpstring("IEnhanceOCRTask Interface"),
	pointer_default(unique)
	]
	interface IEnhanceOCRTask : IDispatch
	{
		// The OCR confidence level below which characters will be enhanced (when possible).
		[propget, id(1), helpstring("property ConfidenceCriteria")] HRESULT ConfidenceCriteria([out, retval] long *pVal);
		[propput, id(1), helpstring("property ConfidenceCriteria")] HRESULT ConfidenceCriteria([in] long newVal);

		// The the set of image filters that will be used against the document.
		[propget, id(2), helpstring("property FilterPackage")] HRESULT FilterPackage([out, retval] EFilterPackage *pVal);
		[propput, id(2), helpstring("property FilterPackage")] HRESULT FilterPackage([in] EFilterPackage newVal);
		
		// A custom defined filter package to use.
		[propget, id(3), helpstring("property CustomFilterPackage")] HRESULT CustomFilterPackage([out, retval] BSTR *pVal);
		[propput, id(3), helpstring("property CustomFilterPackage")] HRESULT CustomFilterPackage([in] BSTR newVal);

		// The regex (or path of a regex file) that specifies formats that are preferred and should be
		// used over other formats. The final result will contain this pattern unless the confidence of
		// the possibility(ies) containing this pattern are very substantially outweighed by a
		// possibility that does not contain this pattern.
		[propget, id(4), helpstring("property PreferredFormatRegex")] HRESULT PreferredFormatRegex([out, retval] BSTR *pVal);
		[propput, id(4), helpstring("property PreferredFormatRegex")] HRESULT PreferredFormatRegex([in] BSTR newVal);

		// Any chars in this string will be prevented from being created by the EnhanceOCR process.
		[propget, id(5), helpstring("property CharsToIgnore")] HRESULT CharsToIgnore([out, retval] BSTR *pVal);
		[propput, id(5), helpstring("property CharsToIgnore")] HRESULT CharsToIgnore([in] BSTR newVal);

		// Indicates whether copies of the filtered images should be output (for debug purposes).
		[propget, id(6), helpstring("property OutputFilteredImages")] HRESULT OutputFilteredImages([out, retval] VARIANT_BOOL *pVal);
		[propput, id(6), helpstring("property OutputFilteredImages")] HRESULT OutputFilteredImages([in] VARIANT_BOOL newVal);
	};

	//////////////
	// CoClasses
	//////////////
	[
		uuid(0F831302-E48D-4A2C-B636-485612A60262),
		helpstring("AFEngineFileProcessor Class")
	]
	coclass AFEngineFileProcessor
	{
		[default] interface IAFEngineFileProcessor;
		interface IFileProcessingTask;
		interface ICategorizedComponent;
		interface ICopyableObject;
		interface ILicensedComponent;
		interface IMustBeConfiguredObject;
	};
	[
		uuid(F0B58CEC-401F-42AC-BA0C-F11E3A3ED3F4),
		helpstring("AFEngineFileProcessorPP Class")
	]
	coclass AFEngineFileProcessorPP
	{
		interface IUnknown;
	};

	[
		uuid(23FB28AB-EE7D-4708-AA23-B3F96B0DA094),
		helpstring("AFConvertVOAToXMLTask Class")
	]
	coclass AFConvertVOAToXMLTask
	{
		[default] interface IAFConvertVOAToXMLTask;
		interface IFileProcessingTask;
		interface ICategorizedComponent;
		interface ICopyableObject;
		interface ILicensedComponent;
		interface IMustBeConfiguredObject;
	};
	[
		uuid(A7E8330B-AC29-445A-AF59-970D0EE469CA),
		helpstring("AFConvertVOAToXMLTaskPP Class")
	]
	coclass AFConvertVOAToXMLTaskPP
	{
		interface IUnknown;
	};

	[
		uuid(DD0C00F0-50F9-4B48-A3FB-E0E22FB8BE7A),
		helpstring("EnhanceOCRTask Class")
	]
	coclass EnhanceOCRTask
	{
		[default] interface IEnhanceOCRTask;
		interface IFileProcessingTask;
		interface ICategorizedComponent;
		interface ICopyableObject;
		interface ILicensedComponent;
		interface IMustBeConfiguredObject;
	};

	[
		uuid(73A7E2C0-9BBE-415F-8149-E1C2FE39F6AC),
		helpstring("EnhanceOCRTaskPP Class")
	]
	coclass EnhanceOCRTaskPP
	{
		[default] interface IUnknown;
	};
};
