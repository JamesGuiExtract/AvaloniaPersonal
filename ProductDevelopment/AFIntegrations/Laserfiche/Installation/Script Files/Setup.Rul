//===========================================================================
//
//  File Name:    Setup.rul
//
//  Description:  Blank setup main script file
//
//  Comments:     Blank setup is an empty setup project. If you want to
//				  create a new project via. step-by step instructions use the
//				  Project Assistant.
//
//===========================================================================

// Included header files ----------------------------------------------------
#include "ifx.h"

////////////////////// string defines ////////////////////////////
#define EXTRACT_DIR "\\Extract Systems"
#define REG_PATH_DOT_NET_VER_2_0 "\\SOFTWARE\\Microsoft\\.NETFramework\\policy\\v2.0"
#define INSTALL_UTIL_PATH "C:\\WINDOWS\\Microsoft.NET\\Framework\\v2.0.50727\\InstallUtil.exe"
#define LOG_FILE_PATH CommonAppDataFolder ^ "\\Extract Systems\\LogFiles\\Misc"
#define LASERFICHE_TOOLBAR_7 "\\Software\\Laserfiche\\Client\\Profile\\Toolbars"
#define LASERFICHE_TOOLBAR_8 "\\Software\\Laserfiche\\Client8\\Profile\\Toolbars"
#define REG_PATH_DOT_NET_VER_2_0 "\\SOFTWARE\\Microsoft\\.NETFramework\\policy\\v2.0"
#define REG_PATH_UNINSTALL "\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Uninstall"
#define FLEX_INDEX_PRODUCT_CODE "{A7DFE34D-A07E-4D57-A624-B758E42A69D4}"
#define IDSHIELD_PRODUCT_CODE "{158160CD-7B55-462F-8477-7E18B2937D40}"  
#define EXTRACT_LM_PRODUCT_CODE "{EB8DE231-8B66-4DE6-A56D-39452D8CF35F}"
#define IDSHIELD_FOR_LASERFICHE_CODE "{74E1DF54-C96E-479F-915D-A0A721F9AC8B}"
#define LASERFICHE_CLIENT_PATH "\\Software\\Laserfiche\\Client"
#define LASERFICHE_TOOLKIT_RUNTIME_PRODUCT_CODE  "{F1B014D4-66C4-4593-BBE9-4C882A339CC9}"
#define EXCEPTION_FILE_NAME "ExtractException.uex"


prototype RenameUEXFile();
prototype SetLaserficheRegKeys();
prototype detectRDTInstall();
prototype InstallDotNET();
prototype CheckOtherExtractProducts();
prototype CheckProductKey(STRING, STRING);
prototype install64SentinelDriversIfRequired();
prototype STRING getLaserficheInstalledVersion();
prototype getNextButtonLocationData( BYREF STRING);
prototype addLaserficheToolBarButton(STRING, STRING, STRING); 
prototype appendBrowserKey(STRING);
prototype installLaserficheRuntime();
prototype uninstallLaserficheRuntime();
prototype  BOOL IsProductKeyInstalled(STRING);

STRING gstrLaserficheBrowserValue;
NUMBER gnLastCustomKeyNumber;
BOOL gbInstalled;

// Note: In order to have your InstallScript function executed as a custom
// action by the Windows Installer, it must be prototyped as an 
// entry-point function.

// The keyword export identifies MyFunction() as an entry-point function.
// The argument it accepts must be a handle to the Installer database.
    
/* export prototype MyFunction(HWND); */

//---------------------------------------------------------------------------
// OnFirstUIAfter
//
// The OnFirstUIAfter event called by the framework after the file transfer
// of the setup when the setup is running in first install mode. By default
// this event displays UI that informs the end user that the setup has been
// completed successfully.
//---------------------------------------------------------------------------
//function OnFirstUIAfter()
//    STRING szTitle, szMsg1, szMsg2, szOption1, szOption2;
//    NUMBER bOpt1, bOpt2;
//begin

	//ServiceAddService ( szServiceName, szServiceDisplayName, szServiceDescription, szServicePathFile, bStartService, szStartServiceArgs );
//	Disable(STATUSEX);
//
//	bOpt1  = FALSE;
//	bOpt2  = FALSE;
//	szMsg1 = SdLoadString(IFX_SDFINISH_MSG1);
//	SdFinishEx(szTitle, szMsg1, szMsg2, szOption1, szOption2, bOpt1, bOpt2);
//end;  

///////////////////////////////////////////////////////////////////////////////
//
//  FUNCTION:   OnFirstUIAfter
//
//  EVENT:      FirstUIAfter event is sent after file transfer, when installation 
//              is run for the first time on given machine. In this event handler 
//              installation usually displays UI that will inform end user that
//              installation has been completed successfully.
//
///////////////////////////////////////////////////////////////////////////////
function OnFirstUIAfter()
    STRING szTitle, szMsg1, szMsg2, szRegAllCmdLine, szCmd;
    BOOL bOpt1, bOpt2;
begin
	// Rename the uex file
   	RenameUEXFile();

   	// Install the 64 bit drivers if required	
	install64SentinelDriversIfRequired();   	
 
    // Register Dlls
	szRegAllCmdLine = "\"" + PROGRAMFILES ^ EXTRACT_DIR ^ "\\CommonComponents\\RegisterAll.bat\"";
	
	LaunchAppAndWait( szRegAllCmdLine, "/s", LAAW_OPTION_WAIT | LAAW_OPTION_HIDDEN | LAAW_OPTION_SHOW_HOURGLASS );
    
    szCmd = "\"" + PROGRAMFILES ^ EXTRACT_DIR ^ "\\CommonComponents\\ESLaserficheService.exe\"";
	LaunchAppAndWait( INSTALL_UTIL_PATH , szCmd, LAAW_OPTION_WAIT | LAAW_OPTION_HIDDEN | LAAW_OPTION_SHOW_HOURGLASS );

	// Install the laserfiche Runtime
   	installLaserficheRuntime();
   	
	SetLaserficheRegKeys();
	
    Disable(STATUSEX);

	if ( gbInstalled ) then
		szMsg1 = SdLoadString(IFX_SDFINISH_MSG1);   
	    SdFinishReboot(szTitle, szMsg1, SYS_BOOTMACHINE, szMsg2, 0);
	else
		szMsg1 = "Installation was unable to complete, because does not have administrative privileges.";
		SdFinish(szTitle, szMsg1, "Click Finish to exit.", "", "", bOpt1, bOpt2);
	endif;

end; 

///////////////////////////////////////////////////////////////////////////////
//
// Function: SetLaserficheRegKeys
//
//	Returns 0 if no errors
///////////////////////////////////////////////////////////////////////////////
function SetLaserficheRegKeys()
	STRING strLaserficheBrowserValue, strNewValue, strVersion;
	NUMBER nSize, nType, nVersion;
begin
	
    RegDBSetDefaultRoot(HKEY_CURRENT_USER);                                      
    
    strVersion = getLaserficheInstalledVersion();
                                   
    // This will return the number to the left of the . if there is one which
    // will be the major version which is all the is required.
    StrToNum(nVersion, strVersion);
    
    addLaserficheToolBarButton( "On-demand redaction",
    			         EXTRACT_DIR ^ "\\CommonComponents\\ESLaserficheClientPlugin.exe /redact",
    			         EXTRACT_DIR ^ "\\CommonComponents\\IDShield.ico"); 
    	
    addLaserficheToolBarButton( "Submit for background redaction",
    			         EXTRACT_DIR ^ "\\CommonComponents\\ESLaserficheClientPlugin.exe /submit",
    			         EXTRACT_DIR ^ "\\CommonComponents\\submit.ico"); 
    
    addLaserficheToolBarButton( "Verify redactions",
    			         EXTRACT_DIR ^ "\\CommonComponents\\ESLaserficheClientPlugin.exe /verify",
    			         INSTALLDIR ^ "Bin\\verify.ico"); 

    addLaserficheToolBarButton( "ID Shield Help",
    			         "hh \"" + INSTALLDIR ^ "Help\\ID_Shield_for_Laserfiche.chm\"",
    			         INSTALLDIR ^ "Bin\\IDS Help.ico"); 
end;

///////////////////////////////////////////////////////////////////////////////
//
//  FUNCTION:   detectRDTInstall
//
//  EVENT:      Check for installed RDT
//
///////////////////////////////////////////////////////////////////////////////
function detectRDTInstall()
	STRING strRDTUninstallKey;
	NUMBER nSize, nType;
begin     
	RegDBSetDefaultRoot(HKEY_LOCAL_MACHINE);
	// check uninstall key in registry     
	strRDTUninstallKey = "SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Uninstall\\InstallShield_{735E1622-3990-445F-9E5D-B0D7FDE292A3}";
	
	if (RegDBKeyExist(strRDTUninstallKey) = 1 ) then
		// this means FLEX Index RDT is installed the uninstall can not continue
		MessageBox("RDT must be uninstalled before the FLEX Index can be removed", SEVERE);
		gbInstalled = FALSE;
		abort;
	endif;	
	
	return 0;
end;	

///////////////////////////////////////////////////////////////////////////////
//
//  FUNCTION:   InstallDotNET
//
//  EVENT:      Installs .NET 2.0 if it is not installed
//
///////////////////////////////////////////////////////////////////////////////
function InstallDotNET()
STRING szProgram;
int nResult, svServiceState;
begin
	// Change the root for the registry
	RegDBSetDefaultRoot(HKEY_LOCAL_MACHINE);
	if ( RegDBKeyExist ( REG_PATH_DOT_NET_VER_2_0 ) < 0) then
		if ( SYSINFO.bIsWow64 ) then
			szProgram = SUPPORTDIR ^ "\\NetFx64.exe";
		else
			szProgram = SUPPORTDIR ^ "\\dotnetfx.exe";
		endif;
		LaunchAppAndWait(szProgram, "", LAAW_OPTION_WAIT); 
		SdShowMsg("Setup is Installing .NET Framework 2.0", FALSE);
		if ( RegDBKeyExist ( REG_PATH_DOT_NET_VER_2_0 ) < 0  ) then
			MessageBox(".NET Framework was not successfully Installed, installation will be aborted", SEVERE);
			gbInstalled = FALSE;
			abort;
		endif;
	endif;

end;
           
///////////////////////////////////////////////////////////////////////////////
//
//  FUNCTION:   CheckOtherExtractProducts
//
//  EVENT:      Checks for install of ID Shield that is a different version
//				than the version of FLEX Index that is being installed.
//
///////////////////////////////////////////////////////////////////////////////
function CheckOtherExtractProducts()
	STRING strUninstallKey;
	STRING strVersion;
	NUMBER nSize, nType;
	STRING strMsg;
begin
	// TODO: Need to make sure the appropriate version is checked   
	//CheckProductKey("ID Shield", IDSHIELD_PRODUCT_CODE);  
	//CheckProductKey("Flex Index", FLEX_INDEX_PRODUCT_CODE);
	//CheckProductKey("Extract LM", EXTRACT_LM_PRODUCT_CODE);
    CheckProductKey("ID Shield for Laserfiche", IDSHIELD_FOR_LASERFICHE_CODE);
	return 0;
end;	
           
///////////////////////////////////////////////////////////////////////////////
//
// Function: RenameUEXFile
//
//  Purpose: This function renames exception file if it exist to
//			 "YYYY-MM-DD HHhMMmSSs <EXCEPTION_FILE_NAME>" where the YYYY/MM/DD/etc 
//			 are the year/month/day and other time related fields
//	Returns 0 if no errors
///////////////////////////////////////////////////////////////////////////////
function RenameUEXFile()
	STRING strSource;
	STRING strDest;
	NUMBER nvResult;
	STRING strDate;
	STRING strTime;
	LIST listDateID;
	LIST listTimeID;
	STRING strMonth, strDay, strYear;
	STRING strHour, strMinute, strSeconds;
begin
	strSource  = LOG_FILE_PATH ^ EXCEPTION_FILE_NAME;
	
	// Check if the exception file exists
	if ( Is( FILE_EXISTS, strSource )) then  
		// Get the date
		GetSystemInfo ( DATE , nvResult , strDate );
		
		// Separate date into Month, Day, year
		listDateID = ListCreate(STRINGLIST);
		StrGetTokens ( listDateID , strDate , "-" );
		ListGetFirstString ( listDateID, strMonth );
		ListGetNextString ( listDateID, strDay );
		ListGetNextString ( listDateID, strYear );

		// Get the time
		GetSystemInfo ( TIME , nvResult , strTime );  
		
		// Separate the Time into Hours, Minutes, Seconds
		listTimeID = ListCreate(STRINGLIST);
		StrGetTokens ( listTimeID , strTime , ":" );
		ListGetFirstString ( listTimeID, strHour );
		ListGetNextString ( listTimeID, strMinute );
		ListGetNextString ( listTimeID, strSeconds );
	
		// Create the new filename for the exception file
		strDest = LOG_FILE_PATH + "\\";
		strDest = strDest + strYear + "-" + strMonth + "-" + strDay;
		strDest = strDest + " " + strHour + "h" + strMinute + "m" + strSeconds + "s ";
		strDest = strDest + EXCEPTION_FILE_NAME ;
		
		// Rename exception file
		RenameFile ( strSource , strDest );
	endif;
end;

///////////////////////////////////////////////////////////////////////////////
//
//  FUNCTION:   CheckProductKey
//
//  EVENT:      Checks to see if the given product key is in the registry as 
//				an installed product if it is checks the version. If the verison
//				is the same as the current version being installed function exits
//				if not the install is aborted.
//
///////////////////////////////////////////////////////////////////////////////
function CheckProductKey(szProductName, szProductKey)
	STRING strUninstallKey;
	STRING strVersion;
	NUMBER nSize, nType;
	STRING strMsg;
begin
	RegDBSetDefaultRoot(HKEY_LOCAL_MACHINE);
	
	// check uninstall key in registry     
	strUninstallKey = REG_PATH_UNINSTALL ^ szProductKey;
	strVersion = "";
	
	if (RegDBKeyExist(strUninstallKey) = 1 ) then
		// Read the key if it does not match the version being installed exit
		RegDBGetKeyValueEx( strUninstallKey, "DisplayVersion", nType, strVersion, nSize); 

		if ( strVersion != IFX_PRODUCT_VERSION) then
			// A different version of FLEX index is installed than this version of ID Shield so abort
			strMsg = szProductName + " version " + strVersion + " must be uninstalled before Laserfiche ID Shield Plugin can be installed.";	
			MessageBox(strMsg, SEVERE);
			gbInstalled = FALSE;
			abort;
		endif;
		
	endif;	
	return 0;
end;

//---------------------------------------------------------------------------
// OnFirstUIBefore
//
// The OnFirstUIBefore event is called by the framework when the setup is
// running in first install mode. By default this event displays UI allowing
// the end user to specify installation parameters.
//---------------------------------------------------------------------------
function OnFirstUIBefore()
    NUMBER nResult, nSetupType, nvSize, nUser;
    STRING szTitle, szMsg, szQuestion, svName, svCompany, szFile;
    STRING szLicenseFile;
    STRING szMsg1;
    LIST list, listStartCopy;
    BOOL bCustom;
begin	        
    gbInstalled = FALSE;
    // TO DO: if you want to enable background, window title, and caption bar title                                                                   
    // SetTitle( @PRODUCT_NAME, 24, WHITE );                                        
    // SetTitle( @PRODUCT_NAME, 0, BACKGROUNDCAPTION ); 	                  
    // Enable( FULLWINDOWMODE );						   
    // Enable( BACKGROUND );							  
    // SetColor(BACKGROUND,RGB (0, 128, 128));					   
 
 	// make sure the user has administrative privilege
	if (Is(USER_ADMINISTRATOR, "") <= 0) then
		MessageBox("You must have administrative privileges on this computer to install the software package. Setup will terminate.", WARNING);
		abort;
	endif;                    
	                            
	// Check for different versions of Extract products
	CheckOtherExtractProducts();
	
    SHELL_OBJECT_FOLDER = @PRODUCT_NAME;	   
    
    nSetupType = TYPICAL;	

Dlg_SdWelcome:
    szTitle = "";
    szMsg   = "";
    nResult = SdWelcome(szTitle, szMsg);
    if (nResult = BACK) goto Dlg_SdWelcome;
	
    szTitle   = "";
    svName    = "";
    svCompany = "";
    
Dlg_SdLicense:
	nResult = SdLicense2(szTitle, "", "", "License.txt", FALSE);
	if nResult = BACK goto Dlg_SdWelcome;

Dlg_SdAskDestPath:    	
    nResult = SdAskDestPath(szTitle, szMsg, INSTALLDIR, 0);
    if (nResult = BACK) goto Dlg_SdLicense;

    // setup default status
    Enable(STATUSEX);
   	                
   	// Install .NET if required
   	InstallDotNET();    
   	
   	// Initialize the Custom reg key globals
   	gnLastCustomKeyNumber = 42;
   	
   	gbInstalled = TRUE;
   	                           
    return 0;
end;


//////////////////////////////////////////////////////////////////////////////
//
//  FUNCTION:   install64SentinelDriversIfRequired
//
//  PURPOSE:    To check if the system is 64 bit and install the correct drivers
//				if it is
//
//////////////////////////////////////////////////////////////////////////////
function install64SentinelDriversIfRequired()
	INT    nSize;    
	STRING szVerValue;
	STRING szProgram;
begin 
	nSize = 127;
	// Get the 64 bit OS Version -- if null it is not 64 bit
	MsiGetProperty(ISMSI_HANDLE,"VersionNT64", szVerValue, nSize);
	if ( StrLength (szVerValue) > 0 ) then
		// Run the Sentinel 64 driver install
		szProgram = SUPPORTDIR  ^ "\\Sentinel Protection Installer 7.5.0.exe";
		LaunchAppAndWait(szProgram, "", LAAW_OPTION_WAIT); 
	endif;
end;

//////////////////////////////////////////////////////////////////////////////
//
//  FUNCTION:   getLaserficheInstalledVersion
//
//  PURPOSE:    Returns the installed version of the Laserfiche client.
//
//////////////////////////////////////////////////////////////////////////////
function STRING getLaserficheInstalledVersion()
	STRING szVersion;
	INT nSize, nType;
	
begin
	RegDBSetDefaultRoot(HKEY_LOCAL_MACHINE);
	
	// Initialize to no version
 	szVersion = "";   
	if (RegDBKeyExist(LASERFICHE_CLIENT_PATH) = 1 ) then
		// Read the key if it does not match the version being installed exit
		RegDBGetKeyValueEx( LASERFICHE_CLIENT_PATH, "CurrentVersion", nType, szVersion, nSize); 
	endif;
	return szVersion;
end;

//////////////////////////////////////////////////////////////////////////////
//
//  FUNCTION:   getNextButtonLocationData
//
//  PURPOSE:    Reads the Browser key for Laserfiche and returns the next
//				value to be added to the Browser key and the name of the key
//				to add for the button.
//
//////////////////////////////////////////////////////////////////////////////
function getNextButtonLocationData(rszNextCustomKey)
	NUMBER nNextCustomValue;
	STRING szNextCustomString;
	NUMBER nVersion;
	BOOL bEndLoop; 
	STRING szNumber, szKeyPath;
	
begin 
    
    // Initialize to blank values
    szNextCustomString = "";
    
	// Set the last value to the 
	bEndLoop = FALSE;
	repeat
		NumToStr(szNumber, gnLastCustomKeyNumber);
		szNextCustomString = "Custom" + szNumber;
		
		StrToNum(nVersion, getLaserficheInstalledVersion());
	 	if ( nVersion == 7) then
	 		szKeyPath = LASERFICHE_TOOLBAR_7 ^ szNextCustomString;
	 	else
	 		szKeyPath = LASERFICHE_TOOLBAR_8 ^ szNextCustomString;
	 	endif;
         
		RegDBSetDefaultRoot(HKEY_CURRENT_USER);                                      
  
  		if ( RegDBKeyExist(szKeyPath) < 0 ) then
			// Need to check under the machine key
			RegDBSetDefaultRoot(HKEY_LOCAL_MACHINE);
			if ( RegDBKeyExist(szKeyPath) < 0) then
				bEndLoop = TRUE;
			endif;
		endif;
		gnLastCustomKeyNumber = gnLastCustomKeyNumber + 1;
	until ( bEndLoop || gnLastCustomKeyNumber >=100);	
	if ( gnLastCustomKeyNumber >= 100) then
		rszNextCustomKey = "";
	else
		rszNextCustomKey = szKeyPath;
	endif;
end;

//////////////////////////////////////////////////////////////////////////////
//
//  FUNCTION:   addLaserficheToolBarButton 
//
//  PURPOSE:    Creates and sets the Custom Keys for the toolbars.
//
//////////////////////////////////////////////////////////////////////////////
function addLaserficheToolBarButton(szDefault, szCommand, szIcon)
	STRING szNextCustomKey;  
	STRING szKeyPath;
	NUMBER nVersion;
	NUMBER nRtnCode; 
begin
	getNextButtonLocationData(szNextCustomKey);
	        
	// Did not find a postion so don't add. User will have to add.
	if ( szNextCustomKey == "" ) then
		return 0;                                                      
	endif;

	RegDBSetDefaultRoot(HKEY_LOCAL_MACHINE);   
	nRtnCode = RegDBCreateKeyEx (szNextCustomKey , "");
	if ( nRtnCode < 0 ) then
		MessageBox(FormatMessage(nRtnCode), MB_OK);
		gbInstalled = FALSE;
		abort;
	endif;
	
	//Set the Default Key
	RegDBSetKeyValueEx ( szNextCustomKey, "", REGDB_STRING, szDefault, -1 );
	RegDBSetKeyValueEx ( szNextCustomKey, "Command", REGDB_STRING, szCommand, -1);
	RegDBSetKeyValueEx ( szNextCustomKey, "Icon", REGDB_STRING, szIcon, -1);
end;

//////////////////////////////////////////////////////////////////////////////
//
//  FUNCTION:   appendBrowserKey
//
//  PURPOSE:    Appends the given string to the Laserfiche Browser Key
//
//////////////////////////////////////////////////////////////////////////////
function appendBrowserKey(szKeyValue)
	STRING strLaserficheBrowserValue, szKeyPath;
	STRING strNewValue;
	NUMBER nType, nSize;
begin
	RegDBSetDefaultRoot(HKEY_CURRENT_USER);  

	// This is only valid for Laserfiche 7
	// Read the key if it does not match the version being installed exit
	RegDBGetKeyValueEx(LASERFICHE_TOOLBAR_7, "Browser", nType, strLaserficheBrowserValue, nSize); 
	strNewValue = strLaserficheBrowserValue + "," + szKeyValue;
	RegDBSetKeyValueEx(LASERFICHE_TOOLBAR_7, "Browser", REGDB_STRING, strNewValue, -1); 
end;

//////////////////////////////////////////////////////////////////////////////
//
//  FUNCTION:   installLaserficheRuntime
//
//  PURPOSE:    To install the Laserfiche runtime
//
//////////////////////////////////////////////////////////////////////////////
function installLaserficheRuntime()
	STRING szProgram;
begin
	
	// Run the Sentinel 64 driver install
	szProgram = INSTALLDIR  ^ "\\LaserficheRuntimeSetup\\setup.exe";
	LaunchAppAndWait(szProgram, "/S /v/qn", LAAW_OPTION_WAIT); 
end;

//---------------------------------------------------------------------------
// OnUninstall
//
// The OnUninstall event is called when uninstallation is started by the
// end user from either the Add/Remove programs or by clicking on
// setup.exe again, after the product has already been installed.
// This event will only be triggered if the "Enable Maintenance"
// property in General Information\Project Properties is set to
// No.  If this property is set to Yes, then the Maintenance
// events will get triggered.  This event is similar to an IS5
// uninstallation.
//---------------------------------------------------------------------------
function OnUninstall()
	BOOL   bvOpt1, bvOpt2;
	string szTitle, szMsg1, szMsg2, szOpt1, szOpt2, svResult, szCaption; 
	string szCmd;
begin
	svResult = SdLoadString(ISWI_IS5_UNINST_MSG);
	szCaption = SdLoadString(IFX_ONMAINTUI_CAPTION);
	Sprintf (svResult, svResult, @PRODUCT_NAME);
	if (IDCANCEL = SprintfBox(MB_OKCANCEL, szCaption, svResult)) then
		abort; 
	endif;
	
	Enable(STATUSEX);

	// Uninstall the ID Shield for laserfiche service
   	szCmd = "/u " + "\"" + PROGRAMFILES ^ EXTRACT_DIR ^ "\\Laserfiche\\bin\\ESLaserficheService.exe\"";
	LaunchAppAndWait( INSTALL_UTIL_PATH , szCmd, LAAW_OPTION_WAIT | LAAW_OPTION_HIDDEN | LAAW_OPTION_SHOW_HOURGLASS );
 
	//////////////////////////////////////
	//DO NOT DELETE.  The below code will
	//initiate the uninstallation process.
	ComponentRemoveAll();
	ComponentTransferData(MEDIA);
	//////////////////////////////////////
	
	// Uninstall the laserfiche runtime
	uninstallLaserficheRuntime();
	
	Disable(STATUSEX);

	bvOpt1 = FALSE;
	bvOpt2 = FALSE;
	szMsg1 = SdLoadString(IFX_SDFINISH_MAINT_MSG1);
	szTitle = SdLoadString(IFX_SDFINISH_MAINT_TITLE);
	SdFinishEx(szTitle, szMsg1, szMsg2, szOpt1, szOpt2, bvOpt1, bvOpt2);
end;

//----------------------------------------------------------------------------
//
//  FUNCTION:   uninstallLaserficheRuntime
//
//  PURPOSE:    Checks to see if the Laserfiche Toolkit runtime is installed
//				and if it is asks if it should be uninstalled. If yes it is 
//				uninstalled if no it is not.
//
//----------------------------------------------------------------------------
function uninstallLaserficheRuntime()
	STRING strUninstallKey;
	NUMBER nType, nSize;
	STRING strUninstall;
	STRING strErrorCode;
	NUMBER nRtnCode;
begin
	// Check if the Laserfiche toolkit runtime is installed.
    if ( IsProductKeyInstalled(LASERFICHE_TOOLKIT_RUNTIME_PRODUCT_CODE) ) then
    	// Ask if it should be uninstalled 
  		if ( MessageBox("Do you wish to uninstall the Laserfiche Integrator's Toolkit 7.2.1 Run-Time Components?\n" +
  						"It is recommended to leave the Laserfiche Tookit installed " +
  						"if the Laserfiche client will still be installed.", MB_YESNO) = IDYES) then
  			Enable(HOURGLASS);
  			// Run the uninstall for the toolkit
			LaunchAppAndWait("msiexec.exe", "/qn /x" + LASERFICHE_TOOLKIT_RUNTIME_PRODUCT_CODE, 
					LAAW_OPTION_WAIT);
			Disable(HOURGLASS);  
		endif;
	endif;				
end;

//----------------------------------------------------------------------------
//
//  FUNCTION:   IsProductKeyInstalled
//
//  PURPOSE:    Checks to see if a product with the given product code is 
//				installed.
//
//----------------------------------------------------------------------------
function BOOL IsProductKeyInstalled( szProductKey)
	STRING strUninstallKey;
begin
	RegDBSetDefaultRoot(HKEY_LOCAL_MACHINE);
	
	// check uninstall key in registry     
	strUninstallKey = REG_PATH_UNINSTALL ^ szProductKey;
	
	if (RegDBKeyExist(strUninstallKey) = 1 ) then
		return TRUE;
	endif;	

	return FALSE;
end;

//---------------------------------------------------------------------------
// OnMaintUIBefore
//
// The OnMaintUIBefore event is called by the framework when the setup is
// running in maintenance mode. By default this event displays UI that
// allows the end user to add or remove features, repair currently
// installed features or uninstall the application.
//---------------------------------------------------------------------------
function OnMaintUIBefore()
	NUMBER nResult, nType;
	STRING szTitle, szMsg, svDir, svResult, szCaption;  
	string szCmd;
begin
	// TO DO: if you want to enable background, window title, and caption bar title   								
	// SetTitle( @PRODUCT_NAME, 24, WHITE );					
	// SetTitle( @PRODUCT_NAME, 0, BACKGROUNDCAPTION );  			
	// SetColor(BACKGROUND,RGB (0, 128, 128));					
	// Enable( FULLWINDOWMODE );						
	// Enable( BACKGROUND );							
	
Dlg_Start:

    // Added in Version 9.5 - Support for REMOVEONLY option.
    if( !REMOVEONLY ) then
		// In standard mode show maintenance dialog
		Disable(BACKBUTTON);
		nType = SdWelcomeMaint(szTitle, szMsg, MODIFY);
		Enable(BACKBUTTON);
	else
        // Hide the initial progress dialog as otherwise the user can
        // click on it, and hide the MessageBox.
        Disable( DIALOGCACHE );

        // In RemoveOnly mode, set to remove.
        nType = REMOVEALL;
    endif;
	
	// Show Uninstall Confirmation Dialog
    if ( nType = REMOVEALL ) then
		nResult = MessageBox( SdLoadString( IFX_MAINTUI_MSG ), MB_YESNO );
		if (nResult != IDYES ) then
            
            if( REMOVEONLY ) then
                // In REMOVEONLY mode, abort the setup.
                abort;
            else
                // In non-REMOVEONLY mode, redisplay the previous dialog.
			    goto Dlg_Start;
            endif;

		endif;
	endif;

	nResult = NEXT;

Dlg_SdFeatureTree:
	if (nType = MODIFY) then
		szTitle = "";
		szMsg = "";
		nResult = SdFeatureTree(szTitle, szMsg, INSTALLDIR, "", 2);
		if (nResult = BACK) goto Dlg_Start;
	endif;

	switch(nType)
		case REMOVEALL: FeatureRemoveAll();
		case REPAIR:    FeatureReinstall();
	endswitch;
    
	// setup default status 
	SetStatusWindow(0, "");
	Enable(STATUSEX);
	StatusUpdate(ON, 100);
	

	
	// Call the uninstall for the laserfiche runtime if this is
	// an uninstall.  This is done here so that the
	// status dialog is displayed while it is uninstalling
	if ( nType = REMOVEALL) then
		// Uninstall the ID Shield for laserfiche service
    	szCmd = "/u " + "\"" + PROGRAMFILES ^ EXTRACT_DIR ^ "\\Laserfiche\\bin\\ESLaserficheService.exe\"";
		LaunchAppAndWait( INSTALL_UTIL_PATH , szCmd, LAAW_OPTION_WAIT | LAAW_OPTION_HIDDEN | LAAW_OPTION_SHOW_HOURGLASS );
		
		uninstallLaserficheRuntime();
	endif;
end;
