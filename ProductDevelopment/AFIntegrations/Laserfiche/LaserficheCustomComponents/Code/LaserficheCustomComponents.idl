// LaserficheCustomComponents.idl : IDL source for LaserficheCustomComponents
//

// This file will be processed by the MIDL tool to
// produce the type library (LaserficheCustomComponents.tlb) and marshalling code.

import "oaidl.idl";
import "ocidl.idl";

[
	uuid(65DAC5F3-70BB-4D35-BD16-32D9D0F4B8B5),
	version(1.0),
	helpstring("ESLaserficheCC 1.0 Type Library")
]
library UCLID_LASERFICHECCLib
{
	//----------------------------------------------------------------------------------------------
	// Imports
	//----------------------------------------------------------------------------------------------
	importlib("stdole2.tlb");
	importlib("..\..\..\..\..\ReusableComponents\COMComponents\UCLIDComponentsLM\COMLM\Code\COMLM.tlb");

	//----------------------------------------------------------------------------------------------
	// Enums
	//----------------------------------------------------------------------------------------------
	typedef
	[
		uuid(80CF431F-0CE3-487c-8094-F92C3103A1A6), 
		helpstring("Extract EConnectionMode")
	]
	enum EConnectionMode
	{
		kDisconnected = 0,  // No active connection to a Laserfiche repository
		kAdministrator = 1, // Active connection with rights necessary for administrative tasks
		kProcess = 2,		// Active connection with rights necessary for on-demand processing (redaction)
		kService = 3,		// Active connection with rights to process in the background service.
		kVerify = 4,		// Active connection with rights necessary for verification
		kSubmit = 5,		// Active connection with rights necessary to submit documents for processing
		kConnect = 6		// Active connection with rights necessary to validate repository status
	} EConnectionMode;


	//----------------------------------------------------------------------------------------------
	// Interfaces
	//----------------------------------------------------------------------------------------------
	[
	object,
	uuid(009C09E3-BDFC-47DC-85B0-C32EBADE42FC),
	dual,
	nonextensible,
	helpstring("IIDShieldLF Interface"),
	pointer_default(unique)
	]
	interface IIDShieldLF : IDispatch
	{
		//------------------------------------------------------------------------------------------
		// PURPOSE:	Provides a login prompt to establish a connection to a Laserfiche repository
		// ARGUMENTS:
		//			eConnectionMode- In what capacity a connection should be established.
		//			pbSuccess- VARIANT_TRUE if a valid connection was established.
		//				VARIANT_FALSE if the user cancelled or the max number of login tries was 
		//				exceeded.
		// NOTE:	If a connection is established, but it doesn't meet the requirements of
		//			eConnectionMode, the connection will be closed and an exception will be thrown.
		[id(1), helpstring("method ConnectPrompt")] HRESULT ConnectPrompt(
			[in] EConnectionMode eConnectionMode, [out, retval] VARIANT_BOOL *pbSuccess);
		//------------------------------------------------------------------------------------------
		// PURPOSE:	Attempts to establish a connection using the provided login credentials
		// ARGUMENTS:
		//			bstrServer- The name of the server hosting the repository (may include port)
		//			bstrRepository- The name of the repository
		//			bstrUser- The name of the Laserfiche user to use when establishing the connection.
		//			bstrPassword- The user's password.
		//			eConnectionMode- In what capacity a connection should be established.
		// NOTE:	If a connection cannot be established an exception will be thrown. If a 
		//			connection is established, but it doesn't meet the requirements of
		//			eConnectionMode, the connection will be closed and an exception will be thrown.
		[id(2), helpstring("method ConnectToRepository")] HRESULT ConnectToRepository(
			[in] BSTR bstrServer, [in] BSTR bstrRepository, [in] BSTR bstrUser, 
			[in] BSTR bstrPassword, [in] EConnectionMode eConnectionMode);
		//------------------------------------------------------------------------------------------
		// PURPOSE:	Obtains the currently open connection being used by the Laserfiche client.
		//			eConnectionMode- In what capacity a connection should be established.
		[id(3), helpstring("method ConnectToActiveClient")] HRESULT ConnectToActiveClient(
			[in] EConnectionMode eConnectionMode, [out, retval] VARIANT_BOOL *pbSuccess);
		//------------------------------------------------------------------------------------------
		// PURPOSE: Closes any open connection and releases all resources needed by the connection.
		[id(4), helpstring("method Disconnect")] HRESULT Disconnect(void);
		//------------------------------------------------------------------------------------------
		// PURPOSE: Displays the ID Shield Administrator Console
		[id(5), helpstring("method ShowAdminConsole")] HRESULT ShowAdminConsole(void);
		//------------------------------------------------------------------------------------------
		// PURPOSE: Performs On-Demand redaction on the Laserfiche Client's current selection set.
		[id(6), helpstring("method RedactSelected")] HRESULT RedactSelected(void);
		//------------------------------------------------------------------------------------------
		// PURPOSE: Submits for background redaction the Laserfiche Client's current selection set.
		[id(7), helpstring("method SubmitSelectedForRedaction")] HRESULT SubmitSelectedForRedaction(void);
		//------------------------------------------------------------------------------------------
		// PURPOSE: Verifies any documents needing verification from the Laserfiche Client's current
		//			selection set.
		[id(8), helpstring("method VerifySelected")] HRESULT VerifySelected(void);
		//------------------------------------------------------------------------------------------
		// PURPOSE: Displays the ID Shield background service's configuration console.
		[id(9), helpstring("method ShowServiceConsole")] HRESULT ShowServiceConsole(void);
		//------------------------------------------------------------------------------------------
		// PURPOSE: Begins background processing to redact any documents submitted for redaction.
		[id(10), helpstring("method StartBackgroundProcessing")] HRESULT StartBackgroundProcessing(void);
		//------------------------------------------------------------------------------------------
		// PURPOSE: Stops background processing after any currently processing documents have
		//			completed processing.
		[id(11), helpstring("method StopBackgroundProcessing")] HRESULT StopBackgroundProcessing(void);
		//------------------------------------------------------------------------------------------
	};

	//----------------------------------------------------------------------------------------------
	// CoClasses
	//----------------------------------------------------------------------------------------------
	[
		uuid(D1944F74-0B53-4565-8F4D-0CEF927C0A42),
		helpstring("IDShieldLF Class")
	]
	coclass IDShieldLF
	{
		[default] interface IIDShieldLF;
	};
};
