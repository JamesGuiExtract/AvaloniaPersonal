/////////////////////////////////////////////////////////////////////////////
//                                                                            
//  File Name:    Setup.rul                                                   
//                                                                            
//  Description:  InstallShield script                                          
//                                                                            
//  Comments:     This minimal project is intended for advanced users. 
//                To create a robust project with step-by-step 
//				  instructions, use the Project Wizard. 
//                                                                                                               
/////////////////////////////////////////////////////////////////////////////

// Include header files /////////////////////////////////////////////////////
#include "ifx.h"

////////////////////// string defines ////////////////////////////
    #define UCLID_DIR "\\UCLID Software\\CommonComponents"
    #define EXTRACT_DIR "\\Extract Systems\\CommonComponents"
    #define REG_PATH_SQL_COMPACT_EDITION "SOFTWARE\\Microsoft\\Microsoft SQL Server Compact Edition\\v3.5"
    #define REG_PATH_SQL_COMPACT_EDITION_32_on_64 "SOFTWARE\\Wow6432Node\\Microsoft\\Microsoft SQL Server Compact Edition\\v3.5"
    #define SQL_COMPACT_EDITION_GUID "{3A9FC03D-C685-4831-94CF-4EDFD3749497}"
    #define SQL_COMPACT_EDITION_GUID_64 "{D4AD39AD-091E-4D33-BB2B-59F6FCB8ADC3}"
    #define REG_PATH_DOT_NET_VER_2_0 "\\SOFTWARE\\Microsoft\\.NETFramework\\policy\\v2.0"
    #define REG_PATH_UNINSTALL "\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Uninstall"   
    #define REG_PATH_UNINSTALL_WOW64 "\\SOFTWARE\\Wow6432Node\\Microsoft\\Windows\\CurrentVersion\\Uninstall"   
    #define FLEX_INDEX_PRODUCT_CODE "{A7DFE34D-A07E-4D57-A624-B758E42A69D4}"
    #define IDSHIELD_PRODUCT_CODE "{158160CD-7B55-462F-8477-7E18B2937D40}"  
    #define LASERFICHE_PRODUCT_CODE "{74E1DF54-C96E-479F-915D-A0A721F9AC8B}"
    #define IDSHIELDOFFICE_PRODUCT_CODE "{A8DDFDC1-069D-42DE-AF69-A78FC232A86A}"
    #define EXTRACT_LM_PRODUCT_CODE "{EB8DE231-8B66-4DE6-A56D-39452D8CF35F}"
    #define LABDE_PRODUCT_CODE "{0E412937-E4FA-4737-A321-00AED69497C7}"
    #define LOG_FILE_PATH CommonAppDataFolder ^ "\\Extract Systems\\LogFiles"
    #define CRYSTAL_REPORTS_GUID "{C484CC8D-03CF-4022-89C4-DB4F02E8A15B}"
    #define INLITE_INSTALLER_EXE "ClearImagePDK.7_0_3253.exe"
    #define EXCEPTION_FILE_NAME "ExtractException.uex"
    #define UCLID_EXCEPTION_FILE_NAME "UCLIDException.uex"
    #define REG_PATH_DOT_NET_40_INSTALL "\\SOFTWARE\\Microsoft\\NET Framework Setup\\NDP\\v4\\Full"  
    #define INSTALL_UTIL_PATH "C:\\WINDOWS\\Microsoft.NET\\Framework\\v4.0.30319\\InstallUtil.exe" 
    #define CLASS_INSTALLER_REG_PATH "Software\\Classes\\Installer\\Products"
    #define SQL_COMPACT_35_SP2_32_INSTALLER_KEY CLASS_INSTALLER_REG_PATH ^ "D30CF9A3586C138449FCE4FD3D474979"  
    #define SQL_COMPACT_35_SP2_64_INSTALLER_KEY CLASS_INSTALLER_REG_PATH ^ "DA93DA4DE19033D4BBB2956FCF8BDA3C"    
    #define CLEAR_IMAGE_UNINSTALL_KEY REG_PATH_UNINSTALL ^ "ClearImage 7 PDK"  
    #define CLEAR_IMAGE_UNINSTALL_KEY_64 REG_PATH_UNINSTALL_WOW64 ^ "ClearImage 7 PDK"    
    #define RDT_PRODUCT_CODE "{735E1622-3990-445F-9E5D-B0D7FDE292A3}"
    #define IDSHIELD_CUSTOMER_RDT_PRODUCT_CODE "{EAA7E74D-09C3-42EB-949F-C8F02D075B45}"  
    #define FLEX_INDEX_CUSTOMER_RDT_PRODUCT_CODE "{0096DE46-974F-48D5-956C-695B2E4A30F6}"
    #define EXTRACT_CATEGORYFILES "Extract Systems\\CategoryFiles"
    
//////////////////// installation declarations ///////////////////

    // In order to have your InstallScript function executed as a custom
    // action by the Windows Installer, it must be prototyped as an 
    // entry-point function.

    // The keyword export identifies MyFunction() as an entry-point function.
    // The argument it accepts must be a handle to the Installer database.
    
      /* export prototype MyFunction(HWND); */  

    // To Do:  Declare global variables, define constants, and prototype user-
    //         defined and DLL functions here.


// ----- DLL function prototypes -----


    // your DLL function prototypes


// ---- script function prototypes -----


    // your script function prototypes    
    prototype MoveRegKeys();
    prototype CopyLicFiles();
	prototype detectRDTInstall();
	prototype InstallDotNET();
    prototype CheckOtherExtractProducts();
    prototype RenameUEXFile();
    prototype InstallInliteKeyDrivers();
    prototype UninstallInliteKeyDrivers();
    prototype InstallCrystalReports();
    prototype CloseApps();
    prototype UninstallCrystalReports12();
    prototype BOOL CheckProductKeyInstalled(STRING, STRING, BYREF STRING, BOOL);
    prototype InstallSQLCE();
    prototype DetectDotNET_40();
    prototype UninstallSQLCE();
    prototype InstallDotNetService(STRING);
    prototype UninstallDotNetService(STRING);    
	prototype BOOL AreOtherExtractProductsInstalled();
	prototype InstallOfficeRedist();
	prototype RegisterLoginNPShellExtension(STRING);
	prototype UnregisterLoginNPShellExtension(STRING);   
	prototype InstallFKB();
	prototype UninstallFKB();
	prototype InstallNuanceLicense(); 
	prototype SetNuanceServicePermissions();     
	prototype SetDCOMPermissions();
	prototype InstallReadme();
	prototype RunRegisterAll();
	prototype UnRegisterAll();
	prototype UninstallSQLCEWithoutPrompt(BOOL);
	prototype UninstallSQLCE32bit();
	prototype UninstallSQLCE64bit();
	prototype BOOL IsCorrectSQLCEInstalled(STRING);
	prototype BOOL Is64BitSQLCEInstalled();
	prototype BOOL Is32BitSQLCEInstalled();
	prototype UninstallSharedItems();
	

    // your global variables
    BOOL gbInstalled;


///////////////////////////////////////////////////////////////////////////////
//
// Function: MoveRegKeys
//
//  Purpose: This function moves registry keys and values from the old UCLID Software keys
//			 to the Extract Systems keys
//	Returns 0 if no errors
///////////////////////////////////////////////////////////////////////////////
function MoveRegKeys()
begin
	// Move any remaining old keys to the new key path
	// Move the keys for Local machine to new Extract Systems settings
	RegDBSetDefaultRoot(HKEY_LOCAL_MACHINE);
	if ( RegDBKeyExist ("Software\\UCLID Software" ) > 0 )  then
		RegDBCopyKeys("Software\\UCLID Software",
					  "Software\\Extract Systems",
					  HKEY_LOCAL_MACHINE,
					  HKEY_LOCAL_MACHINE );
		RegDBDeleteKey("Software\\UCLID Software");
	endif;
	
	// Move the keys for current user to new Extract Systems settings
	RegDBSetDefaultRoot(HKEY_CURRENT_USER);
	if ( RegDBKeyExist ("Software\\UCLID Software" ) > 0 )  then
		RegDBCopyKeys("Software\\UCLID Software",
					  "Software\\Extract Systems",
					  HKEY_CURRENT_USER,
					  HKEY_CURRENT_USER );
		RegDBDeleteKey("Software\\UCLID Software");
	endif;
end; 

///////////////////////////////////////////////////////////////////////////////
//
// Function: CopyLicFiles
//
//  Purpose: This function copies the .lic files from the C:\Program Files\UCLID Software\CommonComponents directory
// 			 to the c:\Program Files\Extract Systems\CommonComponents directory
//	Returns 0 if no errors
///////////////////////////////////////////////////////////////////////////////
function CopyLicFiles()
	STRING strSource;
begin
	strSource  = PROGRAMFILES + UCLID_DIR;
	if ( Is( PATH_EXISTS, strSource )) then
		SRCDIR = strSource;
		TARGETDIR = PROGRAMFILES + EXTRACT_DIR;
		// Copy lic file from old dir to new	
		XCopyFile( "*.lic", "", EXCLUDE_SUBDIR | COMP_UPDATE_DATE);
	endif;
end;
// --- include script file section ---


///////////////////////////////////////////////////////////////////////////////
//
//  FUNCTION:   detectRDTInstall
//
//  EVENT:      Check for installed RDT
//
///////////////////////////////////////////////////////////////////////////////
function detectRDTInstall()
	STRING strRDTUninstallKey;
	NUMBER nSize, nType;
begin     
	RegDBSetDefaultRoot(HKEY_LOCAL_MACHINE);
	// check uninstall key in registry     
	strRDTUninstallKey = REG_PATH_UNINSTALL ^ "\\InstallShield_{735E1622-3990-445F-9E5D-B0D7FDE292A3}";
	
	if (RegDBKeyExist(strRDTUninstallKey) = 1 ) then
		// this means FLEX Index RDT is installed the uninstall can not continue
		if (MODE != SILENTMODE) then
			MessageBox("RDT must be uninstalled before " + @PRODUCT_NAME + " can be removed", SEVERE);
		endif;
		gbInstalled = FALSE;
		abort;
	endif;	
	
	return 0;
end;	
            
            
///////////////////////////////////////////////////////////////////////////////
//
//  FUNCTION:   InstallDotNET
//
//  EVENT:      Installs .NET 2.0 if it is not installed
//
///////////////////////////////////////////////////////////////////////////////
function InstallDotNET()
STRING szProgram;
int nResult, svServiceState;
begin
	// Change the root for the registry
	//RegDBSetDefaultRoot(HKEY_LOCAL_MACHINE);
	//if ( RegDBKeyExist ( REG_PATH_DOT_NET_35_INSTALL ) < 0) then
	//	szProgram = SUPPORTDIR ^ "\\dotnetfx35.exe";
	//	LaunchAppAndWait(szProgram, "", LAAW_OPTION_WAIT); 
	//	SdShowMsg("Setup is Installing .NET Framework 3.5", FALSE);
	//	if ( RegDBKeyExist ( REG_PATH_DOT_NET_35_UNINSTALL ) < 0  ) then
	//		MessageBox(".NET Framework was not successfully Installed, installation will be aborted", SEVERE);
	//		gbInstalled = FALSE;
	//		abort;
	//	endif;
	//endif;
    DetectDotNET_40();
end;

///////////////////////////////////////////////////////////////////////////////
//
//  FUNCTION:   CheckProductKeyInstalled
//
//  EVENT:      Checks for install of a product
//				if bCheckForSame returns true if same version is installed
//				if different version or none returns false
//				if bCheckForSame is false returns true if different version is installed
//				and false if same or not installed.
//
///////////////////////////////////////////////////////////////////////////////
function BOOL CheckProductKeyInstalled(strExpectedVersion, strProductKey, svInstalledVersion, bCheckForSame)
	STRING strUninstallKey;
	STRING strEnvVersion, strRtn;
	NUMBER nSize, nType;
	STRING strMsg;
	STRING strProductName;
	NUMBER nPos; 
	NUMBER i;
begin 
	RegDBSetDefaultRoot(HKEY_LOCAL_MACHINE);
  
	// Create the path for the uninstall key
	strUninstallKey = REG_PATH_UNINSTALL ^ strProductKey;
	                                        
	// If key exists get the version
	if (RegDBKeyExist(strUninstallKey) = 1 ) then
		// Read the key if it does not match the version being installed exit
		RegDBGetKeyValueEx( strUninstallKey, "DisplayVersion", nType, svInstalledVersion, nSize); 

		if (bCheckForSame) then   
			if ( strExpectedVersion = svInstalledVersion ) then
				return TRUE;                            
			endif;
		else
			return strExpectedVersion != svInstalledVersion;
		endif;
	endif;
	                    
	// No previous version was found
	return FALSE;	
end;
            
///////////////////////////////////////////////////////////////////////////////
//
//  FUNCTION:   CheckOtherExtractProducts
//
//  EVENT:      Checks for install a different version
//				than the version being installed.
//
///////////////////////////////////////////////////////////////////////////////
function CheckOtherExtractProducts()
	STRING strUninstallKey;
	STRING strVersion;
	NUMBER nSize, nType;
	STRING strMsg;
	STRING strProductName;
	BOOL bInstalled;
begin
	bInstalled = FALSE;     
	RegDBSetDefaultRoot(HKEY_LOCAL_MACHINE);
 	
    // Check each of the expected version against any installed versions
    if (CheckProductKeyInstalled(IFX_PRODUCT_VERSION, IDSHIELD_PRODUCT_CODE, strVersion, FALSE)) then
    	strMsg = "ID Shield version " + strVersion + " must be uninstalled before product can be installed.";	
    	bInstalled = TRUE;
	elseif (CheckProductKeyInstalled(IFX_PRODUCT_VERSION, FLEX_INDEX_PRODUCT_CODE, strVersion, FALSE)) then
    	strMsg = "FLEX Index version " + strVersion + " must be uninstalled before product can be installed.";	
    	bInstalled = TRUE;
	elseif (CheckProductKeyInstalled(IFX_PRODUCT_VERSION, EXTRACT_LM_PRODUCT_CODE, strVersion, FALSE)) then 
		strMsg = "Extract LM version " + strVersion + " must be uninstalled before product can be installed.";	
    	bInstalled = TRUE;
	elseif (CheckProductKeyInstalled(IFX_PRODUCT_VERSION, LASERFICHE_PRODUCT_CODE, strVersion, FALSE)) then 
		strMsg = "ID Shield for Laserfiche version " + strVersion + " must be uninstalled before product can be installed.";	
    	bInstalled = TRUE;
	elseif (CheckProductKeyInstalled(IFX_PRODUCT_VERSION, IDSHIELDOFFICE_PRODUCT_CODE, strVersion, FALSE)) then 
		strMsg = "ID Shield Office version " + strVersion + " must be uninstalled before product can be installed.";	
    	bInstalled = TRUE;
   	elseif (CheckProductKeyInstalled(IFX_PRODUCT_VERSION, LABDE_PRODUCT_CODE, strVersion, FALSE)) then 
		strMsg = "LabDE version " + strVersion + " must be uninstalled before product can be installed.";	
    	bInstalled = TRUE;
	endif;    	
    
    // If one of the products was installed display dialog and terminate install
	if ( bInstalled ) then
		if (MODE != SILENTMODE) then
			MessageBox(strMsg, SEVERE);
		endif;
		gbInstalled = FALSE;
		abort;
	endif;	

	return 0;
end;	

///////////////////////////////////////////////////////////////////////////////
//
// Function: RenameUEXFile
//
//  Purpose: This function renames exception file if it exist to
//			 "YYYY-MM-DD HHhMMmSSs <EXCEPTION_FILE_NAME>" where the YYYY/MM/DD/etc 
//			 are the year/month/day and other time related fields
//	Returns 0 if no errors
///////////////////////////////////////////////////////////////////////////////
function RenameUEXFile()
	STRING strSource;
	STRING strDest;
	NUMBER nvResult;
	STRING strDate;
	STRING strTime;
	LIST listDateID;
	LIST listTimeID;
	STRING strMonth, strDay, strYear;
	STRING strHour, strMinute, strSeconds;
begin
	strSource  = LOG_FILE_PATH ^ EXCEPTION_FILE_NAME;
	
	// Check if the exception file exists
	if ( Is( FILE_EXISTS, strSource )) then  
		// Get the date
		GetSystemInfo ( DATE , nvResult , strDate );
		
		// Separate date into Month, Day, year
		listDateID = ListCreate(STRINGLIST);
		StrGetTokens ( listDateID , strDate , "-" );
		ListGetFirstString ( listDateID, strMonth );
		ListGetNextString ( listDateID, strDay );
		ListGetNextString ( listDateID, strYear );

		// Get the time
		GetSystemInfo ( TIME , nvResult , strTime );  
		
		// Separate the Time into Hours, Minutes, Seconds
		listTimeID = ListCreate(STRINGLIST);
		StrGetTokens ( listTimeID , strTime , ":" );
		ListGetFirstString ( listTimeID, strHour );
		ListGetNextString ( listTimeID, strMinute );
		ListGetNextString ( listTimeID, strSeconds );
		  
		// Add the leading 0 if the month is only 1 digit
		if (StrLengthChars(strMonth) = 1) then
			strMonth = '0' + strMonth;
		endif;
		                                                 
		// Add the leading 0 if the day is only 1 digit
		if (StrLengthChars(strDay) = 1) then
			strDay = '0' + strDay;
		endif;
			
		// Create the new filename for the exception file
		strDest = LOG_FILE_PATH ^ "\\";
		strDest = strDest + strYear + "-" + strMonth + "-" + strDay;
		strDest = strDest + " " + strHour + "h" + strMinute + "m" + strSeconds + "s ";
		strDest = strDest + EXCEPTION_FILE_NAME;
		
		// Rename exception file
		RenameFile ( strSource , strDest );
	endif;
end;

///////////////////////////////////////////////////////////////////////////////
//
// Function: InstallInliteKeyDrivers
//
//  Purpose: This function installs the drivers for the Inlite Key
///////////////////////////////////////////////////////////////////////////////
function InstallInliteKeyDrivers()
	string szProgram;
begin    
	SdShowMsg("Setup is Installing Inlite drivers.", TRUE);
	szProgram = SUPPORTDIR ^ "\\CbSetup.exe";
    
	if (SYSINFO.nOSMajor >= 6)  then
		LAAW_SHELLEXECUTEVERB = "runas";                                                                                                                      //
	endif;
		
	LaunchAppAndWait(szProgram, "/Q /CRYPTOKEN", LAAW_OPTION_USE_SHELLEXECUTE | LAAW_OPTION_WAIT | LAAW_OPTION_SHOW_HOURGLASS);
	
	szProgram = SUPPORTDIR ^ INLITE_INSTALLER_EXE;
	LaunchAppAndWait(szProgram, "/S ", LAAW_OPTION_USE_SHELLEXECUTE | LAAW_OPTION_WAIT | LAAW_OPTION_SHOW_HOURGLASS);    
	
	// Remove the Nuance Start Menu item  
	DeleteDir( StartMenuFolder ^ "Programs\\ClearImage 7 PDK", ALLCONTENTS); 
	DeleteDir( StartMenuFolder ^ "Programs\\ClearImage 7 PDK", ALLCONTENTS);  
	
	SdShowMsg("Setup is Installing Inlite drivers.", FALSE);
end;

///////////////////////////////////////////////////////////////////////////////
//
// Function: UninstallInliteKeyDrivers
//
//  Purpose: This function uninstalls the drivers for the Inlite Key
///////////////////////////////////////////////////////////////////////////////
function UninstallInliteKeyDrivers()
	string szProgram, clearImagePath;
begin       
  	SdShowMsg("Setup is Uninstalling Inlite drivers.", TRUE);
   
	if (SYSINFO.nOSMajor >= 6)  then
		LAAW_SHELLEXECUTEVERB = "runas";                                                                                                                      //
	endif;
	
   	szProgram = SUPPORTDIR ^ "\\CBSetup.exe";
	LaunchAppAndWait(szProgram, "/Q /U /CRYPTOKEN", LAAW_OPTION_USE_SHELLEXECUTE | LAAW_OPTION_WAIT | LAAW_OPTION_SHOW_HOURGLASS); 

	// Call uninstall for ClearImage on 32 bit
	clearImagePath = "C:\\Program Files\\Inlite\\ClearImage 7 PDK\\INSTALL.LOG";
	LongPathToShortPath(clearImagePath);
	LaunchAppAndWait("\"C:\\Program Files\\Inlite\\ClearImage 7 PDK\\UNWISE.EXE\"", "/s " + clearImagePath, 
		LAAW_OPTION_USE_SHELLEXECUTE | LAAW_OPTION_WAIT | LAAW_OPTION_HIDDEN );

	// Call uninstall for ClearImage on 64 bit
	clearImagePath = "C:\\Program Files (x86)\\Inlite\\ClearImage 7 PDK\\INSTALL.LOG";
	LongPathToShortPath(clearImagePath);
	LaunchAppAndWait("\"C:\\Program Files (x86)\\Inlite\\ClearImage 7 PDK\\UNWISE.EXE\"", "/s " + clearImagePath, 
		LAAW_OPTION_USE_SHELLEXECUTE | LAAW_OPTION_WAIT | LAAW_OPTION_HIDDEN );

	UninstallApplication("ClearImage 7 PDK" , "/S /A /U", LAAW_OPTION_WAIT | LAAW_OPTION_SHOW_HOURGLASS );
	
 	SdShowMsg("Setup is Uninstalling Inlite drivers.", FALSE);
end;

///////////////////////////////////////////////////////////////////////////////
//
// Function: InstallCrystalReports
//
//  Purpose: This function installs the Crystal Reports Runtime.
//	Returns 0 if no errors
///////////////////////////////////////////////////////////////////////////////
function InstallCrystalReports()
STRING szProgram, szCmdLine;
int nResult, svServiceState;
begin
	SdShowMsg("Setup is Installing Crystal Reports 12 Runtime", TRUE);

	if (SYSINFO.nOSMajor >= 6)  then
		LAAW_SHELLEXECUTEVERB = "runas";                                                                                                                      //
	endif;
		
	// Install Crystal Reports
	szProgram = "msiexec";
	szCmdLine = " /qn /norestart /i " + SUPPORTDIR ^ "\\CRRuntime_12_1_mlb.msi";
	LaunchAppAndWait(szProgram, szCmdLine, LAAW_OPTION_USE_SHELLEXECUTE | LAAW_OPTION_WAIT | LAAW_OPTION_SHOW_HOURGLASS); 
	
	SdShowMsg("Setup is Installing Crystal Reports 12 Runtime", FALSE);
end;

///////////////////////////////////////////////////////////////////////////////
//
// Function: CloseApps
//
//  Purpose: To close running apps before installing or uninstalling
///////////////////////////////////////////////////////////////////////////////
function CloseApps()
	string strExtractTRPPath;
begin
	strExtractTRPPath = PROGRAMFILES ^ EXTRACT_DIR ^ "ExtractTRP2.exe";
	LaunchAppAndWait(strExtractTRPPath , "/exit", LAAW_OPTION_WAIT | LAAW_OPTION_HIDDEN | LAAW_OPTION_SHOW_HOURGLASS );
end;


///////////////////////////////////////////////////////////////////////////////
//
// Function: UninstallCrystalReports
//
//  Purpose: This function uninstalls the Crystal Reports Runtime.
//	Returns 0 if no errors
///////////////////////////////////////////////////////////////////////////////
function UninstallCrystalReports12()
STRING szProgram, szCmdLine;
int nResult, svServiceState;
begin
		// Ask user if they wish to unintall CrystalReports
	nResult = MessageBox("Do you wish to uninstall Crystal Reports 12 Runtime?" + 
		"\r\nOther installed applications may use this and uninstalling " + 
		" will cause those applications to work incorrectly." , MB_YESNO );

	if (nResult = IDYES) then
		if (SYSINFO.nOSMajor >= 6)  then
			LAAW_SHELLEXECUTEVERB = "runas";                                                                                                                      //
		endif;
			
		// Install Crystal Reports
		szProgram = "msiexec";
		szCmdLine = " /qn /norestart /x" + CRYSTAL_REPORTS_GUID;
		LaunchAppAndWait(szProgram, szCmdLine, LAAW_OPTION_USE_SHELLEXECUTE | LAAW_OPTION_WAIT | LAAW_OPTION_SHOW_HOURGLASS); 
	    
  	endif;
end;


///////////////////////////////////////////////////////////////////////////////
//
// Function: InstallSQLCE
//
//  Purpose: This function installs the SQL Compact Edition if it is not installed
//	Returns 0 if no errors
///////////////////////////////////////////////////////////////////////////////
function InstallSQLCE()
STRING szProgram, szCmdLine, strUninstallKey;
int nResult, svServiceState;      
STRING szSPLevel;     
number nSize;  
number nType;
begin
	// Change the root for the registry
	RegDBSetDefaultRoot(HKEY_LOCAL_MACHINE);     

	szSPLevel = "";
	nType = REGDB_NUMBER;
	if (!IsCorrectSQLCEInstalled(REG_PATH_SQL_COMPACT_EDITION) ||
			( SYSINFO.bIsWow64 && !IsCorrectSQLCEInstalled(REG_PATH_SQL_COMPACT_EDITION_32_on_64))) then

		// This will uninstall previous version if installed
		UninstallSQLCEWithoutPrompt(FALSE);
			
		SdShowMsg("Setup is Installing SQL Compact Edition", TRUE);

		// Install SQL Compact Edition
		// 32bit needs to be installed even on 64 bit
		szProgram = "msiexec";
		szCmdLine = "/qb- /norestart /i " + SUPPORTDIR ^ "\\SSCERuntime_x86-ENU.msi";
		if (!Is32BitSQLCEInstalled()) then
			LaunchAppAndWait(szProgram, szCmdLine, LAAW_OPTION_WAIT | LAAW_OPTION_HIDDEN | LAAW_OPTION_SHOW_HOURGLASS); 
		endif;

		// If 64 bit OS install 64 version of SSCE	
		if ( SYSINFO.bIsWow64 ) then
			szCmdLine = "/qb- /norestart /i " + SUPPORTDIR ^ "\\SSCERuntime_x64-ENU.msi";
			if (!Is64BitSQLCEInstalled()) then
				LaunchAppAndWait(szProgram, szCmdLine, LAAW_OPTION_WAIT | LAAW_OPTION_HIDDEN | LAAW_OPTION_SHOW_HOURGLASS); 
			endif;
		endif;
		SdShowMsg("Setup is Installing SQL Compact Edition", FALSE);
		//if ( RegDBKeyExist ( REG_PATH_SQL_COMPACT_EDITION ) < 0  ) then
		//	MessageBox("SQL Compact Edition was not successfully Installed, installation will be aborted", SEVERE);
		//	gbInstalled = FALSE;
		//	abort;
		//endif;
	endif;
end;

            
///////////////////////////////////////////////////////////////////////////////
//
//  FUNCTION:   DetectDotNET_40
//
//  EVENT:      Aborts with message if .NET 3.5 is not installed
//
///////////////////////////////////////////////////////////////////////////////
function DetectDotNET_40()
STRING szProgram, svValue;
int nResult, svServiceState;       
NUMBER nvType, nvSize;
begin
	// Change the root for the registry
	RegDBSetDefaultRoot(HKEY_LOCAL_MACHINE);
 
 	svValue = "";   
	RegDBGetKeyValueEx (REG_PATH_DOT_NET_40_INSTALL, "Install", nvType, svValue, nvSize);
	
	if ( svValue != "1") then
		gbInstalled  = FALSE;
		if (MODE != SILENTMODE) then
			MessageBox("Microsoft .NET 4.0 must be installed before running this install.", MB_OK);
		endif;
		abort;
	endif; 
end;

///////////////////////////////////////////////////////////////////////////////
//
// Function: UninstallSQLCE
//
//  Purpose: This function uninstalls the SQL Server Compact Edition.
//	Returns 0 if no errors
///////////////////////////////////////////////////////////////////////////////
function UninstallSQLCE()
int nResult;
begin  
	if (Is32BitSQLCEInstalled() || Is64BitSQLCEInstalled()) then
		// Ask user if they wish to unintall SQL Server CE
		nResult = MessageBox("Do you wish to uninstall SQL Compact Edition?" + 
			"\r\nOther installed applications may use this and uninstalling " + 
			" will cause those applications to work incorrectly." , MB_YESNO );

		if (nResult = IDYES) then
			UninstallSQLCEWithoutPrompt(TRUE);
		endif;
	endif;
end;

///////////////////////////////////////////////////////////////////////////////
//
// Function: UninstallSQLCEWithoutPrompt
//
//  Purpose: This function uninstalls the SQL Server Compact Edition without
// 		     prompting the user to uninstall.
//
///////////////////////////////////////////////////////////////////////////////
function UninstallSQLCEWithoutPrompt(bUninstallAll)
STRING szProgram, szCmdLine, szRegPathToUse32Bit;
int nResult, svServiceState;
begin 
	if (SYSINFO.bIsWow64) then
		szRegPathToUse32Bit = REG_PATH_SQL_COMPACT_EDITION_32_on_64;
	else
		szRegPathToUse32Bit = REG_PATH_SQL_COMPACT_EDITION;
	endif;
	
	if (Is32BitSQLCEInstalled() && (bUninstallAll || !IsCorrectSQLCEInstalled(szRegPathToUse32Bit))) then
		UninstallSQLCE32bit();
	endif;
	
	if (SYSINFO.bIsWow64 &&  Is64BitSQLCEInstalled() && (bUninstallAll || 
			!IsCorrectSQLCEInstalled(REG_PATH_SQL_COMPACT_EDITION))) then
		UninstallSQLCE64bit();
	endif;
end;

///////////////////////////////////////////////////////////////////////////////
//
// Function: UninstallSQLCE32bit
//
//  Purpose: This function uninstalls the32 bit SQL Server Compact Edition without
// 		     prompting the user to uninstall if the correct version is not already
//			 installed
//
///////////////////////////////////////////////////////////////////////////////
function UninstallSQLCE32bit()
STRING szProgram, szCmdLine;
int nResult, svServiceState;
begin  
	if (!Is32BitSQLCEInstalled()) then
		return 0;
	endif;
	
	SdShowMsg("Setup is Uninstalling SQL Compact Edition 32 Bit", TRUE);

	LaunchAppAndWait("msiexec", "/x" + SQL_COMPACT_EDITION_GUID + " /qb-", 
		LAAW_OPTION_WAIT | LAAW_OPTION_HIDDEN | LAAW_OPTION_SHOW_HOURGLASS);
	
	SdShowMsg("Setup is Uninstalling SQL Compact Edition 32 Bit", FALSE);
end;

///////////////////////////////////////////////////////////////////////////////
//
// Function: UninstallSQLCE64bit
//
//  Purpose: This function uninstalls the 64 bit SQL Server Compact Edition without
// 		     prompting the user to uninstall if the correct version is not already
//			 installed
//
///////////////////////////////////////////////////////////////////////////////
function UninstallSQLCE64bit()
STRING szProgram, szCmdLine;
int nResult, svServiceState;
begin  
	if (!Is64BitSQLCEInstalled()) then
		return 0;
	endif;
	
	SdShowMsg("Setup is Uninstalling SQL Compact Edition 64 Bit", TRUE);
		
   	// If 64 bit OS install 64 version of SSCE	
	LaunchAppAndWait("msiexec", "/x" + SQL_COMPACT_EDITION_GUID_64 + " /qb-",
		LAAW_OPTION_WAIT | LAAW_OPTION_HIDDEN | LAAW_OPTION_SHOW_HOURGLASS);			 
	
   	SdShowMsg("Setup is Uninstalling SQL Compact Edition 64 Bit", FALSE);
end;

///////////////////////////////////////////////////////////////////////////////
//
//  FUNCTION:   IsCorrectSQLCEInstalled
//
//  EVENT:      Checks the keys for the correct version
//	Returns:	True if correct version is installed
//	Arguments:  szRegPathForSQLCE - is the base path to check for the correct version
//					and correct service pack
//
///////////////////////////////////////////////////////////////////////////////
function BOOL IsCorrectSQLCEInstalled(szRegPathForSQLCE)
STRING szSPLevel, szVersion;
int nSize, nType;
BOOL rtnValue;
begin
	REGDB_OPTIONS = REGDB_OPTIONS | REGDB_OPTION_WOW64_64KEY; 
	rtnValue = RegDBKeyExist ( szRegPathForSQLCE ) = 1;
		
	rtnValue = rtnValue && RegDBGetKeyValueEx(szRegPathForSQLCE, "Version", nType, 
			szVersion, nSize) = 0;
	rtnValue = rtnValue && RegDBGetKeyValueEx(szRegPathForSQLCE, "ServicePackLevel", nType, 
			szSPLevel, nSize) = 0;
	rtnValue = rtnValue && (szVersion = "3.5.8080.0");
	rtnValue = rtnValue && (szSPLevel = "2");
	REGDB_OPTIONS = REGDB_OPTIONS & ~REGDB_OPTION_USE_DEFAULT_OPTIONS;
	return rtnValue;
end;

///////////////////////////////////////////////////////////////////////////////
//
//  FUNCTION:   Is64BitSQLCEInstalled
//
//	Returns:	True if 64 bit SQL CE is installed
//
///////////////////////////////////////////////////////////////////////////////
function BOOL Is64BitSQLCEInstalled()
STRING szVersion;
BOOL rtnValue;
int nSize, nType;
begin
	if (!SYSINFO.bIsWow64) then
		return FALSE;
	endif;
	REGDB_OPTIONS = REGDB_OPTIONS | REGDB_OPTION_WOW64_64KEY;
	rtnValue = RegDBKeyExist(REG_PATH_SQL_COMPACT_EDITION) = 1;
	rtnValue = rtnValue && RegDBGetKeyValueEx(REG_PATH_SQL_COMPACT_EDITION, "Version", nType, 
			szVersion, nSize) = 0;
	REGDB_OPTIONS = REGDB_OPTIONS & ~REGDB_OPTION_USE_DEFAULT_OPTIONS;
	return rtnValue;

end;

///////////////////////////////////////////////////////////////////////////////
//
//  FUNCTION:   Is32BitSQLCEInstalled
//
//	Returns:	True if SQL CE is installed
//
///////////////////////////////////////////////////////////////////////////////	
function BOOL Is32BitSQLCEInstalled()
STRING szVersion, szKeyToUse;
BOOL rtnValue;
int nSize, nType;
begin
	REGDB_OPTIONS = REGDB_OPTIONS | REGDB_OPTION_WOW64_64KEY;
	if (SYSINFO.bIsWow64) then
		szKeyToUse = REG_PATH_SQL_COMPACT_EDITION_32_on_64;
	else
		szKeyToUse = REG_PATH_SQL_COMPACT_EDITION;
	endif;
	
	rtnValue = RegDBKeyExist(szKeyToUse) = 1;
	rtnValue = rtnValue && RegDBGetKeyValueEx(szKeyToUse, "Version", nType, 
			szVersion, nSize) = 0;
	REGDB_OPTIONS = REGDB_OPTIONS & ~REGDB_OPTION_USE_DEFAULT_OPTIONS;
	return rtnValue;
end;


///////////////////////////////////////////////////////////////////////////////
//
//  FUNCTION:   InstallDotNetService
//
//  EVENT:      Installs a Dot Net service 
//
///////////////////////////////////////////////////////////////////////////////
function InstallDotNetService(strServiceName)
begin
	LaunchAppAndWait( INSTALL_UTIL_PATH , strServiceName, LAAW_OPTION_WAIT | LAAW_OPTION_HIDDEN | LAAW_OPTION_SHOW_HOURGLASS );
end;
     
     
///////////////////////////////////////////////////////////////////////////////
//
//  FUNCTION:   UninstallDotNetService
//
//  EVENT:      Uninstalls a Dot Net service 
//
///////////////////////////////////////////////////////////////////////////////
function UninstallDotNetService(strServiceName)
STRING szCmdLine;
begin
	if (SYSINFO.nOSMajor >= 6)  then
		LAAW_SHELLEXECUTEVERB = "runas";                                                                                                                      //
	endif;
	
	szCmdLine = "/u " + strServiceName;            
	LaunchAppAndWait( INSTALL_UTIL_PATH , szCmdLine, LAAW_OPTION_WAIT | LAAW_OPTION_HIDDEN | LAAW_OPTION_SHOW_HOURGLASS );
end;
     
     
///////////////////////////////////////////////////////////////////////////////
//
// Function: AreOtherExtractProductsInstalled
//
//  Purpose: This function checks for other Extract Systems products
//			 returns TRUE if there is another product installed
// NOTE: Does not check to see if LM is installed
///////////////////////////////////////////////////////////////////////////////
function BOOL AreOtherExtractProductsInstalled()
BOOL bReturnValue;
STRING strVersion;
begin
    bReturnValue = FALSE;
	RegDBSetDefaultRoot(HKEY_LOCAL_MACHINE);
 	
    // Check each of the expected version against any installed versions
    if ((PRODUCT_GUID!= IDSHIELD_PRODUCT_CODE) &&                                              	
    		CheckProductKeyInstalled(IFX_PRODUCT_VERSION, IDSHIELD_PRODUCT_CODE, strVersion, TRUE)) then
    	bReturnValue = TRUE;
	elseif ((PRODUCT_GUID != FLEX_INDEX_PRODUCT_CODE) && 
    		CheckProductKeyInstalled(IFX_PRODUCT_VERSION, FLEX_INDEX_PRODUCT_CODE, strVersion, TRUE)) then
    	bReturnValue = TRUE;
	elseif ((PRODUCT_GUID != LASERFICHE_PRODUCT_CODE) && 
    		CheckProductKeyInstalled(IFX_PRODUCT_VERSION, LASERFICHE_PRODUCT_CODE, strVersion, TRUE)) then 
    	bReturnValue = TRUE;
	elseif ((PRODUCT_GUID != IDSHIELDOFFICE_PRODUCT_CODE) && 
    		CheckProductKeyInstalled(IFX_PRODUCT_VERSION, IDSHIELDOFFICE_PRODUCT_CODE, strVersion, TRUE)) then 
    	bReturnValue = TRUE;
   	elseif ((PRODUCT_GUID != LABDE_PRODUCT_CODE) && 
    		CheckProductKeyInstalled(IFX_PRODUCT_VERSION, LABDE_PRODUCT_CODE, strVersion, TRUE)) then 
    	bReturnValue = TRUE;
	endif;
	
	return bReturnValue;    	
end;


///////////////////////////////////////////////////////////////////////////////
//
// Function: InstallOfficeRedist
//
//  Purpose: This function installs the Office redist.
//	Returns 0 if no errors
///////////////////////////////////////////////////////////////////////////////
function InstallOfficeRedist()
STRING szProgram, szCmdLine;
int nResult, svServiceState;
begin
	SdShowMsg("Setup is Installing Microsoft Office Redistributable", TRUE);
	
	// Install Microsoft Office Redistributable
	szProgram = "msiexec";
	szCmdLine = " /qn /norestart /i " + SUPPORTDIR ^ "\\o2007pia.msi";
	LaunchAppAndWait(szProgram, szCmdLine, LAAW_OPTION_WAIT | LAAW_OPTION_SHOW_HOURGLASS); 
	
	SdShowMsg("Setup is Installing Microsoft Office Redistributable", FALSE);
end;

///////////////////////////////////////////////////////////////////////////////
//
// Function: RegisterLoginNPShellExtension
//
//  Purpose: This function rgisters a LoginNP shell extension
///////////////////////////////////////////////////////////////////////////////
function RegisterLoginNPShellExtension(strExtension)
	string szProgram;
	string szArguments;
begin    
  	SdShowMsg("Setup is registering shell extension.", TRUE);
   
   	szProgram = SUPPORTDIR ^ "\\RegisterExtensionDotNet40_x86.exe";
   	szArguments = "-i \""  + PROGRAMFILES ^ EXTRACT_DIR ^ strExtension + "\"";
	LaunchAppAndWait(szProgram, szArguments, LAAW_OPTION_WAIT | LAAW_OPTION_HIDDEN | LAAW_OPTION_SHOW_HOURGLASS); 

  	SdShowMsg("Setup is registering shell extension.", FALSE);

	// Register for 64 bit also
	if ( SYSINFO.bIsWow64 ) then
	  	SdShowMsg("Setup is registering 64 bit shell extension.", TRUE);
   		szProgram = SUPPORTDIR ^ "\\RegisterExtensionDotNet40_x64.exe";
		LaunchAppAndWait(szProgram, szArguments, LAAW_OPTION_WAIT |  LAAW_OPTION_SHOW_HOURGLASS); 
		SdShowMsg("Setup is registering 64 bit shell extension.", TRUE);
	endif;
	
  	SdShowMsg("Setup is registering shell extension.", FALSE);
end;        

///////////////////////////////////////////////////////////////////////////////
//
// Function: UnregisterLoginNPShellExtension
//
//  Purpose: This function unregisters a LoginNP shell extension
///////////////////////////////////////////////////////////////////////////////
function UnregisterLoginNPShellExtension(strExtension)
	string szProgram;  
	string szArguments;
begin       
  	SdShowMsg("Setup is unregistering shell extension.", TRUE);
   
   	szProgram = SUPPORTDIR ^ "\\RegisterExtensionDotNet40_x86.exe";
   	szArguments = "-u "  + PROGRAMFILES ^ EXTRACT_DIR ^ strExtension;
	LaunchAppAndWait(szProgram, szArguments, LAAW_OPTION_WAIT | LAAW_OPTION_HIDDEN | LAAW_OPTION_SHOW_HOURGLASS); 

	// Register for 64 bit also
	if ( SYSINFO.bIsWow64 ) then
   		szProgram = SUPPORTDIR ^ "\\RegisterExtensionDotNet40_x64.exe";
		LaunchAppAndWait(szProgram, szArguments, LAAW_OPTION_WAIT | LAAW_OPTION_HIDDEN | LAAW_OPTION_SHOW_HOURGLASS); 
	endif;

 	SdShowMsg("Setup is unregistering shell extension.", FALSE);
end;

///////////////////////////////////////////////////////////////////////////////
//
// Function: InstallFKB
//
//  Purpose: This function installs the included FKB update
///////////////////////////////////////////////////////////////////////////////
function InstallFKB() 
	string szProgram, szCmdLine; 
	string szInstallToRun;
begin             
	SdShowMsg("Setup is Installing Extract Systems FKB", TRUE);
	
	// Install FKB 
	szProgram = "msiexec"; 
	szInstallToRun = SUPPORTDIR ^ "\\Extract Systems FKB.msi";
	LongPathToQuote(szInstallToRun, TRUE);
	szCmdLine = "/qb- /norestart /i " + szInstallToRun ;
	LaunchAppAndWait(szProgram, szCmdLine, LAAW_OPTION_WAIT | LAAW_OPTION_HIDDEN | LAAW_OPTION_SHOW_HOURGLASS); 
	
	SdShowMsg("Setup is Installing Extract Systems FKB", FALSE);
end;

///////////////////////////////////////////////////////////////////////////////
//
// Function: UninstallFKB
//
//  Purpose: This function prompts to ask if you want to uninstall the FKB
//			 
///////////////////////////////////////////////////////////////////////////////
function UninstallFKB()
begin
end;


///////////////////////////////////////////////////////////////////////////////
//
// Function: InstallNuanceLicense
//
//  Purpose: This function prompts to ask if you want to uninstall the FKB
//			 
///////////////////////////////////////////////////////////////////////////////
function InstallNuanceLicense()
	string szPathToInstaller;
begin      
	SdShowMsg("Setup is Installing Nuance Licenses", TRUE);               
	
	szPathToInstaller = PROGRAMFILES ^ "\\Common Files\\Nuance\\Licensing\\NuanceLT";
	LaunchAppAndWait(szPathToInstaller, "Load \"" + PROGRAMFILES ^ EXTRACT_DIR ^ "Nuance.lcxz\"",
		LAAW_OPTION_WAIT | LAAW_OPTION_HIDDEN | LAAW_OPTION_SHOW_HOURGLASS);
                
	ALLUSERS = 1;
	
	// Remove the Nuance Start Menu item  
	DeleteDir( StartMenuFolder ^ "Programs\\Nuance", ALLCONTENTS); 
	DeleteDir( StartMenuFolder ^ "Programs\\Nuance", ALLCONTENTS);
		
	SdShowMsg("Setup is Installing Nuance Licenses", FALSE);                          
	
	SetNuanceServicePermissions();
end;

///////////////////////////////////////////////////////////////////////////////
//
// Function: SetNuanceServicePermissions
//
//  Purpose: This runs a batch file to change the permissions on the Nuance
// 				service
//			 
///////////////////////////////////////////////////////////////////////////////
function SetNuanceServicePermissions()
	string szRegAllCmdLine;
begin      
	SdShowMsg("Setup is Setting permissions for Nuance Service", TRUE);
	szRegAllCmdLine = "\"" + PROGRAMFILES + EXTRACT_DIR ^ "SetNuanceServicePermissions.bat\"";
	
	LaunchAppAndWait( szRegAllCmdLine, "/s", LAAW_OPTION_WAIT | LAAW_OPTION_HIDDEN | LAAW_OPTION_SHOW_HOURGLASS );
 	
	SdShowMsg("Setup is Setting permissions for Nuance Service", FALSE);                          
end;

function  OnRMFilesInUse (szMessage)
begin 
	return IDIGNORE;
end  ;


///////////////////////////////////////////////////////////////////////////////
//
// Function: SetDCOMPermissions
//
//  Purpose: This set the permissions of the SSOCR2.exe and FAMProcess.exe
//			 
///////////////////////////////////////////////////////////////////////////////
function SetDCOMPermissions()   
	string szDCOMPerm;
begin
	szDCOMPerm = "\"" + PROGRAMFILES ^ EXTRACT_DIR ^ "dcomperm.exe\"";
	LaunchAppAndWait( szDCOMPerm, "-al {08463A92-A444-48AF-8822-693C4F6E1F08} set users permit level:l", LAAW_OPTION_WAIT | LAAW_OPTION_HIDDEN | LAAW_OPTION_SHOW_HOURGLASS );
	LaunchAppAndWait( szDCOMPerm, "-aa {08463A92-A444-48AF-8822-693C4F6E1F08} set users permit level:l", LAAW_OPTION_WAIT | LAAW_OPTION_HIDDEN | LAAW_OPTION_SHOW_HOURGLASS );
	LaunchAppAndWait( szDCOMPerm, "-al {752139E2-5977-4AD2-9E26-BE3B9235524C} set users permit level:l", LAAW_OPTION_WAIT | LAAW_OPTION_HIDDEN | LAAW_OPTION_SHOW_HOURGLASS );
	LaunchAppAndWait( szDCOMPerm, "-aa {752139E2-5977-4AD2-9E26-BE3B9235524C} set users permit level:l", LAAW_OPTION_WAIT | LAAW_OPTION_HIDDEN | LAAW_OPTION_SHOW_HOURGLASS );
end;


///////////////////////////////////////////////////////////////////////////////
//
// Function: InstallReadme
//
//  Purpose: This copies the appropriate License file to readme(<product>).txt
//			 
///////////////////////////////////////////////////////////////////////////////
function InstallReadme()
	string szReadmeName;
begin
	// Determine name of readme based on version
	if (PRODUCT_GUID == IDSHIELD_PRODUCT_CODE) then
		szReadmeName = "Readme(IDShield).txt";
	elseif (PRODUCT_GUID == FLEX_INDEX_PRODUCT_CODE) then
		szReadmeName = "Readme(FlexIndex).txt";
	elseif (PRODUCT_GUID == LABDE_PRODUCT_CODE) then
		szReadmeName = "Readme(LabDE).txt";
	endif;
	
	CopyFile(SUPPORTDIR ^ "license.txt", PROGRAMFILES + EXTRACT_DIR ^ szReadmeName);
	
end;

/////////////////////////////////////////////////////////////////////////////////
//
// Function: RunRegisterAll
//
// Purpose: Run RegisterAll.bat file in CommonComponents
//
/////////////////////////////////////////////////////////////////////////////////
function RunRegisterAll()
	string szPathForRegisterAll, szRegAllCmdLine, szResult;
	INT nResult;
begin
       
	if (SYSINFO.nOSMajor >= 6)  then
		LAAW_SHELLEXECUTEVERB = "runas";                                                                                                                      //
	endif;
	
	szPathForRegisterAll = PROGRAMFILES ^ EXTRACT_DIR;
		
	szRegAllCmdLine = "\"" + szPathForRegisterAll + "\\RegisterAll.bat\"";
	
	// Register Dlls
	nResult = LaunchApplication( szRegAllCmdLine, "/s", szPathForRegisterAll, SW_HIDE, 
		INFINITE, LAAW_OPTION_USE_SHELLEXECUTE | LAAW_OPTION_CHANGEDIRECTORY | 
					LAAW_OPTION_WAIT | LAAW_OPTION_HIDDEN | 
					LAAW_OPTION_SHOW_HOURGLASS );

end;

/////////////////////////////////////////////////////////////////////////////////
//
// Function: UnRegisterAll
//
// Purpose: Run UnRegisterAll.bat file in CommonComponents
//
/////////////////////////////////////////////////////////////////////////////////
function UnRegisterAll()
	string szPathForUnRegisterAll, szRegAllCmdLine, szResult;
	INT nResult;
begin
       
	if (SYSINFO.nOSMajor >= 6)  then
		LAAW_SHELLEXECUTEVERB = "runas";                                                                                                                      //
	endif;
	
	szPathForUnRegisterAll = PROGRAMFILES ^ EXTRACT_DIR;
		
	szRegAllCmdLine = "\"" + szPathForUnRegisterAll + "\\UnRegisterAll.bat\"";
	
	// Register Dlls
	nResult = LaunchApplication( szRegAllCmdLine, "/s", szPathForUnRegisterAll, SW_HIDE, 
		INFINITE, LAAW_OPTION_USE_SHELLEXECUTE | LAAW_OPTION_CHANGEDIRECTORY | 
					LAAW_OPTION_WAIT | LAAW_OPTION_HIDDEN | 
					LAAW_OPTION_SHOW_HOURGLASS );

end;

/////////////////////////////////////////////////////////////////////////////////
//
// Function: UninstallSharedItems
//
// Purpose: uninstall and clean up for last product uninstalled
//
/////////////////////////////////////////////////////////////////////////////////
function UninstallSharedItems()
begin
	// Check if other products are installed before uninstalling these items
	if (AreOtherExtractProductsInstalled() == FALSE) then
		// Stop the services first
		ServiceStopService("Extract Systems Exception Service");
		ServiceStopService("Extract Systems FDRS Service");
		ServiceStopService("Extract Systems IPC Service");    
		ServiceStopService("Nuance Licensing Service");
		
		// Unregister the shell extension
		UnregisterLoginNPShellExtension("Extract.Utilities.ShellExtensions.dll");

		// Uninstall ESFAMService
		UninstallDotNetService("\"" + PROGRAMFILES + EXTRACT_DIR ^ "ESFAMService.exe\"");
		
		// Uninstall the ESFDRSService.exe 
		UninstallDotNetService( "\"" + PROGRAMFILES + EXTRACT_DIR ^ "ESFDRSService.exe\"");   
		
		// Uninstall the Extract.ExceptionService
		UninstallDotNetService( "\"" + PROGRAMFILES + EXTRACT_DIR ^ "Extract.ExceptionService.exe\"");      
		
		// UnInstall the ESIPCService
		UninstallDotNetService( "\"" + PROGRAMFILES + EXTRACT_DIR ^ "ESIPCService.exe\"");   
		
		// Uninstall the ESAppMonitorService
		UninstallDotNetService( "\"" + PROGRAMFILES + EXTRACT_DIR ^ "ESAppMonitorService.exe\"");  
		
		if (MODE != SILENTMODE) then
			// Uninstall Crystal Reports
			UninstallCrystalReports12();
			UninstallSQLCE ();
		endif;
		
		// Register the shell extension
		UnregisterLoginNPShellExtension("Extract.Utilities.ShellExtensions.dll");
		
		UninstallInliteKeyDrivers();

		UnRegisterAll();
		
	endif;
	
	// Delete all lst files
	DeleteFile(CommonAppDataFolder ^ EXTRACT_CATEGORYFILES ^ "*.LST");

end;

//---------------------------------------------------------------------------
// OnBegin
//
// The OnBegin event is called directly by the framework after the setup
// initializes.
//---------------------------------------------------------------------------
function OnBegin()
begin
	// TO DO: you may change default non-UI setting, for example
	//
	// You may also perform your custom initialization steps, check requirements, etc.
	
	gbInstalled = FALSE;
end;