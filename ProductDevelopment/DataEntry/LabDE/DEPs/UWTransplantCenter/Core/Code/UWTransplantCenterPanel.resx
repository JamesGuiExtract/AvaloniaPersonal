<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="_laboratoryIdentifier.AutoUpdateQuery" xml:space="preserve">
    <value>&lt;Declarations&gt;
&lt;Regex Name='Digits' SelectionMode='FIRST' Pattern='[\d]+'&gt;&lt;Attribute&gt;../../../LabInfo/Address/Address1&lt;/Attribute&gt;&lt;/Regex&gt;
&lt;Regex Name='Street' SelectionMode='FIRST' Pattern='((\b(?!ROAD\b)(?!BLVD\b)(?!DRIVE\b)(?!DR\.\b)(?!BOULEVARD\b)(?!AVE\b)(?!AVENUE\b)(?!PKWY\b)(?!PARKWAY\b)(?!WAY\b)(?!EAST\b)(?!SOUTH\b)(?!NORTH\b)(?!STREET\b)(?!RD\.\b)(?!AVE\.\b)(?!ST\.\b)(?!BLVD\.\b)(?!BOX\b)[A-Za-z]{3,})|(\d+(ST|ND|RD|TH)))'&gt;&lt;Attribute&gt;../../../LabInfo/Address/Address1&lt;/Attribute&gt;&lt;/Regex&gt;

&lt;Regex Name='FiveCharLab' SelectionMode='FIRST' Pattern='(\b(?!LABORATORY\b)(?!LAB\.?\b)(?!LABORATORIES\b)(?!MEDICAL\b)[-A-Za-z&amp;apos;]{5,})'&gt;&lt;Attribute&gt;../../../LabInfo/Name&lt;/Attribute&gt;&lt;/Regex&gt;
&lt;Regex Name='SecondWordLab' SelectionMode='FIRST' Pattern='(?&amp;lt;=[-A-Za-z&amp;apos;]{5,}\x20)(\b(?!LABORATORY\b)(?!LAB\.?\b)(?!LABORATORIES\b)(?!MEDICAL\b)[-A-Za-z&amp;apos;]{3,})'&gt;&lt;Attribute&gt;../../../LabInfo/Name&lt;/Attribute&gt;&lt;/Regex&gt;
&lt;Regex Name='FirstTwoWordsLab' SelectionMode='FIRST' Pattern='[-&amp;apos;\w]+\s[-&amp;apos;\w]+'&gt;&lt;Attribute&gt;../../../LabInfo/Name&lt;/Attribute&gt;&lt;/Regex&gt;
&lt;Regex Name='LabNameUpToComma' SelectionMode='FIRST' Pattern='.*(?=,.*)'&gt;&lt;Attribute&gt;../../../LabInfo/Name&lt;/Attribute&gt;&lt;/Regex&gt;

			
&lt;Expression Name='DigitsNotEmpty'&gt;
(&lt;Digits/&gt; == '') ? '___Empty___' : &lt;Digits/&gt;
&lt;/Expression&gt;
&lt;Expression Name='StreetNotEmpty'&gt;
(&lt;Street/&gt; == '') ? '___Empty___' : &lt;Street/&gt;
&lt;/Expression&gt;
&lt;Expression Name='FiveCharLabNotEmpty'&gt;
(&lt;FiveCharLab/&gt; == '') ? '___Empty___' : &lt;FiveCharLab/&gt;
&lt;/Expression&gt;
&lt;Expression Name='SecondWordLabNotEmpty'&gt;
(&lt;SecondWordLab/&gt; == '') ? '___Empty___' : &lt;SecondWordLab/&gt;
&lt;/Expression&gt;
&lt;Expression Name='FirstTwoWordsLabNotEmpty'&gt;
(&lt;FirstTwoWordsLab/&gt; == '') ? '___Empty___' : &lt;FirstTwoWordsLab/&gt;
&lt;/Expression&gt;
&lt;Expression Name='LabNameUpToCommaNotEmpty'&gt;
(&lt;LabNameUpToComma/&gt; == '') ? '___Empty___' : &lt;LabNameUpToComma/&gt;
&lt;/Expression&gt;

&lt;/Declarations&gt;

&lt;!-- Add spatial info to address fields --&gt;
&lt;Query Default='True'&gt;&lt;Attribute SpatialMode='Only'&gt;../../../LabInfo/Name&lt;/Attribute&gt;&lt;Attribute SpatialMode='Only'&gt;../../../LabInfo/Address/City&lt;/Attribute&gt;&lt;Attribute SpatialMode='Only'&gt;../../../LabInfo/Address/State&lt;/Attribute&gt;&lt;Attribute SpatialMode='Only'&gt;../../../LabInfo/Address/ZipCode&lt;/Attribute&gt;&lt;/Query&gt;

&lt;Query&gt;&lt;SQL&gt;SELECT LabName FROM LabAddresses WHERE LabCode IS NOT NULL AND LabCode = SUBSTRING(&lt;Attribute&gt;../LabCode&lt;/Attribute&gt;,1,25)&lt;/SQL&gt;&lt;/Query&gt;
			
&lt;!-- Look for exact name match --&gt;
&lt;Query&gt;&lt;SQL&gt;SELECT LabName FROM LabAddresses WHERE LabName LIKE LOWER(&lt;Attribute SelectionMode='FIRST'&gt;../../../LabInfo/Name&lt;/Attribute&gt;) + '%'&lt;/SQL&gt;&lt;/Query&gt;

&lt;!-- Look for extracted Address1 and City/Zip for match --&gt;
&lt;Query&gt;&lt;SQL&gt;SELECT LabName FROM LabAddresses WHERE Address1 LIKE &lt;Attribute&gt;../../../LabInfo/Address/Address1&lt;/Attribute&gt; and Zip LIKE SUBSTRING(&lt;Attribute&gt;../../../LabInfo/Address/ZipCode&lt;/Attribute&gt;,1,5) + '%'&lt;/SQL&gt;&lt;/Query&gt;
&lt;Query&gt;&lt;SQL&gt;SELECT LabName FROM LabAddresses WHERE Address1 LIKE &lt;Attribute&gt;../../../LabInfo/Address/Address1&lt;/Attribute&gt; and City LIKE LOWER(&lt;Attribute&gt;../../../LabInfo/Address/City&lt;/Attribute&gt;) + '%'&lt;/SQL&gt;&lt;/Query&gt;

&lt;!-- Look for Digits and 3+ character non-directional and non-street string in extracted Address1 and City for match --&gt;
&lt;Query&gt;&lt;SQL&gt;SELECT LabName FROM LabAddresses WHERE Address1 LIKE '%' + LOWER(&lt;DigitsNotEmpty/&gt;) + '%' + LOWER(&lt;StreetNotEmpty/&gt;) + '%' and City LIKE LOWER(&lt;Attribute&gt;../../../LabInfo/Address/City&lt;/Attribute&gt;) + '%'&lt;/SQL&gt;&lt;/Query&gt;

&lt;!-- Look for Digits in extracted Address1 and matching City or 1st 5 of ZipCode for match --&gt;
&lt;Query&gt;&lt;SQL&gt;SELECT LabName FROM LabAddresses WHERE Address1 LIKE '%' + LOWER(&lt;DigitsNotEmpty/&gt;) + '%' and Zip LIKE SUBSTRING(&lt;Attribute&gt;../../../LabInfo/Address/ZipCode&lt;/Attribute&gt;,1,5) + '%'&lt;/SQL&gt;&lt;/Query&gt;
&lt;Query&gt;&lt;SQL&gt;SELECT LabName FROM LabAddresses WHERE Address1 LIKE '%' + LOWER(&lt;DigitsNotEmpty/&gt;) + '%' and City LIKE '%' + LOWER(&lt;Attribute&gt;../../../LabInfo/Address/City&lt;/Attribute&gt;) + '%'&lt;/SQL&gt;&lt;/Query&gt;

&lt;!-- Look for 3+ character non-ordinal and non-street string in extracted Address1 and City or 1st 5 of ZipCode for match --&gt;
&lt;Query&gt;&lt;SQL&gt;SELECT LabName FROM LabAddresses WHERE Address1 LIKE '%' + LOWER(&lt;StreetNotEmpty/&gt;) + '%' and Zip LIKE SUBSTRING(&lt;Attribute&gt;../../../LabInfo/Address/ZipCode&lt;/Attribute&gt;,1,5) + '%'&lt;/SQL&gt;&lt;/Query&gt;
&lt;Query&gt;&lt;SQL&gt;SELECT LabName FROM LabAddresses WHERE Address1 LIKE '%' + LOWER(&lt;StreetNotEmpty/&gt;) + '%' and City LIKE LOWER(&lt;Attribute&gt;../../../LabInfo/Address/City&lt;/Attribute&gt;) + '%'&lt;/SQL&gt;&lt;/Query&gt;
	
&lt;!-- Look for Name of extracted LabName, minus common phrases, and matching LabName for match --&gt;
&lt;Query&gt;&lt;SQL&gt;SELECT LabName FROM LabAddresses WHERE LabName LIKE '%' + REPLACE(REPLACE(REPLACE(REPLACE(&lt;Attribute SelectionMode='FIRST'&gt;../../../LabInfo/Name&lt;/Attribute&gt;, ' ', '%'), 'LABORATORY', '%'),'LABORATORIES', '%'), 'MEDICAL', '%') + '%'&lt;/SQL&gt;&lt;/Query&gt;
&lt;Query&gt;&lt;SQL&gt;SELECT LabName FROM LabAddresses WHERE LabName LIKE '%' + REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(&lt;Attribute SelectionMode='FIRST'&gt;../../../LabInfo/Name&lt;/Attribute&gt;, ' ', '%'), 'LABORATORY', '%'),'LABORATORIES', '%'), 'MEDICAL', '%'), 'CENTER', '%') + '%'&lt;/SQL&gt;&lt;/Query&gt;
		
&lt;!-- Look for substring of extracted LabName and matching Street Number, City, or Zip for match --&gt;
&lt;Query&gt;&lt;SQL&gt;SELECT LabName FROM LabAddresses WHERE LabName LIKE '%' + LOWER(&lt;FirstTwoWordsLabNotEmpty/&gt;) + '%' and Zip LIKE SUBSTRING(&lt;Attribute&gt;../../../LabInfo/Address/ZipCode&lt;/Attribute&gt;,1,5) + '%'&lt;/SQL&gt;&lt;/Query&gt;
&lt;Query&gt;&lt;SQL&gt;SELECT LabName FROM LabAddresses WHERE LabName LIKE '%' + LOWER(&lt;FirstTwoWordsLabNotEmpty/&gt;) + '%' and City LIKE '%' + LOWER(&lt;Attribute&gt;../../../LabInfo/Address/City&lt;/Attribute&gt;) + '%'&lt;/SQL&gt;&lt;/Query&gt;
&lt;Query&gt;&lt;SQL&gt;SELECT LabName FROM LabAddresses WHERE LabName LIKE '%' + LOWER(&lt;FirstTwoWordsLabNotEmpty/&gt;) + '%' and Address1 LIKE '%' + LOWER(&lt;DigitsNotEmpty/&gt;) + '%'&lt;/SQL&gt;&lt;/Query&gt;
			
&lt;Query&gt;&lt;SQL&gt;SELECT LabName FROM LabAddresses WHERE LabName LIKE '%' + LOWER(&lt;FiveCharLabNotEmpty/&gt;) + '%' + LOWER(&lt;SecondWordLabNotEmpty/&gt;) + '%' and Zip LIKE SUBSTRING(&lt;Attribute&gt;../../../LabInfo/Address/ZipCode&lt;/Attribute&gt;,1,5) + '%'&lt;/SQL&gt;&lt;/Query&gt;
&lt;Query&gt;&lt;SQL&gt;SELECT LabName FROM LabAddresses WHERE LabName LIKE '%' + LOWER(&lt;FiveCharLabNotEmpty/&gt;) + '%' + LOWER(&lt;SecondWordLabNotEmpty/&gt;) + '%' and City LIKE '%' + LOWER(&lt;Attribute&gt;../../../LabInfo/Address/City&lt;/Attribute&gt;) + '%'&lt;/SQL&gt;&lt;/Query&gt;
&lt;Query&gt;&lt;SQL&gt;SELECT LabName FROM LabAddresses WHERE LabName LIKE '%' + LOWER(&lt;FiveCharLabNotEmpty/&gt;) + '%' + LOWER(&lt;SecondWordLabNotEmpty/&gt;) + '%' and Address1 LIKE '%' + LOWER(&lt;DigitsNotEmpty/&gt;) + '%'&lt;/SQL&gt;&lt;/Query&gt;
		
&lt;Query&gt;&lt;SQL&gt;SELECT LabName FROM LabAddresses WHERE LabName LIKE '%' + LOWER(&lt;FiveCharLabNotEmpty/&gt;) + '%' and Zip LIKE SUBSTRING(&lt;Attribute&gt;../../../LabInfo/Address/ZipCode&lt;/Attribute&gt;,1,5) + '%'&lt;/SQL&gt;&lt;/Query&gt;
&lt;Query&gt;&lt;SQL&gt;SELECT LabName FROM LabAddresses WHERE LabName LIKE '%' + LOWER(&lt;FiveCharLabNotEmpty/&gt;) + '%' and City LIKE '%' + LOWER(&lt;Attribute&gt;../../../LabInfo/Address/City&lt;/Attribute&gt;) + '%'&lt;/SQL&gt;&lt;/Query&gt;
&lt;Query&gt;&lt;SQL&gt;SELECT LabName FROM LabAddresses WHERE LabName LIKE '%' + LOWER(&lt;FiveCharLabNotEmpty/&gt;) + '%' and Address1 LIKE '%' + LOWER(&lt;DigitsNotEmpty/&gt;) + '%'&lt;/SQL&gt;&lt;/Query&gt;
	
&lt;Query&gt;&lt;SQL&gt;SELECT LabName FROM LabAddresses WHERE LabName LIKE '%' + LOWER(&lt;SecondWordLabNotEmpty/&gt;) + '%' and Zip LIKE SUBSTRING(&lt;Attribute&gt;../../../LabInfo/Address/ZipCode&lt;/Attribute&gt;,1,5) + '%'&lt;/SQL&gt;&lt;/Query&gt;
&lt;Query&gt;&lt;SQL&gt;SELECT LabName FROM LabAddresses WHERE LabName LIKE '%' + LOWER(&lt;SecondWordLabNotEmpty/&gt;) + '%' and City LIKE '%' + LOWER(&lt;Attribute&gt;../../../LabInfo/Address/City&lt;/Attribute&gt;) + '%'&lt;/SQL&gt;&lt;/Query&gt;
&lt;Query&gt;&lt;SQL&gt;SELECT LabName FROM LabAddresses WHERE LabName LIKE '%' + LOWER(&lt;SecondWordLabNotEmpty/&gt;) + '%' and Address1 LIKE '%' + LOWER(&lt;DigitsNotEmpty/&gt;) + '%'&lt;/SQL&gt;&lt;/Query&gt;


&lt;!-- Look for LabName substrings after replacement and also for Zip or City --&gt;
&lt;Query&gt;&lt;SQL&gt;SELECT LabName FROM LabAddresses WHERE LabName LIKE '%' + SUBSTRING(REPLACE(REPLACE(REPLACE(REPLACE(UPPER(&lt;Attribute SelectionMode='FIRST'&gt;../../../LabInfo/Name&lt;/Attribute&gt;), ' ', '%'), 'LABORATORY', '%'),'LABORATORIES', '%'), 'MEDICAL', '%'), 1, 10) + '%' and Zip LIKE SUBSTRING(&lt;Attribute&gt;../../../LabInfo/Address/ZipCode&lt;/Attribute&gt;,1,5) + '%'&lt;/SQL&gt;&lt;/Query&gt;
&lt;Query&gt;&lt;SQL&gt;SELECT LabName FROM LabAddresses WHERE LabName LIKE '%' + SUBSTRING(REPLACE(REPLACE(REPLACE(REPLACE(UPPER(&lt;Attribute SelectionMode='FIRST'&gt;../../../LabInfo/Name&lt;/Attribute&gt;), ' ', '%'), 'LABORATORY', '%'),'LABORATORIES', '%'), 'MEDICAL', '%'), 1, 10) + '%' and City LIKE '%' + LOWER(&lt;Attribute&gt;../../../LabInfo/Address/City&lt;/Attribute&gt;) + '%'&lt;/SQL&gt;&lt;/Query&gt;
&lt;Query&gt;&lt;SQL&gt;SELECT LabName FROM LabAddresses WHERE LabName LIKE SUBSTRING(REPLACE(REPLACE(REPLACE(REPLACE(UPPER(&lt;Attribute SelectionMode='FIRST'&gt;../../../LabInfo/Name&lt;/Attribute&gt;), ' ', '%'), 'LABORATORY', '%'),'LABORATORIES', '%'), 'MEDICAL', '%'), 1, 3) + '%' and Zip LIKE SUBSTRING(&lt;Attribute&gt;../../../LabInfo/Address/ZipCode&lt;/Attribute&gt;,1,5) + '%'&lt;/SQL&gt;&lt;/Query&gt;


&lt;!-- Look for Digits and 3+ character non-directional and not-street string in extracted Address1 --&gt;
&lt;Query&gt;&lt;SQL&gt;SELECT LabName FROM LabAddresses WHERE Address1 LIKE '%' + LOWER(&lt;DigitsNotEmpty/&gt;) + '%' + LOWER(&lt;StreetNotEmpty/&gt;) + '%'&lt;/SQL&gt;&lt;/Query&gt;

&lt;!-- Look for 1st two words then 1st two words after 1st 5-letter word for match --&gt;
&lt;Query&gt;&lt;SQL&gt;SELECT LabName FROM LabAddresses WHERE LabName LIKE '%' + LOWER(&lt;FirstTwoWordsLabNotEmpty/&gt;) + '%'&lt;/SQL&gt;&lt;/Query&gt;
&lt;Query&gt;&lt;SQL&gt;SELECT LabName FROM LabAddresses WHERE LabName LIKE '%' + LOWER(&lt;FiveCharLabNotEmpty/&gt;) + '%' + LOWER(&lt;SecondWordLabNotEmpty/&gt;) + '%'&lt;/SQL&gt;&lt;/Query&gt;

&lt;!-- Look for substring of extracted labname + extracted City in LabName for match --&gt;
&lt;Query&gt;&lt;SQL&gt;SELECT LabName FROM LabAddresses WHERE LabName LIKE '%' + LOWER(&lt;FiveCharLabNotEmpty/&gt;) + '%' + LOWER(&lt;Attribute&gt;../../../LabInfo/Address/City&lt;/Attribute&gt;) + '%'&lt;/SQL&gt;&lt;/Query&gt;

&lt;!-- Look for entire ZipCode in extracted Zip for match --&gt;
&lt;Query&gt;&lt;SQL&gt;SELECT LabName FROM LabAddresses WHERE Zip LIKE LOWER(&lt;Attribute&gt;../../../LabInfo/Address/ZipCode&lt;/Attribute&gt;) + '%'&lt;/SQL&gt;&lt;/Query&gt;

&lt;!-- Look for just first 5 of ZipCode in extracted Zip for match --&gt;
&lt;Query&gt;&lt;SQL&gt;SELECT LabName FROM LabAddresses WHERE Zip LIKE SUBSTRING(&lt;Attribute&gt;../../../LabInfo/Address/ZipCode&lt;/Attribute&gt;,1,5) + '%'&lt;/SQL&gt;&lt;/Query&gt;</value>
  </data>
  <metadata name="_orderNumberColumn.UserAddedColumn" type="System.Boolean, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089">
    <value>True</value>
  </metadata>
  <metadata name="_testName.UserAddedColumn" type="System.Boolean, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089">
    <value>True</value>
  </metadata>
  <data name="_testName.AutoUpdateQuery" xml:space="preserve">
    <value>&lt;Query&gt;&lt;SQL&gt;SELECT Name FROM LabOrder WHERE EpicCode = SUBSTRING(&lt;Attribute&gt;../EpicCode&lt;/Attribute&gt;,1,25)&lt;/SQL&gt;&lt;/Query&gt;
&lt;Query&gt;&lt;SQL&gt;SELECT Name FROM LabOrder WHERE Code = SUBSTRING(&lt;Attribute&gt;.&lt;/Attribute&gt;,1,25)&lt;/SQL&gt;&lt;/Query&gt;</value>
  </data>
  <data name="_testName.ValidationQuery" xml:space="preserve">
    <value>&lt;Declarations&gt;
	&lt;SQL Name='MandatoryTests'&gt;SELECT TestCode FROM LabOrderTest
		INNER JOIN LabOrder ON LabOrderTest.OrderCode = LabOrder.Code
		WHERE LabOrder.Code = &lt;Attribute&gt;../OrderCode&lt;/Attribute&gt; AND Mandatory = 1&lt;/SQL&gt;
	&lt;Attribute Name='ExistingTests' SelectionMode='List'&gt;../Component/TestCode&lt;/Attribute&gt;
	&lt;Expression Name='MissingTests'&gt;
		(&lt;MandatoryTests  Type='string[]'/&gt; - &lt;ExistingTests Type='string[]'/&gt;).sort()
	&lt;/Expression&gt;
	&lt;Complex Name='ValidationMessage'&gt;Missing mandatory test(s): &lt;MissingTests StringList=', '/&gt;&lt;/Complex&gt;
&lt;/Declarations&gt;
&lt;Query&gt;&lt;SQL&gt;SELECT Name FROM LabOrder WHERE EpicCode IS NOT NULL ORDER BY Name&lt;/SQL&gt;&lt;/Query&gt;
&lt;Query ValidationListType='ValidationListOnly' ValidValue='' ValidationMessage='ValidationMessage' ValidationWarning='1'&gt;
	&lt;MissingTests/&gt;
&lt;/Query&gt;</value>
  </data>
  <metadata name="_orderCode.UserAddedColumn" type="System.Boolean, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089">
    <value>True</value>
  </metadata>
  <metadata name="_componentDate.UserAddedColumn" type="System.Boolean, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089">
    <value>True</value>
  </metadata>
  <data name="_componentDate.AutoUpdateQuery" xml:space="preserve">
    <value>&lt;Expression&gt;(&lt;Attribute Name='Value'&gt;.&lt;/Attribute&gt; matches '^\d{1,2}[-/\\]\d{1,2}[-/\\](\d{2}|\d{4})$')
	?	&lt;Expression&gt;
			((&lt;RegEx Pattern='^\d{1,2}(?=[-/\\])' Name='Month'&gt;&lt;Value/&gt;&lt;/RegEx&gt;).Length == 2)
				? &lt;Month/&gt;
				: '0' + &lt;Month/&gt;
		&lt;/Expression&gt;
		+ '/' +
		&lt;Expression&gt;
			((&lt;RegEx Pattern='(?&amp;lt;=^\d{1,2}[-/\\])\d{1,2}(?=[-/\\])' Name='Day'&gt;&lt;Value/&gt;&lt;/RegEx&gt;).Length == 2)
				? &lt;Day/&gt;
				: '0' + &lt;Day/&gt;
		&lt;/Expression&gt;
		+ '/' +
		&lt;Expression&gt;
			((&lt;RegEx Pattern='(?&amp;lt;=\d{1,2}[-/\\])(\d{2}|\d{4})$' Name='Year'&gt;&lt;Value/&gt;&lt;/RegEx&gt;).Length == 4)
				? &lt;Year/&gt;
				: '20' + &lt;Year/&gt;
		&lt;/Expression&gt;
	: 	&lt;Expression&gt;&lt;Value/&gt; matches '\d{8}'
			? &lt;Value/&gt;.Substring(0,2) + '/' + &lt;Value/&gt;.Substring(2,2) + '/' + &lt;Value/&gt;.Substring(4,4)
			: &lt;Value/&gt;
		&lt;/Expression&gt;
&lt;/Expression&gt;</value>
  </data>
  <data name="_laboratoryTestTime.AutoUpdateQuery" xml:space="preserve">
    <value>&lt;Expression&gt;
	((String.IsNullOrEmpty(&lt;RegEx Pattern='^[0-2]?\d[0-5]\d$'&gt;&lt;Attribute Name='Value'&gt;.&lt;/Attribute&gt;&lt;/RegEx&gt;))
		? (String.IsNullOrEmpty(&lt;RegEx Pattern='^[0-2]?\d:[0-5]\d:\d{2}$'&gt;&lt;Value/&gt;&lt;/RegEx&gt;))
			? &lt;Value/&gt;
			: &lt;Value/&gt;.Substring(0, 5)
		: &lt;Value/&gt;.Insert(&lt;Value/&gt;.Length - 2, ':'))
&lt;/Expression&gt;</value>
  </data>
  <metadata name="_componentResultDate.UserAddedColumn" type="System.Boolean, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089">
    <value>True</value>
  </metadata>
  <metadata name="_componentResultTime.UserAddedColumn" type="System.Boolean, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089">
    <value>True</value>
  </metadata>
  <data name="_componentResultTime.AutoUpdateQuery" xml:space="preserve">
    <value>&lt;Expression&gt;
	((String.IsNullOrEmpty(&lt;RegEx Pattern='^[0-2]?\d[0-5]\d$'&gt;&lt;Attribute Name='Value'&gt;.&lt;/Attribute&gt;&lt;/RegEx&gt;))
		? (String.IsNullOrEmpty(&lt;RegEx Pattern='^[0-2]?\d:[0-5]\d:\d{2}$'&gt;&lt;Value/&gt;&lt;/RegEx&gt;))
			? &lt;Value/&gt;
			: &lt;Value/&gt;.Substring(0, 5)
		: &lt;Value/&gt;.Insert(&lt;Value/&gt;.Length - 2, ':'))
&lt;/Expression&gt;</value>
  </data>
  <metadata name="_componentName.UserAddedColumn" type="System.Boolean, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089">
    <value>True</value>
  </metadata>
  <data name="_componentName.AutoUpdateQuery" xml:space="preserve">
    <value>&lt;Query&gt;&lt;SQL&gt;SELECT LabTest.OfficialName FROM LabTest INNER JOIN LabOrderTest On LabTest.TestCode = LabOrderTest.TestCode WHERE LabOrderTest.OrderCode = SUBSTRING(&lt;Attribute&gt;../OrderCode&lt;/Attribute&gt;,1,25) AND LabTest.TestCode = SUBSTRING(&lt;Attribute&gt;TestCode&lt;/Attribute&gt;,1,25)&lt;/SQL&gt;&lt;/Query&gt;
&lt;Query&gt;&lt;SQL&gt;SELECT LabTest.OfficialName FROM LabTest, AlternateTestName, LabOrderTest WHERE LabTest.TestCode = AlternateTestName.TestCode AND LabTest.TestCode = LabOrderTest.TestCode AND LabOrderTest.OrderCode = SUBSTRING(&lt;Attribute&gt;../OrderCode&lt;/Attribute&gt;,1,25) AND AlternateTestName.Name = SUBSTRING(&lt;Attribute&gt;.&lt;/Attribute&gt;,1,50)&lt;/SQL&gt;&lt;/Query&gt;
&lt;Query&gt;&lt;SQL&gt;SELECT LabTest.OfficialName FROM LabTest INNER JOIN LabOrderTest On LabTest.TestCode = LabOrderTest.TestCode WHERE LabOrderTest.OrderCode = SUBSTRING(&lt;Attribute&gt;../OrderCode&lt;/Attribute&gt;,1,25) AND LabTest.TestCode = SUBSTRING(&lt;Attribute&gt;.&lt;/Attribute&gt;,1,25)&lt;/SQL&gt;&lt;/Query&gt;</value>
  </data>
  <data name="_componentName.ValidationQuery" xml:space="preserve">
    <value>&lt;SQL&gt;SELECT LabTest.OfficialName FROM LabTest INNER JOIN LabOrderTest On LabTest.TestCode = LabOrderTest.TestCode WHERE LabOrderTest.OrderCode = SUBSTRING(&lt;Attribute&gt;../OrderCode&lt;/Attribute&gt;,1,25) ORDER BY LabTest.OfficialName&lt;/SQL&gt;</value>
  </data>
  <metadata name="_testCode.UserAddedColumn" type="System.Boolean, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089">
    <value>True</value>
  </metadata>
  <data name="_testCode.AutoUpdateQuery" xml:space="preserve">
    <value>&lt;SQL&gt;SELECT LabTest.TestCode FROM LabTest INNER JOIN LabOrderTest On LabTest.TestCode = LabOrderTest.TestCode WHERE LabOrderTest.OrderCode = SUBSTRING(&lt;Attribute&gt;../../OrderCode&lt;/Attribute&gt;,1,25) AND OfficialName = SUBSTRING(&lt;Attribute&gt;..&lt;/Attribute&gt;,1,255)&lt;/SQL&gt;</value>
  </data>
  <data name="_testCode.ValidationQuery" xml:space="preserve">
    <value>&lt;SQL&gt;SELECT LabTest.TestCode FROM LabTest INNER JOIN LabOrderTest On LabTest.TestCode = LabOrderTest.TestCode WHERE LabOrderTest.OrderCode = SUBSTRING(&lt;Attribute&gt;../../OrderCode&lt;/Attribute&gt;,1,25) ORDER BY LabTest.TestCode&lt;/SQL&gt;</value>
  </data>
  <metadata name="_componentValue.UserAddedColumn" type="System.Boolean, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089">
    <value>True</value>
  </metadata>
  <metadata name="_componentUnits.UserAddedColumn" type="System.Boolean, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089">
    <value>True</value>
  </metadata>
  <metadata name="_componentRefRange.UserAddedColumn" type="System.Boolean, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089">
    <value>True</value>
  </metadata>
  <data name="_componentFlag.ValidationQuery" xml:space="preserve">
    <value>&lt;Declarations&gt;
	&lt;RegEx Name='Flag' Pattern='^A$'&gt;&lt;Attribute&gt;.&lt;/Attribute&gt;&lt;/RegEx&gt;
	&lt;!--Allow for value of #, #-#, &gt;#, &lt;#, &gt;=#, &lt;=#, &gt;/=#, &lt;=#, POS, NEG--&gt;
	&lt;Expression Name='RawValue'&gt;
		(&lt;Attribute&gt;../Value&lt;/Attribute&gt; matches '(?i)\bPOS(ITIVE)?\b') ? '&amp;gt;=0'
		: (&lt;Attribute&gt;../Value&lt;/Attribute&gt; matches '(?i)\bNEG(ATIVE)?\b') ? '-1'
		: &lt;RegEx Pattern='[\s&amp;gt;&amp;lt;/=]{0,3}-?[\d\.\-\s]+'&gt;&lt;Attribute&gt;../Value&lt;/Attribute&gt;&lt;/RegEx&gt;.Replace(',','').Replace(' ','')
	&lt;/Expression&gt;
	&lt;Expression Name='Value'&gt;&lt;RegEx Pattern='-?[\d\.,]+'&gt;&lt;RawValue/&gt;&lt;/RegEx&gt;.Replace(',', '')&lt;/Expression&gt;
	&lt;!--If the value is a range, extract the low and/or high limit of the range--&gt;
	&lt;Expression Name='TempLowValue'&gt;
		&lt;RegEx Pattern='([\d\.,]+(?=\s?-\s?\d+))|((?&amp;lt;=&amp;gt;\s?/?=?\s?)[\d\.,]+)'&gt;&lt;RawValue/&gt;&lt;/RegEx&gt;.Replace(',','')
	&lt;/Expression&gt;
	&lt;Expression Name='ValueHasRangeMin'&gt;(&lt;TempLowValue/&gt; != '')&lt;/Expression&gt;
	&lt;Expression Name='LowValue'&gt; (&lt;TempLowValue/&gt; == '') ? &lt;Value/&gt; : &lt;TempLowValue/&gt;&lt;/Expression&gt;
	&lt;Expression Name='TempHighValue'&gt;
		&lt;RegEx Pattern='((?&amp;lt;=\d+\s?-\s?)[\d\.,]+)|((?&amp;lt;=&amp;lt;\s?/?=?\s?)[\d\.,]+)'&gt;&lt;RawValue/&gt;&lt;/RegEx&gt;.Replace(',','')
	&lt;/Expression&gt;
	&lt;Expression Name='ValueHasRangeMax'&gt;(&lt;TempHighValue/&gt; != '')&lt;/Expression&gt;
	&lt;Expression Name='HighValue'&gt; (&lt;TempHighValue/&gt; == '') ? &lt;Value/&gt; : &lt;TempHighValue/&gt;&lt;/Expression&gt;
	&lt;Expression Name='Range'&gt;
		(&lt;Attribute&gt;../Range&lt;/Attribute&gt; matches '(?i)\bPOS(ITIVE)?\b') ? '&amp;gt;=0'
		: (&lt;Attribute&gt;../Range&lt;/Attribute&gt; matches '(?i)\bNEG(ATIVE)?\b') ? '&amp;lt;0'
		: &lt;Attribute&gt;../Range&lt;/Attribute&gt;
	&lt;/Expression&gt;
	&lt;!--Allow for range of #, #-#, &gt;#, &lt;#, &gt;=#, &lt;=#, &gt;/=#, &lt;=#, POS, NEG--&gt;
	&lt;Expression Name='MinValueOrEqual' &gt;
		&lt;RegEx Pattern='(^\s*([\d\.,]+)\s*$)|([\d\.,]+(?=\s?-\s?\d+))|((?&amp;lt;=&amp;gt;\s?/?=\s?)[\d\.,]+)'&gt;&lt;Range/&gt;&lt;/RegEx&gt;.Replace(',','')
	&lt;/Expression&gt;
	&lt;Expression Name='MinValueNotEqual'&gt;
		(&lt;MinValueOrEqual/&gt; == '')
			? &lt;RegEx Pattern='(?&amp;lt;=&amp;gt;\s?)[\d\.,]+'&gt;&lt;Range/&gt;&lt;/RegEx&gt;.Replace(',','')
			: ''
	&lt;/Expression&gt;
	&lt;Expression Name='HasMinValue'&gt;
		(&lt;MinValueOrEqual/&gt; != '') or (&lt;MinValueNotEqual/&gt; != '')
	&lt;/Expression&gt;
	&lt;Expression Name='MaxValueOrEqual' &gt;
		&lt;RegEx Pattern='(^\s*([\d\.,]+)\s*$)|((?&amp;lt;=\d+\s?-\s?)[\d\.,]+)|((?&amp;lt;=&amp;lt;\s?/?=\s?)[\d\.,]+)'&gt;&lt;Range/&gt;&lt;/RegEx&gt;.Replace(',','')
	&lt;/Expression&gt;
	&lt;Expression Name='MaxValueNotEqual'&gt;
		string.IsNullOrWhiteSpace(&lt;MaxValueOrEqual/&gt;)
			? &lt;RegEx Pattern='(?&amp;lt;=&amp;lt;\s?)[\d\.,]+'&gt;&lt;Range/&gt;&lt;/RegEx&gt;.Replace(',','')
			: ''
	&lt;/Expression&gt;
	&lt;Expression Name='HasMaxValue'&gt;
		!string.IsNullOrWhiteSpace(&lt;MaxValueOrEqual/&gt;) or !string.IsNullOrWhiteSpace(&lt;MaxValueNotEqual/&gt;)
	&lt;/Expression&gt;
	&lt;Expression Name='InRangeLow'&gt;
		&lt;!--If we don't have a value and a range minimum to compare consider low range boundary validated--&gt;
		(&lt;LowValue/&gt; == '') or (!&lt;HasMinValue/&gt;) or
		&lt;!--Compare using &gt;= check if appropriate--&gt;
		(&lt;MinValueOrEqual/&gt; != '' and
			(&lt;LowValue Type='double'/&gt; &amp;gt;= &lt;MinValueOrEqual Type='double'/&gt;)) or
		&lt;!--Compare using &gt; check if appropriate--&gt;
		(&lt;MinValueNotEqual/&gt; != '' and
			(&lt;LowValue Type='double'/&gt; &amp;gt; &lt;MinValueNotEqual Type='double'/&gt;))
	&lt;/Expression&gt;
	&lt;Expression Name='AmbiguousLowValue'&gt;
		&lt;HasMinValue/&gt; and (&lt;ValueHasRangeMin/&gt; or &lt;ValueHasRangeMax/&gt;) and 
			(((&lt;MinValueOrEqual/&gt; != '') and (!&lt;ValueHasRangeMax/&gt; or &lt;HighValue/&gt; &amp;gt;= &lt;MinValueOrEqual/&gt;) and (!&lt;ValueHasRangeMin/&gt; or &lt;LowValue/&gt; &amp;lt; &lt;MinValueOrEqual/&gt;)) or
			 ((&lt;MinValueNotEqual/&gt; != '') and (!&lt;ValueHasRangeMax/&gt; or &lt;HighValue/&gt; &amp;gt; &lt;MinValueNotEqual/&gt;) and (!&lt;ValueHasRangeMin/&gt; or &lt;LowValue/&gt; &amp;lt;= &lt;MinValueNotEqual/&gt;)))
	&lt;/Expression&gt;
	&lt;Expression Name='InRangeHigh'&gt;
		&lt;!--If we don't have a value and a range maximum to compare consider high range boundary validated--&gt;
		(&lt;HighValue/&gt; == '') or  (!&lt;HasMaxValue/&gt;) or
		&lt;!--Compare using &gt;= check if appropriate--&gt;
		(&lt;MaxValueOrEqual/&gt; != '' and
			(&lt;HighValue Type='double'/&gt; &amp;lt;= &lt;MaxValueOrEqual Type='double'/&gt;)) or
		&lt;!--Compare using &gt; check if appropriate--&gt;
		(&lt;MaxValueNotEqual/&gt; != '' and
			(&lt;HighValue Type='double'/&gt; &amp;lt; &lt;MaxValueNotEqual Type='double'/&gt;))
	&lt;/Expression&gt;
	&lt;Expression Name='AmbiguousHighValue'&gt;
		&lt;HasMaxValue/&gt; and (&lt;ValueHasRangeMin/&gt; or &lt;ValueHasRangeMax/&gt;) and 
			(((&lt;MaxValueOrEqual/&gt; != '') and (!&lt;ValueHasRangeMin/&gt; or &lt;LowValue/&gt; &amp;lt;= &lt;MaxValueOrEqual/&gt;) and (!&lt;ValueHasRangeMax/&gt; or &lt;HighValue/&gt; &amp;gt; &lt;MaxValueOrEqual/&gt;)) or
			 ((&lt;MaxValueNotEqual/&gt; != '') and (!&lt;ValueHasRangeMin/&gt; or &lt;LowValue/&gt; &amp;lt; &lt;MaxValueNotEqual/&gt;) and (!&lt;ValueHasRangeMax/&gt; or &lt;HighValue/&gt; &amp;gt;= &lt;MaxValueNotEqual/&gt;)))
	&lt;/Expression&gt;
&lt;/Declarations&gt;
&lt;Query&gt;[BLANK]&lt;SQL&gt;SELECT * FROM Flag ORDER BY Flag&lt;/SQL&gt;&lt;/Query&gt;
&lt;Query ValidValue='True' ValidationListType='ValidationListOnly' ValidationWarning='1'&gt;
	&lt;Expression&gt;
		string.IsNullOrWhiteSpace(&lt;Value/&gt;) or
		(!&lt;HasMinValue Type='bool'/&gt; and !&lt;HasMaxValue Type='bool'/&gt;) or
		(&lt;AmbiguousLowValue/&gt; or &lt;AmbiguousHighValue/&gt;) or
		string.IsNullOrWhitespace(&lt;Flag/&gt;) == (&lt;InRangeHigh/&gt; and &lt;InRangeLow/&gt;)
	&lt;/Expression&gt;
&lt;/Query&gt;</value>
  </data>
  <metadata name="_componentStatusColumn.UserAddedColumn" type="System.Boolean, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089">
    <value>True</value>
  </metadata>
  <metadata name="_componentOriginalName.UserAddedColumn" type="System.Boolean, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089">
    <value>True</value>
  </metadata>
  <metadata name="_patientLastNameColumn.UserAddedColumn" type="System.Boolean, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089">
    <value>True</value>
  </metadata>
  <metadata name="_patientFirstNameColumn.UserAddedColumn" type="System.Boolean, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089">
    <value>True</value>
  </metadata>
  <metadata name="_patientMiddleNameColumn.UserAddedColumn" type="System.Boolean, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089">
    <value>True</value>
  </metadata>
  <metadata name="_patientSuffixColumn.UserAddedColumn" type="System.Boolean, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089">
    <value>True</value>
  </metadata>
  <metadata name="_orderingPhysicianLastNameColumn.UserAddedColumn" type="System.Boolean, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089">
    <value>True</value>
  </metadata>
  <metadata name="_orderingPhysicianFirstNameColumn.UserAddedColumn" type="System.Boolean, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089">
    <value>True</value>
  </metadata>
  <metadata name="_orderingPhysicianMiddleName.UserAddedColumn" type="System.Boolean, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089">
    <value>True</value>
  </metadata>
  <metadata name="_orderingPhysicianCodeColumn.UserAddedColumn" type="System.Boolean, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089">
    <value>True</value>
  </metadata>
</root>