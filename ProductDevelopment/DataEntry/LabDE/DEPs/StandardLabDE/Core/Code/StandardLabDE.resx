<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="_laboratoryIdentifier.AutoUpdateQuery" xml:space="preserve">
    <value>&lt;Declarations&gt;
&lt;Regex Name='Digits' SelectionMode='FIRST' Pattern='[\d]+'&gt;&lt;Attribute&gt;../../../LabInfo/Address/Address1&lt;/Attribute&gt;&lt;/Regex&gt;
&lt;Regex Name='Street' SelectionMode='FIRST' Pattern='((\b(?!ROAD\b)(?!BLVD\b)(?!DRIVE\b)(?!DR\.\b)(?!BOULEVARD\b)(?!AVE\b)(?!AVENUE\b)(?!PKWY\b)(?!PARKWAY\b)(?!WAY\b)(?!EAST\b)(?!SOUTH\b)(?!NORTH\b)(?!STREET\b)(?!RD\.\b)(?!AVE\.\b)(?!ST\.\b)(?!BLVD\.\b)(?!BOX\b)[A-Za-z]{3,})|(\d+(ST|ND|RD|TH)))'&gt;&lt;Attribute&gt;../../../LabInfo/Address/Address1&lt;/Attribute&gt;&lt;/Regex&gt;

&lt;Regex Name='FiveCharLab' SelectionMode='FIRST' Pattern='(\b(?!LABORATORY\b)(?!LAB\.?\b)(?!LABORATORIES\b)(?!MEDICAL\b)[-A-Za-z&amp;apos;]{5,})'&gt;&lt;Attribute&gt;../../../LabInfo/Name&lt;/Attribute&gt;&lt;/Regex&gt;
&lt;Regex Name='SecondWordLab' SelectionMode='FIRST' Pattern='(?&amp;lt;=[-A-Za-z&amp;apos;]{5,}\x20)(\b(?!LABORATORY\b)(?!LAB\.?\b)(?!LABORATORIES\b)(?!MEDICAL\b)[-A-Za-z&amp;apos;]{3,})'&gt;&lt;Attribute&gt;../../../LabInfo/Name&lt;/Attribute&gt;&lt;/Regex&gt;
&lt;Regex Name='FirstTwoWordsLab' SelectionMode='FIRST' Pattern='[-&amp;apos;\w]+\s[-&amp;apos;\w]+'&gt;&lt;Attribute&gt;../../../LabInfo/Name&lt;/Attribute&gt;&lt;/Regex&gt;
&lt;Regex Name='LabNameUpToComma' SelectionMode='FIRST' Pattern='.*(?=,.*)'&gt;&lt;Attribute&gt;../../../LabInfo/Name&lt;/Attribute&gt;&lt;/Regex&gt;

			
&lt;Expression Name='DigitsNotEmpty'&gt;
(&lt;Digits/&gt; == '') ? '___Empty___' : &lt;Digits/&gt;
&lt;/Expression&gt;
&lt;Expression Name='StreetNotEmpty'&gt;
(&lt;Street/&gt; == '') ? '___Empty___' : &lt;Street/&gt;
&lt;/Expression&gt;
&lt;Expression Name='FiveCharLabNotEmpty'&gt;
(&lt;FiveCharLab/&gt; == '') ? '___Empty___' : &lt;FiveCharLab/&gt;
&lt;/Expression&gt;
&lt;Expression Name='SecondWordLabNotEmpty'&gt;
(&lt;SecondWordLab/&gt; == '') ? '___Empty___' : &lt;SecondWordLab/&gt;
&lt;/Expression&gt;
&lt;Expression Name='FirstTwoWordsLabNotEmpty'&gt;
(&lt;FirstTwoWordsLab/&gt; == '') ? '___Empty___' : &lt;FirstTwoWordsLab/&gt;
&lt;/Expression&gt;
&lt;Expression Name='LabNameUpToCommaNotEmpty'&gt;
(&lt;LabNameUpToComma/&gt; == '') ? '___Empty___' : &lt;LabNameUpToComma/&gt;
&lt;/Expression&gt;

&lt;/Declarations&gt;

&lt;!-- Add spatial info to address fields --&gt;
&lt;Query Default='True'&gt;&lt;Attribute SpatialMode='Only'&gt;../../../LabInfo/Name&lt;/Attribute&gt;&lt;Attribute SpatialMode='Only'&gt;../../../LabInfo/Address/City&lt;/Attribute&gt;&lt;Attribute SpatialMode='Only'&gt;../../../LabInfo/Address/State&lt;/Attribute&gt;&lt;Attribute SpatialMode='Only'&gt;../../../LabInfo/Address/ZipCode&lt;/Attribute&gt;&lt;/Query&gt;

&lt;Query&gt;&lt;SQL&gt;SELECT LabName FROM LabAddresses WHERE LabCode IS NOT NULL AND LabCode = SUBSTRING(&lt;Attribute&gt;../LabCode&lt;/Attribute&gt;,1,25)&lt;/SQL&gt;&lt;/Query&gt;
			
&lt;!-- Look for exact name match --&gt;
&lt;Query&gt;&lt;SQL&gt;SELECT LabName FROM LabAddresses WHERE LabName LIKE LOWER(&lt;Attribute SelectionMode='FIRST'&gt;../../../LabInfo/Name&lt;/Attribute&gt;) + '%'&lt;/SQL&gt;&lt;/Query&gt;

&lt;!-- Look for extracted Address1 and City/Zip for match --&gt;
&lt;Query&gt;&lt;SQL&gt;SELECT LabName FROM LabAddresses WHERE Address1 LIKE &lt;Attribute&gt;../../../LabInfo/Address/Address1&lt;/Attribute&gt; and Zip LIKE SUBSTRING(&lt;Attribute&gt;../../../LabInfo/Address/ZipCode&lt;/Attribute&gt;,1,5) + '%'&lt;/SQL&gt;&lt;/Query&gt;
&lt;Query&gt;&lt;SQL&gt;SELECT LabName FROM LabAddresses WHERE Address1 LIKE &lt;Attribute&gt;../../../LabInfo/Address/Address1&lt;/Attribute&gt; and City LIKE LOWER(&lt;Attribute&gt;../../../LabInfo/Address/City&lt;/Attribute&gt;) + '%'&lt;/SQL&gt;&lt;/Query&gt;

&lt;!-- Look for Digits and 3+ character non-directional and non-street string in extracted Address1 and City for match --&gt;
&lt;Query&gt;&lt;SQL&gt;SELECT LabName FROM LabAddresses WHERE Address1 LIKE '%' + LOWER(&lt;DigitsNotEmpty/&gt;) + '%' + LOWER(&lt;StreetNotEmpty/&gt;) + '%' and City LIKE LOWER(&lt;Attribute&gt;../../../LabInfo/Address/City&lt;/Attribute&gt;) + '%'&lt;/SQL&gt;&lt;/Query&gt;

&lt;!-- Look for Digits in extracted Address1 and matching City or 1st 5 of ZipCode for match --&gt;
&lt;Query&gt;&lt;SQL&gt;SELECT LabName FROM LabAddresses WHERE Address1 LIKE '%' + LOWER(&lt;DigitsNotEmpty/&gt;) + '%' and Zip LIKE SUBSTRING(&lt;Attribute&gt;../../../LabInfo/Address/ZipCode&lt;/Attribute&gt;,1,5) + '%'&lt;/SQL&gt;&lt;/Query&gt;
&lt;Query&gt;&lt;SQL&gt;SELECT LabName FROM LabAddresses WHERE Address1 LIKE '%' + LOWER(&lt;DigitsNotEmpty/&gt;) + '%' and City LIKE '%' + LOWER(&lt;Attribute&gt;../../../LabInfo/Address/City&lt;/Attribute&gt;) + '%'&lt;/SQL&gt;&lt;/Query&gt;

&lt;!-- Look for 3+ character non-ordinal and non-street string in extracted Address1 and City or 1st 5 of ZipCode for match --&gt;
&lt;Query&gt;&lt;SQL&gt;SELECT LabName FROM LabAddresses WHERE Address1 LIKE '%' + LOWER(&lt;StreetNotEmpty/&gt;) + '%' and Zip LIKE SUBSTRING(&lt;Attribute&gt;../../../LabInfo/Address/ZipCode&lt;/Attribute&gt;,1,5) + '%'&lt;/SQL&gt;&lt;/Query&gt;
&lt;Query&gt;&lt;SQL&gt;SELECT LabName FROM LabAddresses WHERE Address1 LIKE '%' + LOWER(&lt;StreetNotEmpty/&gt;) + '%' and City LIKE LOWER(&lt;Attribute&gt;../../../LabInfo/Address/City&lt;/Attribute&gt;) + '%'&lt;/SQL&gt;&lt;/Query&gt;
	
&lt;!-- Look for Name of extracted LabName, minus common phrases, and matching LabName for match --&gt;
&lt;Query&gt;&lt;SQL&gt;SELECT LabName FROM LabAddresses WHERE LabName LIKE '%' + REPLACE(REPLACE(REPLACE(REPLACE(&lt;Attribute SelectionMode='FIRST'&gt;../../../LabInfo/Name&lt;/Attribute&gt;, ' ', '%'), 'LABORATORY', '%'),'LABORATORIES', '%'), 'MEDICAL', '%') + '%'&lt;/SQL&gt;&lt;/Query&gt;
&lt;Query&gt;&lt;SQL&gt;SELECT LabName FROM LabAddresses WHERE LabName LIKE '%' + REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(&lt;Attribute SelectionMode='FIRST'&gt;../../../LabInfo/Name&lt;/Attribute&gt;, ' ', '%'), 'LABORATORY', '%'),'LABORATORIES', '%'), 'MEDICAL', '%'), 'CENTER', '%') + '%'&lt;/SQL&gt;&lt;/Query&gt;
		
&lt;!-- Look for substring of extracted LabName and matching Street Number, City, or Zip for match --&gt;
&lt;Query&gt;&lt;SQL&gt;SELECT LabName FROM LabAddresses WHERE LabName LIKE '%' + LOWER(&lt;FirstTwoWordsLabNotEmpty/&gt;) + '%' and Zip LIKE SUBSTRING(&lt;Attribute&gt;../../../LabInfo/Address/ZipCode&lt;/Attribute&gt;,1,5) + '%'&lt;/SQL&gt;&lt;/Query&gt;
&lt;Query&gt;&lt;SQL&gt;SELECT LabName FROM LabAddresses WHERE LabName LIKE '%' + LOWER(&lt;FirstTwoWordsLabNotEmpty/&gt;) + '%' and City LIKE '%' + LOWER(&lt;Attribute&gt;../../../LabInfo/Address/City&lt;/Attribute&gt;) + '%'&lt;/SQL&gt;&lt;/Query&gt;
&lt;Query&gt;&lt;SQL&gt;SELECT LabName FROM LabAddresses WHERE LabName LIKE '%' + LOWER(&lt;FirstTwoWordsLabNotEmpty/&gt;) + '%' and Address1 LIKE '%' + LOWER(&lt;DigitsNotEmpty/&gt;) + '%'&lt;/SQL&gt;&lt;/Query&gt;
			
&lt;Query&gt;&lt;SQL&gt;SELECT LabName FROM LabAddresses WHERE LabName LIKE '%' + LOWER(&lt;FiveCharLabNotEmpty/&gt;) + '%' + LOWER(&lt;SecondWordLabNotEmpty/&gt;) + '%' and Zip LIKE SUBSTRING(&lt;Attribute&gt;../../../LabInfo/Address/ZipCode&lt;/Attribute&gt;,1,5) + '%'&lt;/SQL&gt;&lt;/Query&gt;
&lt;Query&gt;&lt;SQL&gt;SELECT LabName FROM LabAddresses WHERE LabName LIKE '%' + LOWER(&lt;FiveCharLabNotEmpty/&gt;) + '%' + LOWER(&lt;SecondWordLabNotEmpty/&gt;) + '%' and City LIKE '%' + LOWER(&lt;Attribute&gt;../../../LabInfo/Address/City&lt;/Attribute&gt;) + '%'&lt;/SQL&gt;&lt;/Query&gt;
&lt;Query&gt;&lt;SQL&gt;SELECT LabName FROM LabAddresses WHERE LabName LIKE '%' + LOWER(&lt;FiveCharLabNotEmpty/&gt;) + '%' + LOWER(&lt;SecondWordLabNotEmpty/&gt;) + '%' and Address1 LIKE '%' + LOWER(&lt;DigitsNotEmpty/&gt;) + '%'&lt;/SQL&gt;&lt;/Query&gt;
		
&lt;Query&gt;&lt;SQL&gt;SELECT LabName FROM LabAddresses WHERE LabName LIKE '%' + LOWER(&lt;FiveCharLabNotEmpty/&gt;) + '%' and Zip LIKE SUBSTRING(&lt;Attribute&gt;../../../LabInfo/Address/ZipCode&lt;/Attribute&gt;,1,5) + '%'&lt;/SQL&gt;&lt;/Query&gt;
&lt;Query&gt;&lt;SQL&gt;SELECT LabName FROM LabAddresses WHERE LabName LIKE '%' + LOWER(&lt;FiveCharLabNotEmpty/&gt;) + '%' and City LIKE '%' + LOWER(&lt;Attribute&gt;../../../LabInfo/Address/City&lt;/Attribute&gt;) + '%'&lt;/SQL&gt;&lt;/Query&gt;
&lt;Query&gt;&lt;SQL&gt;SELECT LabName FROM LabAddresses WHERE LabName LIKE '%' + LOWER(&lt;FiveCharLabNotEmpty/&gt;) + '%' and Address1 LIKE '%' + LOWER(&lt;DigitsNotEmpty/&gt;) + '%'&lt;/SQL&gt;&lt;/Query&gt;
	
&lt;Query&gt;&lt;SQL&gt;SELECT LabName FROM LabAddresses WHERE LabName LIKE '%' + LOWER(&lt;SecondWordLabNotEmpty/&gt;) + '%' and Zip LIKE SUBSTRING(&lt;Attribute&gt;../../../LabInfo/Address/ZipCode&lt;/Attribute&gt;,1,5) + '%'&lt;/SQL&gt;&lt;/Query&gt;
&lt;Query&gt;&lt;SQL&gt;SELECT LabName FROM LabAddresses WHERE LabName LIKE '%' + LOWER(&lt;SecondWordLabNotEmpty/&gt;) + '%' and City LIKE '%' + LOWER(&lt;Attribute&gt;../../../LabInfo/Address/City&lt;/Attribute&gt;) + '%'&lt;/SQL&gt;&lt;/Query&gt;
&lt;Query&gt;&lt;SQL&gt;SELECT LabName FROM LabAddresses WHERE LabName LIKE '%' + LOWER(&lt;SecondWordLabNotEmpty/&gt;) + '%' and Address1 LIKE '%' + LOWER(&lt;DigitsNotEmpty/&gt;) + '%'&lt;/SQL&gt;&lt;/Query&gt;


&lt;!-- Look for LabName substrings after replacement and also for Zip or City --&gt;
&lt;Query&gt;&lt;SQL&gt;SELECT LabName FROM LabAddresses WHERE LabName LIKE '%' + SUBSTRING(REPLACE(REPLACE(REPLACE(REPLACE(UPPER(&lt;Attribute SelectionMode='FIRST'&gt;../../../LabInfo/Name&lt;/Attribute&gt;), ' ', '%'), 'LABORATORY', '%'),'LABORATORIES', '%'), 'MEDICAL', '%'), 1, 10) + '%' and Zip LIKE SUBSTRING(&lt;Attribute&gt;../../../LabInfo/Address/ZipCode&lt;/Attribute&gt;,1,5) + '%'&lt;/SQL&gt;&lt;/Query&gt;
&lt;Query&gt;&lt;SQL&gt;SELECT LabName FROM LabAddresses WHERE LabName LIKE '%' + SUBSTRING(REPLACE(REPLACE(REPLACE(REPLACE(UPPER(&lt;Attribute SelectionMode='FIRST'&gt;../../../LabInfo/Name&lt;/Attribute&gt;), ' ', '%'), 'LABORATORY', '%'),'LABORATORIES', '%'), 'MEDICAL', '%'), 1, 10) + '%' and City LIKE '%' + LOWER(&lt;Attribute&gt;../../../LabInfo/Address/City&lt;/Attribute&gt;) + '%'&lt;/SQL&gt;&lt;/Query&gt;
&lt;Query&gt;&lt;SQL&gt;SELECT LabName FROM LabAddresses WHERE LabName LIKE SUBSTRING(REPLACE(REPLACE(REPLACE(REPLACE(UPPER(&lt;Attribute SelectionMode='FIRST'&gt;../../../LabInfo/Name&lt;/Attribute&gt;), ' ', '%'), 'LABORATORY', '%'),'LABORATORIES', '%'), 'MEDICAL', '%'), 1, 3) + '%' and Zip LIKE SUBSTRING(&lt;Attribute&gt;../../../LabInfo/Address/ZipCode&lt;/Attribute&gt;,1,5) + '%'&lt;/SQL&gt;&lt;/Query&gt;


&lt;!-- Look for Digits and 3+ character non-directional and not-street string in extracted Address1 --&gt;
&lt;Query&gt;&lt;SQL&gt;SELECT LabName FROM LabAddresses WHERE Address1 LIKE '%' + LOWER(&lt;DigitsNotEmpty/&gt;) + '%' + LOWER(&lt;StreetNotEmpty/&gt;) + '%'&lt;/SQL&gt;&lt;/Query&gt;

&lt;!-- Look for 1st two words then 1st two words after 1st 5-letter word for match --&gt;
&lt;Query&gt;&lt;SQL&gt;SELECT LabName FROM LabAddresses WHERE LabName LIKE '%' + LOWER(&lt;FirstTwoWordsLabNotEmpty/&gt;) + '%'&lt;/SQL&gt;&lt;/Query&gt;
&lt;Query&gt;&lt;SQL&gt;SELECT LabName FROM LabAddresses WHERE LabName LIKE '%' + LOWER(&lt;FiveCharLabNotEmpty/&gt;) + '%' + LOWER(&lt;SecondWordLabNotEmpty/&gt;) + '%'&lt;/SQL&gt;&lt;/Query&gt;

&lt;!-- Look for substring of extracted labname + extracted City in LabName for match --&gt;
&lt;Query&gt;&lt;SQL&gt;SELECT LabName FROM LabAddresses WHERE LabName LIKE '%' + LOWER(&lt;FiveCharLabNotEmpty/&gt;) + '%' + LOWER(&lt;Attribute&gt;../../../LabInfo/Address/City&lt;/Attribute&gt;) + '%'&lt;/SQL&gt;&lt;/Query&gt;

&lt;!-- Look for entire ZipCode in extracted Zip for match --&gt;
&lt;Query&gt;&lt;SQL&gt;SELECT LabName FROM LabAddresses WHERE Zip LIKE LOWER(&lt;Attribute&gt;../../../LabInfo/Address/ZipCode&lt;/Attribute&gt;) + '%'&lt;/SQL&gt;&lt;/Query&gt;

&lt;!-- Look for just first 5 of ZipCode in extracted Zip for match --&gt;
&lt;Query&gt;&lt;SQL&gt;SELECT LabName FROM LabAddresses WHERE Zip LIKE SUBSTRING(&lt;Attribute&gt;../../../LabInfo/Address/ZipCode&lt;/Attribute&gt;,1,5) + '%'&lt;/SQL&gt;&lt;/Query&gt;
			</value>
  </data>
  <metadata name="_testName.UserAddedColumn" type="System.Boolean, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089">
    <value>True</value>
  </metadata>
  <data name="_testName.AutoUpdateQuery" xml:space="preserve">
    <value>&lt;Query&gt;&lt;SQL&gt;SELECT Name FROM LabOrder WHERE EpicCode = SUBSTRING(&lt;Attribute&gt;../EpicCode&lt;/Attribute&gt;,1,25)&lt;/SQL&gt;&lt;/Query&gt;
&lt;Query&gt;&lt;SQL&gt;SELECT Name FROM LabOrder WHERE Code = SUBSTRING(&lt;Attribute&gt;.&lt;/Attribute&gt;,1,25)&lt;/SQL&gt;&lt;/Query&gt;</value>
  </data>
  <data name="_testName.ValidationQuery" xml:space="preserve">
    <value>&lt;Declarations&gt;
	&lt;SQL Name='MandatoryTests'&gt;SELECT TestCode FROM LabOrderTest
		INNER JOIN LabOrder ON LabOrderTest.OrderCode = LabOrder.Code
		WHERE LabOrder.Code = &lt;Attribute&gt;../OrderCode&lt;/Attribute&gt; AND Mandatory = 1&lt;/SQL&gt;
	&lt;Attribute Name='ExistingTests' SelectionMode='List'&gt;../Component/TestCode&lt;/Attribute&gt;
	&lt;Expression Name='MissingTests'&gt;
		(&lt;MandatoryTests  Type='string[]'/&gt; - &lt;ExistingTests Type='string[]'/&gt;).sort()
	&lt;/Expression&gt;
	&lt;Complex Name='ValidationMessage'&gt;Missing mandatory test(s): &lt;MissingTests StringList=', '/&gt;&lt;/Complex&gt;
&lt;/Declarations&gt;
&lt;Query&gt;&lt;SQL&gt;SELECT Name FROM LabOrder WHERE EpicCode IS NOT NULL ORDER BY Name&lt;/SQL&gt;&lt;/Query&gt;
&lt;Query ValidationListType='ValidationListOnly' ValidValue='' ValidationMessage='ValidationMessage' ValidationWarning='1'&gt;
	&lt;MissingTests/&gt;
&lt;/Query&gt;</value>
  </data>
  <metadata name="_orderCode.UserAddedColumn" type="System.Boolean, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089">
    <value>True</value>
  </metadata>
  <metadata name="_componentDate.UserAddedColumn" type="System.Boolean, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089">
    <value>True</value>
  </metadata>
  <metadata name="_componentName.UserAddedColumn" type="System.Boolean, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089">
    <value>True</value>
  </metadata>
  <data name="_componentName.AutoUpdateQuery" xml:space="preserve">
    <value>&lt;Query&gt;&lt;SQL&gt;SELECT LabTest.OfficialName FROM LabTest INNER JOIN LabOrderTest On LabTest.TestCode = LabOrderTest.TestCode WHERE LabOrderTest.OrderCode = SUBSTRING(&lt;Attribute&gt;../OrderCode&lt;/Attribute&gt;,1,25) AND LabTest.TestCode = SUBSTRING(&lt;Attribute&gt;TestCode&lt;/Attribute&gt;,1,25)&lt;/SQL&gt;&lt;/Query&gt;
&lt;Query&gt;&lt;SQL&gt;SELECT LabTest.OfficialName FROM LabTest, AlternateTestName, LabOrderTest WHERE LabTest.TestCode = AlternateTestName.TestCode AND LabTest.TestCode = LabOrderTest.TestCode AND LabOrderTest.OrderCode = SUBSTRING(&lt;Attribute&gt;../OrderCode&lt;/Attribute&gt;,1,25) AND AlternateTestName.Name = SUBSTRING(&lt;Attribute&gt;.&lt;/Attribute&gt;,1,50)&lt;/SQL&gt;&lt;/Query&gt;
&lt;Query&gt;&lt;SQL&gt;SELECT LabTest.OfficialName FROM LabTest INNER JOIN LabOrderTest On LabTest.TestCode = LabOrderTest.TestCode WHERE LabOrderTest.OrderCode = SUBSTRING(&lt;Attribute&gt;../OrderCode&lt;/Attribute&gt;,1,25) AND LabTest.TestCode = SUBSTRING(&lt;Attribute&gt;.&lt;/Attribute&gt;,1,25)&lt;/SQL&gt;&lt;/Query&gt;</value>
  </data>
  <data name="_componentName.ValidationQuery" xml:space="preserve">
    <value>&lt;SQL&gt;SELECT LabTest.OfficialName FROM LabTest INNER JOIN LabOrderTest On LabTest.TestCode = LabOrderTest.TestCode WHERE LabOrderTest.OrderCode = SUBSTRING(&lt;Attribute&gt;../OrderCode&lt;/Attribute&gt;,1,25) ORDER BY LabTest.OfficialName&lt;/SQL&gt;</value>
  </data>
  <metadata name="_testCode.UserAddedColumn" type="System.Boolean, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089">
    <value>True</value>
  </metadata>
  <data name="_testCode.AutoUpdateQuery" xml:space="preserve">
    <value>&lt;SQL&gt;SELECT LabTest.TestCode FROM LabTest INNER JOIN LabOrderTest On LabTest.TestCode = LabOrderTest.TestCode WHERE LabOrderTest.OrderCode = SUBSTRING(&lt;Attribute&gt;../../OrderCode&lt;/Attribute&gt;,1,25) AND OfficialName = SUBSTRING(&lt;Attribute&gt;..&lt;/Attribute&gt;,1,255)&lt;/SQL&gt;</value>
  </data>
  <data name="_testCode.ValidationQuery" xml:space="preserve">
    <value>&lt;SQL&gt;SELECT LabTest.TestCode FROM LabTest INNER JOIN LabOrderTest On LabTest.TestCode = LabOrderTest.TestCode WHERE LabOrderTest.OrderCode = SUBSTRING(&lt;Attribute&gt;../../OrderCode&lt;/Attribute&gt;,1,25) ORDER BY LabTest.TestCode&lt;/SQL&gt;</value>
  </data>
  <metadata name="_componentValue.UserAddedColumn" type="System.Boolean, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089">
    <value>True</value>
  </metadata>
  <metadata name="_componentUnits.UserAddedColumn" type="System.Boolean, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089">
    <value>True</value>
  </metadata>
  <metadata name="_componentRefRange.UserAddedColumn" type="System.Boolean, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089">
    <value>True</value>
  </metadata>
  <data name="_componentFlag.ValidationQuery" xml:space="preserve">
    <value>&lt;Declarations&gt;
	&lt;RegEx Name='Flag' Pattern='^(H|HH|L|LL|A|AA)$'&gt;&lt;Attribute&gt;.&lt;/Attribute&gt;&lt;/RegEx&gt;
	&lt;!--Attempt to parse a numerical expression from the value field--&gt;
	&lt;!--Allow for value of #, #-#, &gt;#, &lt;#, &gt;=#, &lt;=#, &gt;/=#, &lt;/=#, POS, NEG, POSITIVE, NEGATIVE--&gt;
	&lt;Expression Name='Value'&gt;
		(&lt;Attribute&gt;../Value&lt;/Attribute&gt; matches '(?i)\bPOS(ITIVE)?\b') ? '&amp;gt;0'
		: (&lt;Attribute&gt;../Value&lt;/Attribute&gt; matches '(?i)\bNEG(ATIVE)?\b') ? '0'
		: &lt;RegEx Pattern='^[\s&amp;gt;&amp;lt;/=]{0,5}?((?&amp;lt;=\d),\d{3}(?!=\d)|\d|\.|\s)+$|^\s*(((?&amp;lt;=\d),\d{3}(?!=\d)|\d|\.|\s)+-?){2}\s*$'&gt;
			&lt;Attribute&gt;../Value&lt;/Attribute&gt;&lt;/RegEx&gt;.Replace(',','').Replace(' ','')
	&lt;/Expression&gt;
	&lt;!--Attempt to parse the minimum value as a value that may be equal--&gt;
	&lt;RegEx Name='TempValueMin' Pattern='(^([\d\.]+)$)|([\d\.]+(?=-\d+))|((?&amp;lt;=&amp;gt;/?=)[\d\.]+)'&gt;&lt;Value/&gt;&lt;/RegEx&gt;
	&lt;!--Bias 0 = must be less than, Bias 1 = may be equal to, Bias 2 = must be greater than--&gt;
	&lt;Expression Name='ValueMinBias'&gt;(&lt;TempValueMin/&gt; == '') ? 2 : 1&lt;/Expression&gt;
	&lt;!--If not parsed as a value that may be equal, parse as one that must be greater--&gt;
	&lt;Expression Name='ValueMin'&gt;(&lt;TempValueMin/&gt; != '')
		? &lt;TempValueMin/&gt;
		: &lt;RegEx Pattern='(?&amp;lt;=&amp;gt;)[\d\.]+'&gt;&lt;Value/&gt;&lt;/RegEx&gt;
	&lt;/Expression&gt;
	&lt;!--Attempt to parse the maximum value as a value that may be equal--&gt;
	&lt;RegEx Name='TempValueMax' Pattern='(^([\d\.]+)$)|((?&amp;lt;=\d+-)[\d\.]+)|((?&amp;lt;=&amp;lt;/?=)[\d\.]+)'&gt;&lt;Value/&gt;&lt;/RegEx&gt;
	&lt;!--Bias 0 = must be less than, Bias 1 = may be equal to, Bias 2 = must be greater than--&gt;
	&lt;Expression Name='ValueMaxBias'&gt;(&lt;TempValueMax/&gt; == '') ? 0 : 1&lt;/Expression&gt;
	&lt;!--If not parsed as a value that may be equal, parse as one that must be less--&gt;
	&lt;Expression Name='ValueMax'&gt;(&lt;TempValueMax/&gt; != '')
		? &lt;TempValueMax/&gt;
		: &lt;RegEx Pattern='(?&amp;lt;=&amp;lt;)[\d\.]+'&gt;&lt;Value/&gt;&lt;/RegEx&gt;
	&lt;/Expression&gt;
	&lt;!--Attempt to parse a numerical expression from the value field--&gt;
	&lt;!--Allow for value of #, #-#, &gt;#, &lt;#, &gt;=#, &lt;=#, &gt;/=#, &lt;/=#, POS, NEG, POSITIVE, NEGATIVE--&gt;
	&lt;Expression Name='Range'&gt;
		(&lt;Attribute&gt;../Range&lt;/Attribute&gt; matches '(?i)\bPOS(ITIVE)?\b') ? '&amp;gt;0'
		: (&lt;Attribute&gt;../Range&lt;/Attribute&gt; matches '(?i)\bNEG(ATIVE)?\b') ? '0'
		: &lt;RegEx Pattern='^[\s&amp;gt;&amp;lt;/=]{0,5}?((?&amp;lt;=\d),\d{3}(?!=\d)|\d|\.|\s)+$|^\s*(((?&amp;lt;=\d),\d{3}(?!=\d)|\d|\.|\s)+-?){2}\s*$'&gt;
			&lt;Attribute&gt;../Range&lt;/Attribute&gt;&lt;/RegEx&gt;.Replace(',','').Replace(' ','')
	&lt;/Expression&gt;
	&lt;!--Attempt to parse the minimum range as a value that may be equal--&gt;
	&lt;RegEx Name='TempRangeMin' Pattern='(^([\d\.]+)$)|([\d\.]+(?=-\d+))|((?&amp;lt;=&amp;gt;/?=)[\d\.]+)'&gt;&lt;Range/&gt;&lt;/RegEx&gt;
	&lt;!--Bias 0 = must be less than, Bias 1 = may be equal to, Bias 2 = must be greater than--&gt;
	&lt;Expression Name='RangeMinBias'&gt;(&lt;TempRangeMin/&gt; == '') ? 2 : 1&lt;/Expression&gt;
	&lt;!--If not parsed as a value that may be equal, parse as one that must be greater--&gt;
	&lt;Expression Name='RangeMin'&gt;(&lt;TempRangeMin/&gt; != '')
		? &lt;TempRangeMin/&gt;
		: &lt;RegEx Pattern='(?&amp;lt;=&amp;gt;)[\d\.]+'&gt;&lt;Range/&gt;&lt;/RegEx&gt;
	&lt;/Expression&gt;
	&lt;!--Attempt to parse the maximum value as a value that may be equal--&gt;
	&lt;RegEx Name='TempRangeMax' Pattern='(^([\d\.]+)$)|((?&amp;lt;=\d+-)[\d\.]+)|((?&amp;lt;=&amp;lt;/?=)[\d\.]+)'&gt;&lt;Range/&gt;&lt;/RegEx&gt;
	&lt;!--Bias 0 = must be less than, Bias 1 = may be equal to, Bias 2 = must be greater than--&gt;
	&lt;Expression Name='RangeMaxBias'&gt;(&lt;TempRangeMax/&gt; == '') ? 0 : 1&lt;/Expression&gt;
	&lt;!--If not parsed as a value that may be equal, parse as one that must be less--&gt;
	&lt;Expression Name='RangeMax'&gt;(&lt;TempRangeMax/&gt; != '')
		? &lt;TempRangeMax/&gt;
		: &lt;RegEx Pattern='(?&amp;lt;=&amp;lt;)[\d\.]+'&gt;&lt;Range/&gt;&lt;/RegEx&gt;
	&lt;/Expression&gt;
	&lt;Expression Name='InRangeLow'&gt;
		&lt;!--If we don't have a value and a range minimum to compare consider low range boundary validated--&gt;
		(&lt;RangeMin/&gt; == '') or ((&lt;ValueMin/&gt; != '') and
			&lt;!--Compare using &gt;= check if appropriate--&gt;
			(((&lt;ValueMinBias/&gt; &amp;gt;= &lt;RangeMinBias/&gt;) and (&lt;ValueMin Type='double'/&gt; &amp;gt;= &lt;RangeMin Type='double'/&gt;)) or 
			&lt;!--Compare using &gt; check if appropriate--&gt;
			((&lt;ValueMinBias/&gt; &amp;lt; &lt;RangeMinBias/&gt;) and (&lt;ValueMin Type='double'/&gt; &amp;gt; &lt;RangeMin Type='double'/&gt;))))
	&lt;/Expression&gt;
	&lt;Expression Name='AmbiguousValueMin'&gt;
		&lt;!--Ambiguous if value spans the range minimum--&gt;
		(&lt;RangeMin/&gt; != '') and
		&lt;!--Value min must not be set or be less than range min--&gt;
		((&lt;ValueMin/&gt; == '') or 
			(((&lt;ValueMinBias/&gt; &amp;gt;= &lt;RangeMinBias/&gt;) and (&lt;ValueMin Type='double'/&gt; &amp;lt; &lt;RangeMin Type='double'/&gt;)) or
			 ((&lt;ValueMinBias/&gt; &amp;lt; &lt;RangeMinBias/&gt;) and (&lt;ValueMin Type='double'/&gt; &amp;lt;= &lt;RangeMin Type='double'/&gt;))))
			 and
		&lt;!--Value max must not be set or be within the range min--&gt;
		((&lt;ValueMax/&gt; == '') or 
			(((&lt;ValueMaxBias/&gt; &amp;gt;= &lt;RangeMinBias/&gt;) and (&lt;ValueMax Type='double'/&gt; &amp;gt;= &lt;RangeMin Type='double'/&gt;)) or
			 ((&lt;ValueMaxBias/&gt; &amp;lt; &lt;RangeMinBias/&gt;) and (&lt;ValueMax Type='double'/&gt; &amp;gt; &lt;RangeMin Type='double'/&gt;))))	
	&lt;/Expression&gt;
	&lt;Expression Name='InRangeHigh'&gt;
		&lt;!--If we don't have a value and a range maximum to compare consider high range boundary validated--&gt;
		(&lt;RangeMax/&gt; == '') or ((&lt;ValueMax/&gt; != '') and
			&lt;!--Compare using &gt;= check if appropriate--&gt;
			(((&lt;ValueMaxBias/&gt; &amp;gt; &lt;RangeMaxBias/&gt;) and (&lt;ValueMax Type='double'/&gt; &amp;lt; &lt;RangeMax Type='double'/&gt;)) or 
			&lt;!--Compare using &gt; check if appropriate--&gt;
			((&lt;ValueMaxBias/&gt; &amp;lt;= &lt;RangeMaxBias/&gt;) and (&lt;ValueMax Type='double'/&gt; &amp;lt;= &lt;RangeMax Type='double'/&gt;))))
	&lt;/Expression&gt;
	&lt;Expression Name='AmbiguousValueMax'&gt;
		&lt;!--Ambiguous if value spans the range maximum--&gt;
		(&lt;RangeMax/&gt; != '') and
		&lt;!--Value min must not be set or be within than range max--&gt;
		((&lt;ValueMin/&gt; == '') or 
			(((&lt;ValueMinBias/&gt; &amp;gt; &lt;RangeMaxBias/&gt;) and (&lt;ValueMin Type='double'/&gt; &amp;lt; &lt;RangeMax Type='double'/&gt;)) or
			 ((&lt;ValueMinBias/&gt; &amp;lt;= &lt;RangeMaxBias/&gt;) and (&lt;ValueMin Type='double'/&gt; &amp;lt;= &lt;RangeMax Type='double'/&gt;))))
			 and
		&lt;!--Value max must not be set or be greater than range max--&gt;
		((&lt;ValueMax/&gt; == '') or 
			(((&lt;ValueMaxBias/&gt; &amp;gt; &lt;RangeMaxBias/&gt;) and (&lt;ValueMax Type='double'/&gt; &amp;gt;= &lt;RangeMax Type='double'/&gt;)) or
			 ((&lt;ValueMaxBias/&gt; &amp;lt;= &lt;RangeMaxBias/&gt;) and (&lt;ValueMax Type='double'/&gt; &amp;gt; &lt;RangeMax Type='double'/&gt;))))
	&lt;/Expression&gt;
&lt;/Declarations&gt;
&lt;Query&gt;[BLANK]&lt;SQL&gt;SELECT * FROM Flag ORDER BY Flag&lt;/SQL&gt;&lt;/Query&gt;
&lt;Query ValidValue='True' ValidationListType='ValidationListOnly' ValidationWarning='1'&gt;
	&lt;Expression&gt;
		&lt;!--Don't warn if either the value or range could not be interpreted as a mathematical expression--&gt;
		((&lt;ValueMin/&gt; == '') and (&lt;ValueMax/&gt; == '')) or
		((&lt;RangeMin/&gt; == '') and (&lt;RangeMax/&gt; == '')) or
		&lt;!--Don't warn if the flag is missing and the value is within the range min and max either explicitly or ambiguously--&gt;
		((&lt;Flag/&gt; == '') and (&lt;InRangeLow Type='bool'/&gt; or &lt;AmbiguousValueMin/&gt;) and (&lt;InRangeHigh Type='bool'/&gt; or &lt;AmbiguousValueMax/&gt;)) or
		&lt;!--Don't warn if the flag is low and the value is outside range min or is ambiguously within the range min--&gt;
		((&lt;Flag/&gt;.StartsWith('L')) and (!&lt;InRangeLow Type='bool'/&gt; or &lt;AmbiguousValueMin/&gt;)) or 
		&lt;!--Don't warn if the flag is high and the value is outside range max or is ambiguously within the range max--&gt;
		((&lt;Flag/&gt;.StartsWith('H')) and (!&lt;InRangeHigh Type='bool'/&gt; or &lt;AmbiguousValueMax/&gt;)) or 
		&lt;!--Don't warn if the flag is abnormal and the value outside of either the range min or max or is ambiguously within either--&gt;
		((&lt;Flag/&gt;.StartsWith('A')) and (!&lt;InRangeLow Type='bool'/&gt; or &lt;AmbiguousValueMin/&gt; or !&lt;InRangeHigh Type='bool'/&gt; or &lt;AmbiguousValueMax/&gt;))
	&lt;/Expression&gt;
&lt;/Query&gt;</value>
  </data>
  <metadata name="_componentOriginalName.UserAddedColumn" type="System.Boolean, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089">
    <value>True</value>
  </metadata>
  <metadata name="_epicPatientFirstNameColumn.UserAddedColumn" type="System.Boolean, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089">
    <value>True</value>
  </metadata>
  <metadata name="_epicPatientMiddleNameColumn.UserAddedColumn" type="System.Boolean, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089">
    <value>True</value>
  </metadata>
  <metadata name="_epicPatientLastNameColumn.UserAddedColumn" type="System.Boolean, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089">
    <value>True</value>
  </metadata>
  <metadata name="_epicPatientSuffixColumn.UserAddedColumn" type="System.Boolean, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089">
    <value>True</value>
  </metadata>
  <metadata name="_patientFirstNameColumn.UserAddedColumn" type="System.Boolean, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089">
    <value>True</value>
  </metadata>
  <metadata name="_patientMiddleNameColumn.UserAddedColumn" type="System.Boolean, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089">
    <value>True</value>
  </metadata>
  <metadata name="_patientLastNameColumn.UserAddedColumn" type="System.Boolean, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089">
    <value>True</value>
  </metadata>
  <metadata name="_patientSuffixColumn.UserAddedColumn" type="System.Boolean, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089">
    <value>True</value>
  </metadata>
  <metadata name="_orderingPhysicianLastNameColumn.UserAddedColumn" type="System.Boolean, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089">
    <value>True</value>
  </metadata>
  <metadata name="_orderingPhysicianFirstNameColumn.UserAddedColumn" type="System.Boolean, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089">
    <value>True</value>
  </metadata>
  <metadata name="_orderingPhysicianMiddleName.UserAddedColumn" type="System.Boolean, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089">
    <value>True</value>
  </metadata>
  <metadata name="_orderingPhysicianCodeColumn.UserAddedColumn" type="System.Boolean, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089">
    <value>True</value>
  </metadata>
  <data name="_orderingPhysicianCodeColumn.AutoUpdateQuery" xml:space="preserve">
    <value>&lt;Query&gt;&lt;SQL&gt;SELECT Code FROM Physician WHERE LastName LIKE SUBSTRING(&lt;Attribute&gt;../Last&lt;/Attribute&gt;,1,50) + '%' AND FirstName LIKE SUBSTRING(&lt;Attribute&gt;../First&lt;/Attribute&gt;,1,30) + '%' AND (MiddleName IS NULL OR MiddleName = '' OR MiddleName LIKE SUBSTRING(&lt;Attribute&gt;../Middle&lt;/Attribute&gt;,1,30) + '%') ORDER BY Code&lt;/SQL&gt;&lt;/Query&gt;</value>
  </data>
  <data name="_orderingPhysicianCodeColumn.ValidationQuery" xml:space="preserve">
    <value>&lt;SQL&gt;SELECT Code FROM Physician WHERE LastName LIKE SUBSTRING(&lt;Attribute&gt;../Last&lt;/Attribute&gt;,1,50) + '%' AND FirstName LIKE SUBSTRING(&lt;Attribute&gt;../First&lt;/Attribute&gt;,1,30) + '%' AND (MiddleName IS NULL OR MiddleName = '' OR MiddleName LIKE SUBSTRING(&lt;Attribute&gt;../Middle&lt;/Attribute&gt;,1,30) + '%' ) ORDER BY Code&lt;/SQL&gt;</value>
  </data>
  <metadata name="_physicianLastNameColumn.UserAddedColumn" type="System.Boolean, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089">
    <value>True</value>
  </metadata>
  <metadata name="_physicianFirstNameColumn.UserAddedColumn" type="System.Boolean, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089">
    <value>True</value>
  </metadata>
  <metadata name="_physicianMiddleNameColumn.UserAddedColumn" type="System.Boolean, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089">
    <value>True</value>
  </metadata>
  <metadata name="_physicianCode.UserAddedColumn" type="System.Boolean, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089">
    <value>True</value>
  </metadata>
  <data name="_physicianCode.AutoUpdateQuery" xml:space="preserve">
    <value>&lt;Query&gt;&lt;SQL&gt;SELECT Code FROM Physician WHERE LastName LIKE SUBSTRING(&lt;Attribute&gt;../Last&lt;/Attribute&gt;,1,50) + '%' AND FirstName LIKE SUBSTRING(&lt;Attribute&gt;../First&lt;/Attribute&gt;,1,30) + '%' AND (MiddleName IS NULL OR MiddleName = '' OR MiddleName LIKE SUBSTRING(&lt;Attribute&gt;../Middle&lt;/Attribute&gt;,1,30) + '%') ORDER BY Code&lt;/SQL&gt;&lt;/Query&gt;</value>
  </data>
  <data name="_physicianCode.ValidationQuery" xml:space="preserve">
    <value>&lt;SQL&gt;SELECT Code FROM Physician WHERE LastName LIKE SUBSTRING(&lt;Attribute&gt;../Last&lt;/Attribute&gt;,1,50) + '%' AND FirstName LIKE SUBSTRING(&lt;Attribute&gt;../First&lt;/Attribute&gt;,1,30) + '%' AND (MiddleName IS NULL OR MiddleName = '' OR MiddleName LIKE SUBSTRING(&lt;Attribute&gt;../Middle&lt;/Attribute&gt;,1,30) + '%') ORDER BY Code&lt;/SQL&gt;</value>
  </data>
  <data name="_testResultTime.ValidationQuery" xml:space="preserve">
    <value>&lt;Declarations&gt;
	&lt;Composite Name='ValidationMessage'&gt;Result date/time must be greater than or equal to the collection date/time.&lt;/Composite&gt;
&lt;/Declarations&gt;
&lt;Query ValidValue='True' ValidationMessage='ValidationMessage'&gt;
	&lt;Expression&gt;
		DateTime.TryParse(&lt;Attribute&gt;../CollectionDate&lt;/Attribute&gt; + ' ' + &lt;Attribute&gt;../CollectionTime&lt;/Attribute&gt;, null) and
		DateTime.TryParse(&lt;Attribute&gt;../ResultDate&lt;/Attribute&gt; + ' ' + &lt;Attribute&gt;../ResultTime&lt;/Attribute&gt;, null) and
		(date(&lt;Attribute&gt;../ResultDate&lt;/Attribute&gt; + ' ' + &lt;Attribute&gt;../ResultTime&lt;/Attribute&gt;) &amp;gt;=
		date(&lt;Attribute&gt;../CollectionDate&lt;/Attribute&gt; + ' ' + &lt;Attribute&gt;../CollectionTime&lt;/Attribute&gt;))
	&lt;/Expression&gt;
&lt;/Query&gt;
</value>
  </data>
  <data name="_testResultDate.ValidationQuery" xml:space="preserve">
    <value>&lt;Declarations&gt;
	&lt;Composite Name='ValidationMessage'&gt;Result date/time must be greater than or equal to the collection date/time.&lt;/Composite&gt;
&lt;/Declarations&gt;
&lt;Query ValidValue='True' ValidationMessage='ValidationMessage'&gt;
	&lt;Expression&gt;
		DateTime.TryParse(&lt;Attribute&gt;../CollectionDate&lt;/Attribute&gt; + ' ' + &lt;Attribute&gt;../CollectionTime&lt;/Attribute&gt;, null) and
		DateTime.TryParse(&lt;Attribute&gt;../ResultDate&lt;/Attribute&gt; + ' ' + &lt;Attribute&gt;../ResultTime&lt;/Attribute&gt;, null) and
		(date(&lt;Attribute&gt;../ResultDate&lt;/Attribute&gt; + ' ' + &lt;Attribute&gt;../ResultTime&lt;/Attribute&gt;) &amp;gt;=
		date(&lt;Attribute&gt;../CollectionDate&lt;/Attribute&gt; + ' ' + &lt;Attribute&gt;../CollectionTime&lt;/Attribute&gt;))
	&lt;/Expression&gt;
&lt;/Query&gt;
</value>
  </data>
</root>