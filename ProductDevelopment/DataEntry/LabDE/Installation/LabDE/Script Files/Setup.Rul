/////////////////////////////////////////////////////////////////////////////
//                                                                            
//  File Name:    Setup.rul                                                   
//                                                                            
//  Description:  InstallShield script                                          
//                                                                            
//  Comments:     This minimal project is intended for advanced users. 
//                To create a robust project with step-by-step 
//				  instructions, use the Project Wizard. 
//                                                                                                               
/////////////////////////////////////////////////////////////////////////////

// Include header files /////////////////////////////////////////////////////
#include "ifx.h"

#include "..\..\..\..\..\Common\InstallScripts\Common.rul"      

#include "..\..\..\..\..\Common\InstallScripts\OnFirstUIBefore.rul"

#include "..\..\..\..\..\Common\InstallScripts\OnMaintUIBefore.rul"

#include "..\..\..\..\..\Common\InstallScripts\OnMaintUIAfter.rul"

                                 
#define CORE_POINT_CLIENT_GUID "{5DAD3198-6D64-46FA-961C-FBB76B722F4A}"

prototype InstallMSMQ();
prototype DisableVistaThemes();

///////////////////////////////////////////////////////////////////////////////
//
//  FUNCTION:   OnFirstUIAfter
//
//  EVENT:      FirstUIAfter event is sent after file transfer, when installation 
//              is run for the first time on given machine. In this event handler 
//              installation usually displays UI that will inform end user that
//              installation has been completed successfully.
//
///////////////////////////////////////////////////////////////////////////////
function OnFirstUIAfter()
    STRING szTitle, szMsg1, szMsg2, szRegAllCmdLine, szCmd;
    BOOL bOpt1, bOpt2;    
begin
	if (gbInstalled) then
	    if (SYSINFO.nOSMajor >= 6)  then
			LAAW_SHELLEXECUTEVERB = "runas";                                                                                                                      //
		endif;
		
		// Removed Corepoint install because not sure if silent install works properly
   		//InstallCorepoint();
   		InstallMSMQ();    
   		
   		SetDCOMPermissions();   
   		
   		// Disable Vista themes if this is Vista.
   		DisableVistaThemes();

	   	// Rename the uex file
 	  	RenameUEXFile();
        
        // Register
		RunRegisterAll();
 
	 	// Install FKB 
		InstallFKB();
			
		// Install the ESFAMService.exe 
		InstallDotNetService( "\"" + PROGRAMFILES + EXTRACT_DIR ^ "ESFAMService.exe\"");
	
		// Install the ESFDRSService.exe 
		InstallDotNetService( "\"" + PROGRAMFILES + EXTRACT_DIR ^ "ESFDRSService.exe\"");
	
		// Install the Extract.ExceptionService
		InstallDotNetService( "\"" + PROGRAMFILES + EXTRACT_DIR ^ "Extract.ExceptionService.exe\"");
		
		// Install the ESIPCService
		InstallDotNetService( "\"" + PROGRAMFILES + EXTRACT_DIR ^ "ESIPCService.exe\"");   
		
		// Register the shell extension
		RegisterLoginNPShellExtension("Extract.Utilities.ShellExtensions.dll");      
		
		// Install the Nuance licenses
		InstallNuanceLicense();
		
		// Install the readme file
		InstallReadme();
		
    endif;
    
    Disable(STATUSEX);

	if ( gbInstalled ) then
		szMsg1 = SdLoadString(IFX_SDFINISH_MSG1);   
	    SdFinishReboot(szTitle, szMsg1, SYS_BOOTMACHINE, szMsg2, 0);
	else
		szMsg1 = "Installation was unable to complete, because does not have administrative privileges.";
		SdFinish(szTitle, szMsg1, "Click Finish to exit.", "", "", bOpt1, bOpt2);
	endif;
end; 


///////////////////////////////////////////////////////////////////////////////
//
// Function: InstallMSMQ
//
//  Purpose: This function sets up MSMQ
//	Returns 0 if no errors
///////////////////////////////////////////////////////////////////////////////
function InstallMSMQ()
STRING szProgram, szCmdLine, strUninstallKey, tmp;
int nResult, svServiceState;
begin
	SdShowMsg("Setup is Configuring MSMQ", TRUE);

	// Need to install msmq which depends on the OS Version
	if ( SYSINFO.nOSMajor = 5 ) then
		szProgram = "sysocmgr";
		szCmdLine = "/i:" + WINDIR ^ "sysoc.inf /u:\"" + SUPPORTDIR ^ "XP_2003_MSMQ.ini\" /q /c";
		//MessageBox( szCmdLine, MB_OK);
		LaunchAppAndWait(szProgram, szCmdLine, LAAW_OPTION_WAIT | LAAW_OPTION_SHOW_HOURGLASS); 
	elseif (SYSINFO.nOSMajor = 6 ) then
		// If 64 bit file system redirection is not turned off the DISM command will not work
		// on 64 bit OS
		Disable(WOW64FSREDIRECTION);

		if (SYSINFO.nWinMinor < 2 ) then
			szProgram = "ocsetup";
			// If it is server the arguments need to be different
			if ( SYSINFO. nOSProductType = VER_NT_SERVER ) then
				szCmdLine = "MSMQ-Server /passive /quiet /norestart";	
			else
				szCmdLine = "MSMQ-Container;MSMQ-Server /passive /quiet /norestart";
			endif;
		else
			szProgram = "DISM ";
			// If it is server the arguments need to be different
			if ( SYSINFO.nOSProductType != VER_NT_SERVER ) then
				szCmdLine = " /online /enable-feature /featurename:MSMQ-Container /all /quiet /norestart";
				LaunchAppAndWait(szProgram, szCmdLine, LAAW_OPTION_WAIT | LAAW_OPTION_SHOW_HOURGLASS);
			endif;	
			szCmdLine = " /online /enable-feature /featurename:MSMQ-Server /all /quiet /norestart";	
		endif;
		LaunchAppAndWait(szProgram, szCmdLine, LAAW_OPTION_WAIT | LAAW_OPTION_SHOW_HOURGLASS);
		
		Enable(WOW64FSREDIRECTION);
	endif;

	SdShowMsg("Setup is Configuring MSMQ", FALSE);
end;
             
///////////////////////////////////////////////////////////////////////////////
//
// Function: DisableVistaThemes
//
//  Purpose: This function disables themes on Vista and Windows 2008 for
//			 ProcessFiles.exe and DataEntryApplication.exe
//	Returns 0 if no errors
///////////////////////////////////////////////////////////////////////////////
function DisableVistaThemes()
begin
	if (SYSINFO.nOSMajor = 6 ) then
		LaunchAppAndWait("sbinst.exe", "DisabledThemes.sdb",
			LAAW_OPTION_WAIT | LAAW_OPTION_SHOW_HOURGLASS);
	endif;
end;



//---------------------------------------------------------------------------
// OnResumeUIAfter
//
// The OnResumeUIBefore event is called when end user runs installation that is
// performing a resumed install. Usually this happens by specifying a property
// like REINSTALL or ADDLOCAL at the command line when the  product is already
// installed. In the handler, installation usually displays UI that will
// inform end user that Reinstallation has been completed successfully.
//---------------------------------------------------------------------------
function OnResumeUIAfter()
    STRING szTitle, szMsg1, szMsg2, szOption1, szOption2;
    NUMBER bOpt1, bOpt2;
begin
	Disable(STATUSEX);

	szTitle = SdLoadString(IDS_IFX_SDFINISH_UPDATE_TITLE);    
    szMsg1  = SdLoadString(IDS_IFX_SDFINISH_UPDATE_MSG1);
	bOpt1   = FALSE;
    bOpt2   = FALSE;

    if ( BATCH_INSTALL ) then
    	SdFinishReboot ( szTitle , szMsg1 , SYS_BOOTMACHINE , szMsg2 , 0 );
    else    
       	SdFinish ( szTitle , szMsg1 , szMsg2 , szOption1 , szOption2 , bOpt1 , bOpt2 );
    endif;
end;


